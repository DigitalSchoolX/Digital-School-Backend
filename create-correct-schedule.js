const mongoose = require('mongoose');
const Schedule = require('./src/modules/schedules/models/schedule.model');
const Class = require('./src/modules/classes/models/class.model');
const Subject = require('./src/modules/subjects/models/subject.model');
const User = require('./src/modules/auth/models/user.model');
const ScheduleService = require('./src/modules/schedules/services/schedule.service');

// K·∫øt n·ªëi database
mongoose.connect('mongodb://localhost:27017/ecoschool', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

async function createCorrectSchedule() {
  try {
    console.log('üîÑ T·∫†O TH·ªúI KH√ìA BI·ªÇU V·ªöI LOGIC PH√ÇN C√îNG GI√ÅO VI√äN ƒê√öNG\n');

    // 1. T√¨m l·ªõp 12A3
    console.log('üîç ƒêang t√¨m l·ªõp 12A3...');
    
    // Debug: Xem t·∫•t c·∫£ l·ªõp c√≥ s·∫µn
    const allClasses = await Class.find({}).select('className academicYear');
    console.log('üìã T·∫•t c·∫£ l·ªõp c√≥ s·∫µn:');
    allClasses.forEach(cls => {
      console.log(`   - ${cls.className} (${cls.academicYear})`);
    });
    
    const classInfo = await Class.findOne({
      className: '12A3',
      academicYear: '2024-2025'
    }).populate('homeroomTeacher');

    if (!classInfo) {
      throw new Error('Kh√¥ng t√¨m th·∫•y l·ªõp 12A3');
    }

    console.log(`üìö L·ªõp: ${classInfo.className}`);
    console.log(`üë®‚Äçüè´ Ch·ªß nhi·ªám: ${classInfo.homeroomTeacher?.name || 'Ch∆∞a c√≥'}`);

    // 2. X√≥a schedule c≈© n·∫øu c√≥
    await Schedule.deleteMany({
      class: classInfo._id,
      academicYear: '2024-2025'
    });
    console.log('üóëÔ∏è ƒê√£ x√≥a th·ªùi kh√≥a bi·ªÉu c≈©');

    // 3. L·∫•y m√¥n h·ªçc cho l·ªõp 12
    const subjects = await Subject.find({
      gradeLevels: 12,
      isActive: true
    });

    console.log(`üìñ T√¨m th·∫•y ${subjects.length} m√¥n h·ªçc:`);
    subjects.forEach(subject => {
      console.log(`   - ${subject.subjectName} (${subject.periodsPerWeek} ti·∫øt/tu·∫ßn)`);
    });

    // 4. L·∫•y gi√°o vi√™n
    const teachers = await User.find({
      role: 'teacher',
      active: true
    }).populate('subjects');

    console.log(`üë• T√¨m th·∫•y ${teachers.length} gi√°o vi√™n`);

    // 5. T·∫°o th·ªùi kh√≥a bi·ªÉu m·ªõi
    const scheduleService = new ScheduleService();
    
    const newSchedule = await scheduleService.createScheduleForClass(
      classInfo._id,
      '2024-2025',
      1,
      subjects,
      teachers,
      classInfo.homeroomTeacher._id
    );

    console.log('‚úÖ T·∫°o th·ªùi kh√≥a bi·ªÉu th√†nh c√¥ng!');
    console.log(`   Schedule ID: ${newSchedule._id}`);
    console.log(`   T·ªïng s·ªë ti·∫øt: ${newSchedule.getTotalScheduledPeriods()}`);

    // 6. Ph√¢n t√≠ch k·∫øt qu·∫£
    console.log('\nüìä PH√ÇN T√çCH PH√ÇN C√îNG GI√ÅO VI√äN:');
    
    const subjectTeacherMap = new Map();
    const teacherSubjectCount = new Map();
    
    // Populate ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt
    await newSchedule.populate([
      { path: 'schedule.periods.subject', select: 'subjectName subjectCode' },
      { path: 'schedule.periods.teacher', select: 'name email' }
    ]);

    newSchedule.schedule.forEach(day => {
      day.periods.forEach(period => {
        if (period.subject && period.teacher) {
          const subjectName = period.subject.subjectName;
          const teacherName = period.teacher.name;
          
          // Map m√¥n h·ªçc -> gi√°o vi√™n
          if (!subjectTeacherMap.has(subjectName)) {
            subjectTeacherMap.set(subjectName, new Set());
          }
          subjectTeacherMap.get(subjectName).add(teacherName);
          
          // Map gi√°o vi√™n -> m√¥n h·ªçc
          if (!teacherSubjectCount.has(teacherName)) {
            teacherSubjectCount.set(teacherName, new Set());
          }
          teacherSubjectCount.get(teacherName).add(subjectName);
        }
      });
    });

    console.log('\nM√¥n h·ªçc v√† gi√°o vi√™n d·∫°y:');
    subjectTeacherMap.forEach((teachers, subject) => {
      const teacherList = Array.from(teachers);
      const status = teacherList.length > 1 ? '‚ùå SAI - Nhi·ªÅu gi√°o vi√™n' : '‚úÖ ƒê√öNG';
      console.log(`   ${subject}: ${teacherList.join(', ')} ${status}`);
    });

    console.log('\nS·ªë m√¥n m·ªói gi√°o vi√™n d·∫°y:');
    teacherSubjectCount.forEach((subjects, teacher) => {
      const subjectList = Array.from(subjects);
      console.log(`   ${teacher}: ${subjectList.length} m√¥n (${subjectList.join(', ')})`);
    });

    // 7. Ki·ªÉm tra ch·ªß nhi·ªám
    const homeroomTeacher = classInfo.homeroomTeacher?.name;
    if (homeroomTeacher && teacherSubjectCount.has(homeroomTeacher)) {
      const homeroomSubjects = Array.from(teacherSubjectCount.get(homeroomTeacher));
      console.log(`\n‚≠ê Gi√°o vi√™n ch·ªß nhi·ªám ${homeroomTeacher} d·∫°y: ${homeroomSubjects.join(', ')}`);
    }

    console.log('\nüéâ HO√ÄN TH√ÄNH!');

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    console.error('Stack trace:', error.stack);
  } finally {
    mongoose.connection.close();
  }
}

createCorrectSchedule(); 