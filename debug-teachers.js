const mongoose = require('mongoose');
require('dotenv').config();

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI);

const Subject = require('./src/modules/subjects/models/subject.model');
const User = require('./src/modules/auth/models/user.model');

async function debugTeachers() {
  try {
    console.log('üîç DEBUG TEACHERS\n');

    // 1. L·∫•y t·∫•t c·∫£ m√¥n h·ªçc kh·ªëi 12
    const subjects = await Subject.find({
      gradeLevels: 12,
      isActive: true
    }).lean();

    console.log(`1. M√¥n h·ªçc kh·ªëi 12: ${subjects.length} m√¥n`);
    const subjectIds = subjects.map(s => s._id);
    console.log(`   Subject IDs: ${subjectIds.map(id => id.toString()).join(', ')}`);

    // 2. Ki·ªÉm tra t·∫•t c·∫£ gi√°o vi√™n
    const allTeachers = await User.find({
      role: { $in: ['teacher', 'homeroom_teacher'] },
      active: true
    }).populate('subjects', 'subjectName subjectCode');

    console.log(`\n2. T·∫•t c·∫£ gi√°o vi√™n active: ${allTeachers.length}`);
    allTeachers.forEach(t => {
      const subjectNames = t.subjects?.map(s => s.subjectName).join(', ') || 'Kh√¥ng c√≥ m√¥n';
      console.log(`   - ${t.name} (${t.role}): ${subjectNames}`);
    });

    // 3. Ki·ªÉm tra gi√°o vi√™n c√≥ subjects field
    const teachersWithSubjects = await User.find({
      role: { $in: ['teacher', 'homeroom_teacher'] },
      subjects: { $exists: true, $ne: [] },
      active: true
    }).populate('subjects', 'subjectName subjectCode');

    console.log(`\n3. Gi√°o vi√™n c√≥ subjects field: ${teachersWithSubjects.length}`);
    teachersWithSubjects.forEach(t => {
      const subjectNames = t.subjects?.map(s => s.subjectName).join(', ') || 'Kh√¥ng c√≥ m√¥n';
      console.log(`   - ${t.name}: ${subjectNames}`);
    });

    // 4. Ki·ªÉm tra query c·ª• th·ªÉ
    const teachersForGrade12 = await User.find({
      role: { $in: ['teacher', 'homeroom_teacher'] },
      'subjects': { $in: subjectIds },
      active: true
    }).populate('subjects', 'subjectName subjectCode');

    console.log(`\n4. Gi√°o vi√™n c√≥ th·ªÉ d·∫°y kh·ªëi 12: ${teachersForGrade12.length}`);
    teachersForGrade12.forEach(t => {
      const subjectNames = t.subjects?.map(s => s.subjectName).join(', ') || 'Kh√¥ng c√≥ m√¥n';
      console.log(`   - ${t.name}: ${subjectNames}`);
    });

    // 5. Ki·ªÉm tra schema c·ªßa User
    const sampleUser = await User.findOne({ role: 'teacher' });
    if (sampleUser) {
      console.log(`\n5. Schema m·∫´u c·ªßa User:`);
      console.log(`   - _id: ${sampleUser._id}`);
      console.log(`   - name: ${sampleUser.name}`);
      console.log(`   - role: ${sampleUser.role}`);
      console.log(`   - subjects: ${sampleUser.subjects}`);
      console.log(`   - subject: ${sampleUser.subject}`);
      console.log(`   - active: ${sampleUser.active}`);
    }

    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

debugTeachers(); 