const mongoose = require('mongoose');
require('dotenv').config();

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI);

const Class = require('./src/modules/classes/models/class.model');
const Subject = require('./src/modules/subjects/models/subject.model');
const User = require('./src/modules/auth/models/user.model');
const Schedule = require('./src/modules/schedules/models/schedule.model');

async function debugScheduleCreation() {
  try {
    console.log('üîç DEBUG SCHEDULE CREATION\n');

    // 1. Ki·ªÉm tra l·ªõp 12A1
    const classInfo = await Class.findOne({
      className: '12A1',
      academicYear: '2024-2025'
    }).populate('homeroomTeacher').lean();

    console.log('1. Th√¥ng tin l·ªõp:');
    console.log(`   - T√™n l·ªõp: ${classInfo.className}`);
    console.log(`   - Ch·ªß nhi·ªám: ${classInfo.homeroomTeacher?.name || 'Ch∆∞a c√≥'}`);
    console.log(`   - Grade Level: ${classInfo.gradeLevel || 'Ch∆∞a x√°c ƒë·ªãnh'}`);
    console.log(`   - Raw object:`, JSON.stringify(classInfo, null, 2));

    // 2. Ki·ªÉm tra m√¥n h·ªçc
    const gradeLevel = classInfo.gradeLevel || 12;
    const subjects = await Subject.find({
      gradeLevels: gradeLevel,
      isActive: true
    }).lean();

    console.log(`\n2. M√¥n h·ªçc cho c·∫•p l·ªõp ${gradeLevel}:`);
    console.log(`   - S·ªë m√¥n t√¨m th·∫•y: ${subjects.length}`);
    subjects.forEach(s => {
      console.log(`   - ${s.subjectName} (${s.subjectCode}) - ${s.periodsPerWeek || 3} ti·∫øt/tu·∫ßn`);
    });

    // 3. Ki·ªÉm tra gi√°o vi√™n
    const subjectIds = subjects.map(s => s._id);
    const teachers = await User.find({
      role: { $in: ['teacher', 'homeroom_teacher'] },
      'subject': { $in: subjectIds },
      active: true
    }).populate('subject', 'subjectName subjectCode');

    console.log(`\n3. Gi√°o vi√™n c√≥ th·ªÉ d·∫°y:`);
    console.log(`   - S·ªë gi√°o vi√™n t√¨m th·∫•y: ${teachers.length}`);
    teachers.forEach(t => {
      const subjectName = t.subject ? t.subject.subjectName : 'Kh√¥ng c√≥ m√¥n';
      console.log(`   - ${t.name}: ${subjectName}`);
    });

    // 4. Ki·ªÉm tra th·ªùi kh√≥a bi·ªÉu hi·ªán t·∫°i
    const schedule = await Schedule.findOne({
      class: classInfo._id,
      academicYear: '2024-2025'
    });

    if (schedule) {
      console.log(`\n4. Th·ªùi kh√≥a bi·ªÉu hi·ªán t·∫°i:`);
      console.log(`   - Schedule ID: ${schedule._id}`);
      console.log(`   - Status: ${schedule.status}`);
      console.log(`   - S·ªë ng√†y c√≥ l·ªãch: ${schedule.schedule?.length || 0}`);
      
      if (schedule.schedule && schedule.schedule.length > 0) {
        let totalPeriods = 0;
        schedule.schedule.forEach((day, index) => {
          const periodsCount = day.periods?.length || 0;
          totalPeriods += periodsCount;
          console.log(`   - ${day.dayOfWeek} (${['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'][index]}): ${periodsCount} ti·∫øt`);
        });
        console.log(`   - T·ªïng s·ªë ti·∫øt: ${totalPeriods}`);
        
        // Hi·ªÉn th·ªã chi ti·∫øt m·ªôt v√†i ti·∫øt
        console.log(`\n   Chi ti·∫øt m·ªôt s·ªë ti·∫øt:`);
        schedule.schedule.forEach((day, dayIndex) => {
          if (day.periods && day.periods.length > 0) {
            console.log(`   ${['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'][dayIndex]}:`);
            day.periods.slice(0, 3).forEach(period => {
              console.log(`     - Ti·∫øt ${period.periodNumber}: ${period.subject ? 'C√≥ m√¥n h·ªçc' : 'Kh√¥ng c√≥ m√¥n h·ªçc'} - ${period.teacher ? 'C√≥ gi√°o vi√™n' : 'Kh√¥ng c√≥ gi√°o vi√™n'}`);
            });
          }
        });
      }
    } else {
      console.log(`\n4. Kh√¥ng t√¨m th·∫•y th·ªùi kh√≥a bi·ªÉu`);
    }

    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

debugScheduleCreation(); 