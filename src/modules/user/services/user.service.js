const User = require('../../auth/models/user.model');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const nodemailer = require('nodemailer');
const Subject = require('../../subjects/models/subject.model');

class UserService {
  // T·∫°o one-time password v·ªõi ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
  generateOTP() {
    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const lowercase = 'abcdefghijklmnopqrstuvwxyz';
    const numbers = '0123456789';
    const specialChars = '!@#$%^&*?';
    
    // K·∫øt h·ª£p t·∫•t c·∫£ k√Ω t·ª±
    const allChars = uppercase + lowercase + numbers + specialChars;
    
    let password = '';
    
    // ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t 1 k√Ω t·ª± t·ª´ m·ªói lo·∫°i
    password += uppercase[Math.floor(Math.random() * uppercase.length)];
    password += lowercase[Math.floor(Math.random() * lowercase.length)];
    password += numbers[Math.floor(Math.random() * numbers.length)];
    password += specialChars[Math.floor(Math.random() * specialChars.length)];
    
    // T·∫°o th√™m 8 k√Ω t·ª± ng·∫´u nhi√™n (t·ªïng c·ªông 12 k√Ω t·ª±)
    for (let i = 4; i < 12; i++) {
      password += allChars[Math.floor(Math.random() * allChars.length)];
    }
    
    // Tr·ªôn l·∫°i th·ª© t·ª± c√°c k√Ω t·ª±
    return password.split('').sort(() => Math.random() - 0.5).join('');
  }

  // G·ª≠i email v·ªõi OTP
  async sendOTPEmail(email, otp) {
    try {
      // Ki·ªÉm tra c·∫•u h√¨nh email
      if (!process.env.EMAIL_HOST || !process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
        console.log(`üìß [NO EMAIL CONFIG] OTP for ${email}: ${otp}`);
        console.log('‚ö†Ô∏è  Please configure EMAIL_HOST, EMAIL_USER, EMAIL_PASS in .env file to send real emails');
        return;
      }

      const transporter = nodemailer.createTransport({
        host: process.env.EMAIL_HOST,
        port: process.env.EMAIL_PORT || 587,
        secure: process.env.EMAIL_PORT == 465, // true for 465, false for other ports
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS
        }
      });

      const mailOptions = {
        from: process.env.EMAIL_FROM || process.env.EMAIL_USER,
        to: email,
        subject: 'Your One-Time Password for Account Creation - EcoSchool',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h1 style="color: #2c3e50;">EcoSchool - Account Creation</h1>
            <p>Hello,</p>
            <p>Your account has been created by an administrator. Please use the following one-time password to set up your account:</p>
            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px; text-align: center; margin: 20px 0;">
              <h2 style="color: #e74c3c; font-size: 24px; letter-spacing: 2px;">${otp}</h2>
            </div>
            <p><strong>Important:</strong></p>
            <ul>
              <li>This password will expire in 24 hours</li>
              <li>Use this password to log in and set your permanent password</li>
              <li>Do not share this password with anyone</li>
            </ul>
            <p>If you did not request this account, please contact your administrator.</p>
            <hr style="margin: 30px 0;">
            <p style="color: #7f8c8d; font-size: 12px;">This is an automated message from EcoSchool system.</p>
          </div>
        `
      };

      await transporter.sendMail(mailOptions);
      console.log(`üìß Email successfully sent to ${email}`);
    } catch (error) {
      console.error('‚ùå Email sending failed:', error.message);
      // V·∫´n log OTP ƒë·ªÉ admin c√≥ th·ªÉ th√¥ng b√°o cho user
      console.log(`üìß [FALLBACK] OTP for ${email}: ${otp}`);
      // Kh√¥ng throw error ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n qu√° tr√¨nh t·∫°o user
    }
  }

  // G·ª≠i email ch√†o m·ª´ng cho teacher m·ªõi import
  async sendTeacherWelcomeEmail(email, name, tempPassword, subjectName) {
    try {
      // Ki·ªÉm tra c·∫•u h√¨nh email
      if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
        console.log(`üìß [NO EMAIL CONFIG] Temp password for ${email}: ${tempPassword}`);
        console.log('‚ö†Ô∏è  Please configure EMAIL_USER, EMAIL_PASS in .env file to send real emails');
        return;
      }

      // C·∫•u h√¨nh transporter (s·ª≠ d·ª•ng Gmail)
      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS
        }
      });

      // N·ªôi dung email
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: 'Ch√†o m·ª´ng gi√°o vi√™n m·ªõi - EcoSchool',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #4CAF50;">Ch√†o m·ª´ng ${name} ƒë·∫øn v·ªõi EcoSchool!</h2>
            <p>B·∫°n ƒë√£ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng v·ªõi vai tr√≤ <strong>Gi√°o vi√™n</strong> m√¥n <strong>${subjectName || 'ch∆∞a x√°c ƒë·ªãnh'}</strong>.</p>
            
            <div style="background-color: #f0f8fe; padding: 20px; border-left: 4px solid #4CAF50; margin: 20px 0;">
              <h3 style="margin-top: 0;">Th√¥ng tin ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu:</h3>
              <p><strong>Email:</strong> ${email}</p>
              <p><strong>M·∫≠t kh·∫©u t·∫°m th·ªùi:</strong> <code style="background: #e8e8e8; padding: 4px 8px; border-radius: 4px; font-size: 16px;">${tempPassword}</code></p>
            </div>

            <div style="background-color: #fff3cd; padding: 15px; border: 1px solid #ffeaa7; border-radius: 5px; margin: 20px 0;">
              <h4 style="margin-top: 0; color: #856404;">üìã H∆∞·ªõng d·∫´n ƒëƒÉng nh·∫≠p:</h4>
              <ol style="margin: 0; color: #856404;">
                <li>Truy c·∫≠p trang ƒëƒÉng nh·∫≠p h·ªá th·ªëng</li>
                <li>S·ª≠ d·ª•ng email v√† m·∫≠t kh·∫©u t·∫°m th·ªùi ·ªü tr√™n</li>
                <li>H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông chuy·ªÉn ƒë·∫øn trang thi·∫øt l·∫≠p m·∫≠t kh·∫©u m·ªõi</li>
                <li>Nh·∫≠p m·∫≠t kh·∫©u m·ªõi theo y√™u c·∫ßu</li>
                <li>Ho√†n t·∫•t v√† b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng h·ªá th·ªëng</li>
              </ol>
            </div>

            <div style="text-align: center; margin: 30px 0;">
              <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/login" 
                 style="background-color: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block; font-weight: bold;">
                üöÄ ƒêƒÉng nh·∫≠p ngay
              </a>
            </div>

            <hr>
            <p style="color: #666; font-size: 12px;">
              Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng EcoSchool. Vui l√≤ng kh√¥ng ph·∫£n h·ªìi email n√†y.<br>
              N·∫øu b·∫°n g·∫∑p v·∫•n ƒë·ªÅ, vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n h·ªá th·ªëng.
            </p>
          </div>
        `
      };

      // G·ª≠i email
      await transporter.sendMail(mailOptions);
      console.log(`üìß Teacher welcome email sent to ${email}`);
      
    } catch (error) {
      console.error('‚ùå Teacher welcome email failed:', error.message);
      // Log m·∫≠t kh·∫©u t·∫°m th·ªùi ƒë·ªÉ admin c√≥ th·ªÉ th√¥ng b√°o cho teacher
      console.log(`üìß [FALLBACK] Temp password for ${email}: ${tempPassword}`);
      // Kh√¥ng throw error ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n qu√° tr√¨nh import
    }
  }

  // T·∫°o user m·ªõi v·ªõi OTP
  async createUserWithOTP(userData, token) {
    try {
      // Verify token v√† ki·ªÉm tra role manager
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const currentUser = await User.findById(decoded.id);
      
      if (!currentUser || !currentUser.role.includes('manager')) {
        throw new Error('Only managers can create users');
      }

      // Validate role
      if (!userData.role || !['student', 'teacher'].includes(userData.role)) {
        throw new Error('Invalid role. Must be student or teacher');
      }

      // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
      const existingUser = await User.findOne({ email: userData.email });
      if (existingUser) {
        throw new Error('Email already exists');
      }

      // N·∫øu l√† teacher, validate subject
      if (userData.role === 'teacher' && userData.subjectId) {
        const Subject = require('../../subjects/models/subject.model');
        const subject = await Subject.findById(userData.subjectId);
        if (!subject) {
          throw new Error('Subject not found');
        }
      }

      // T·∫°o OTP
      const otp = this.generateOTP();
      const otpExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours

      // L∆∞u th√¥ng tin ƒë·∫ßy ƒë·ªß v√†o storage
      global.otpStorage = global.otpStorage || {};
      global.otpStorage[userData.email] = {
        otp,
        otpExpiry,
        userData: userData // L∆∞u to√†n b·ªô th√¥ng tin user
      };

      // G·ª≠i OTP qua email
      await this.sendOTPEmail(userData.email, otp);

      return {
        message: 'OTP sent to email',
        email: userData.email,
        role: userData.role,
        otpExpiry,
        // T·∫°m th·ªùi tr·∫£ v·ªÅ OTP ƒë·ªÉ test (trong production kh√¥ng n√™n tr·∫£ v·ªÅ)
        otp: otp
      };
    } catch (error) {
      throw error;
    }
  }

  // ƒêƒÉng nh·∫≠p v·ªõi email v√† 1password (OTP)
  async loginWithOTP(email, password) {
    try {
      // L·∫•y OTP t·ª´ storage
      const otpData = global.otpStorage?.[email];
      if (!otpData) {
        throw new Error('No OTP found for this email. Please contact admin to create your account.');
      }

      // Ki·ªÉm tra OTP
      if (otpData.otp !== password) {
        throw new Error('Invalid one-time password');
      }

      // Ki·ªÉm tra OTP h·∫øt h·∫°n
      if (new Date() > new Date(otpData.otpExpiry)) {
        throw new Error('One-time password expired');
      }

      // T·∫°o token t·∫°m th·ªùi ƒë·ªÉ set password
      const tempToken = jwt.sign(
        { email, role: otpData.userData.role },
        process.env.JWT_SECRET,
        { expiresIn: '15m' } // Token h·∫øt h·∫°n sau 15 ph√∫t
      );

      return {
        message: 'Login successful. Please set your password.',
        tempToken,
        email,
        role: otpData.userData.role,
        redirectTo: 'set-password' // Frontend c√≥ th·ªÉ d√πng ƒë·ªÉ redirect
      };
    } catch (error) {
      throw error;
    }
  }

  // X√°c th·ª±c OTP
  async verifyOTP(email, otp) {
    try {
      // L·∫•y OTP t·ª´ Redis ho·∫∑c database
      // TODO: Implement OTP retrieval
      // const storedData = await redis.get(`otp:${email}`);
      // const { otp: storedOTP, otpExpiry, role } = JSON.parse(storedData);

      // Ki·ªÉm tra OTP
      // if (!storedOTP || storedOTP !== otp) {
      //   throw new Error('Invalid OTP');
      // }

      // Ki·ªÉm tra OTP h·∫øt h·∫°n
      // if (new Date() > new Date(otpExpiry)) {
      //   throw new Error('OTP expired');
      // }

      // T·∫°o token t·∫°m th·ªùi ƒë·ªÉ set password
      const tempToken = jwt.sign(
        { email, role: 'student' }, // ho·∫∑c role t·ª´ storedData
        process.env.JWT_SECRET,
        { expiresIn: '15m' } // Token h·∫øt h·∫°n sau 15 ph√∫t
      );

      return {
        message: 'OTP verified successfully',
        tempToken
      };
    } catch (error) {
      throw error;
    }
  }

  // Set password m·ªõi - handle c·∫£ OTP flow v√† existing user flow
  async setPassword(tokenOrTempToken, password, confirmPassword) {
    try {
      // Verify token
      const decoded = jwt.verify(tokenOrTempToken, process.env.JWT_SECRET);
      
      // Ki·ªÉm tra password v√† confirm password
      if (password !== confirmPassword) {
        throw new Error('Passwords do not match');
      }

      // Validate password strength
      if (password.length < 8) {
        throw new Error('Password must be at least 8 characters long');
      }

      // Hash password
      const passwordHash = await bcrypt.hash(password, 12);

      // Ki·ªÉm tra xem ƒë√¢y l√† tempToken (c√≥ email + role) hay JWT token (c√≥ id)
      if (decoded.id) {
        // ƒê√¢y l√† JWT token c·ªßa user ƒë√£ t·ªìn t·∫°i (student/teacher ƒë∆∞·ª£c t·∫°o b·ªüi manager ho·∫∑c reset password)
        const userId = decoded.id;
        
        // T√¨m user
        const user = await User.findById(userId);
        if (!user) {
          throw new Error('User not found');
        }

        // Ki·ªÉm tra user c√≥ ph·∫£i l√† new user kh√¥ng ho·∫∑c ƒëang trong qu√° tr√¨nh reset password
        const isResetPassword = user.resetPasswordToken && user.resetPasswordExpires;
        if (!user.isNewUser && !isResetPassword) {
          throw new Error('This user has already set up their password');
        }

        // C·∫≠p nh·∫≠t user
        const updateData = { 
          passwordHash,
          isNewUser: false // ƒê√°nh d·∫•u user ƒë√£ setup password
        };

        // N·∫øu ƒëang reset password, x√≥a reset token
        if (isResetPassword) {
          updateData.resetPasswordToken = undefined;
          updateData.resetPasswordExpires = undefined;
        }

        const updatedUser = await User.findByIdAndUpdate(userId, updateData, { new: true });

        // T·∫°o token m·ªõi cho user
        const newToken = jwt.sign(
          { id: updatedUser._id, email: updatedUser.email, role: updatedUser.role },
          process.env.JWT_SECRET,
          { expiresIn: process.env.JWT_EXPIRES_IN }
        );

        console.log(`‚úÖ Password set successfully for user: ${user.email} ${isResetPassword ? '(via reset)' : '(new user)'}`);

        return {
          message: 'Password set successfully',
          user: {
            id: updatedUser._id,
            email: updatedUser.email,
            name: updatedUser.name,
            role: updatedUser.role,
            class_id: updatedUser.class_id,
            subject: updatedUser.subject,
            isNewUser: updatedUser.isNewUser
          },
          token: newToken,
          redirectTo: 'home'
        };

      } else if (decoded.email && decoded.role) {
        // ƒê√¢y l√† tempToken t·ª´ OTP flow (t·∫°o user m·ªõi)
        const { email, role } = decoded;

        // L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß t·ª´ OTP storage
        const otpData = global.otpStorage?.[email];
        if (!otpData || !otpData.userData) {
          throw new Error('User data not found. Please restart the registration process.');
        }

        const userData = otpData.userData;
        const Subject = require('../../subjects/models/subject.model');

        // T·∫°o user v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
        const newUserData = {
          email: userData.email,
          passwordHash,
          name: userData.name,
          role: [userData.role],
          dateOfBirth: userData.dateOfBirth ? new Date(userData.dateOfBirth) : null,
          gender: userData.gender || 'other',
          isNewUser: false, // User ƒë√£ ho√†n th√†nh setup
          active: true
        };

        // N·∫øu l√† teacher, th√™m subject
        if (userData.role === 'teacher' && userData.subjectId) {
          newUserData.subject = userData.subjectId;
        }

        const user = await User.create(newUserData);

        // Populate subject cho response n·∫øu l√† teacher
        if (userData.role === 'teacher' && user.subject) {
          await user.populate('subject', 'subjectName subjectCode');
        }

        // X√≥a OTP ƒë√£ s·ª≠ d·ª•ng
        if (global.otpStorage && global.otpStorage[email]) {
          delete global.otpStorage[email];
        }

        // V√¥ hi·ªáu h√≥a tempToken
        global.invalidTokens = global.invalidTokens || new Set();
        global.invalidTokens.add(tokenOrTempToken);

        // T·∫°o response theo format mong mu·ªën
        const response = {
          message: 'Teacher created successfully',
          data: {
            id: user._id,
            name: user.name,
            email: user.email,
            dateOfBirth: user.dateOfBirth,
            gender: user.gender,
            role: user.role,
            isNewUser: user.isNewUser,
            active: user.active,
            status: 'active',
            createdAt: user.createdAt,
            updatedAt: user.updatedAt
          }
        };

        // Th√™m subject info n·∫øu l√† teacher
        if (userData.role === 'teacher' && user.subject) {
          response.data.subject = {
            id: user.subject._id,
            subjectName: user.subject.subjectName,
            subjectCode: user.subject.subjectCode
          };
        }

        return response;

      } else {
        throw new Error('Invalid token format');
      }

    } catch (error) {
      throw error;
    }
  }

  // L·∫•y danh s√°ch users
  async getUsers({ page = 1, limit = 10, role, search }) {
    try {
      const query = {};
      
      if (role) {
        query.role = role;
      }

      if (search) {
        query.$or = [
          { name: { $regex: search, $options: 'i' } },
          { email: { $regex: search, $options: 'i' } }
        ];
      }

      const users = await User.find(query)
        .skip((page - 1) * limit)
        .limit(limit)
        .sort({ createdAt: -1 });

      const total = await User.countDocuments(query);

      return {
        users: users.map(user => ({
          id: user._id,
          email: user.email,
          name: user.name,
          role: user.role,
          subject: user.subject,
          isNewUser: user.isNewUser,
          active: user.active,
          createdAt: user.createdAt,
          updatedAt: user.updatedAt
        })),
        pagination: {
          total,
          page: Number(page),
          limit: Number(limit),
          pages: Math.ceil(total / limit)
        }
      };
    } catch (error) {
      throw error;
    }
  }

  // L·∫•y danh s√°ch t√†i kho·∫£n cho trang qu·∫£n l√Ω
  async getAccountsForManagement({ role, search, gradeLevel, className, page = 1, limit = 20 }) {
    try {
      const query = { active: true };
      
      // Filter theo role (student ho·∫∑c teacher/homeroom_teacher)
      if (role === 'student') {
        query.role = 'student';
      } else if (role === 'teacher') {
        query.role = { $in: ['teacher', 'homeroom_teacher'] };
      }

      // T√¨m ki·∫øm - s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong aggregation pipeline
      let searchQuery = null;
      if (search) {
        searchQuery = [
          { name: { $regex: search, $options: 'i' } },
          { email: { $regex: search, $options: 'i' } },
          { studentId: { $regex: search, $options: 'i' } },
          { teacherId: { $regex: search, $options: 'i' } }
        ];
      }

      // S·ª≠ d·ª•ng aggregation ƒë·ªÉ filter theo kh·ªëi v√† l·ªõp
      let pipeline = [
        { $match: query },
        {
          $lookup: {
            from: 'classes',
            localField: 'class_id',
            foreignField: '_id',
            as: 'classInfo'
          }
        },
        { $unwind: { path: '$classInfo', preserveNullAndEmptyArrays: true } }
      ];



      // Filter theo kh·ªëi (c√≥ th·ªÉ t·ª´ class_id ho·∫∑c gradeLevel tr·ª±c ti·∫øp)
      if (gradeLevel) {
        const gradeLevelInt = parseInt(gradeLevel);
        pipeline.push({
          $match: {
            $or: [
              { gradeLevel: gradeLevelInt },
              { 'classInfo.gradeLevel': gradeLevelInt }
            ]
          }
        });
      }

      // Filter theo l·ªõp (c√≥ th·ªÉ t·ª´ class_id ho·∫∑c className tr·ª±c ti·∫øp)
      if (className) {
        pipeline.push({
          $match: {
            $or: [
              { className: className },
              { 'classInfo.className': className }
            ]
          }
        });
      }

      // Th√™m populate cho subject
      pipeline.push({
        $lookup: {
          from: 'subjects',
          localField: 'subject',
          foreignField: '_id',
          as: 'subjectInfo'
        }
      });
      pipeline.push({ $unwind: { path: '$subjectInfo', preserveNullAndEmptyArrays: true } });

      // Th√™m t√¨m ki·∫øm theo t√™n m√¥n h·ªçc sau khi ƒë√£ lookup subject
      if (search) {
        pipeline.push({
          $match: {
            $or: [
              { name: { $regex: search, $options: 'i' } },
              { email: { $regex: search, $options: 'i' } },
              { studentId: { $regex: search, $options: 'i' } },
              { teacherId: { $regex: search, $options: 'i' } },
              { 'subjectInfo.subjectName': { $regex: search, $options: 'i' } }
            ]
          }
        });
      }

      // Th√™m pagination v√† sorting
      pipeline.push(
        { $sort: { name: 1 } },
        { $skip: (page - 1) * limit },
        { $limit: limit }
      );

      const users = await User.aggregate(pipeline);

      // ƒê·∫øm t·ªïng s·ªë k·∫øt qu·∫£ (kh√¥ng c√≥ pagination)
      const countPipeline = [
        { $match: query },
        {
          $lookup: {
            from: 'classes',
            localField: 'class_id',
            foreignField: '_id',
            as: 'classInfo'
          }
        },
        { $unwind: { path: '$classInfo', preserveNullAndEmptyArrays: true } },
        {
          $lookup: {
            from: 'subjects',
            localField: 'subject',
            foreignField: '_id',
            as: 'subjectInfo'
          }
        },
        { $unwind: { path: '$subjectInfo', preserveNullAndEmptyArrays: true } }
      ];

      if (gradeLevel) {
        const gradeLevelInt = parseInt(gradeLevel);
        countPipeline.push({
          $match: {
            $or: [
              { gradeLevel: gradeLevelInt },
              { 'classInfo.gradeLevel': gradeLevelInt }
            ]
          }
        });
      }

      if (className) {
        countPipeline.push({
          $match: {
            $or: [
              { className: className },
              { 'classInfo.className': className }
            ]
          }
        });
      }

      // Th√™m t√¨m ki·∫øm theo m√¥n h·ªçc cho count pipeline
      if (search) {
        countPipeline.push({
          $match: {
            $or: [
              { name: { $regex: search, $options: 'i' } },
              { email: { $regex: search, $options: 'i' } },
              { studentId: { $regex: search, $options: 'i' } },
              { teacherId: { $regex: search, $options: 'i' } },
              { 'subjectInfo.subjectName': { $regex: search, $options: 'i' } }
            ]
          }
        });
      }

      countPipeline.push({ $count: 'total' });
      const countResult = await User.aggregate(countPipeline);
      const total = countResult.length > 0 ? countResult[0].total : 0;

      // Format d·ªØ li·ªáu theo y√™u c·∫ßu UI
      const formattedUsers = users.map(user => {
        const baseData = {
          id: user._id,
          name: user.name,
          email: user.email,
          avatar: user.avatar || null,
          active: user.active,
          createdAt: user.createdAt
        };

        if (user.role == 'student') {
          return {
            ...baseData,
            type: 'student',
            code: user.studentId || `HS-${user._id.toString().slice(-6)}`,
            class: user.classInfo?.className || user.className || 'Ch∆∞a ph√¢n l·ªõp',
            gradeLevel: user.classInfo?.gradeLevel || user.gradeLevel
          };
        } else {
          return {
            ...baseData,
            type: 'teacher',
            code: user.teacherId || `GV-${user._id.toString().slice(-6)}`,
            subject: user.subjectInfo?.subjectName || 'Ch∆∞a ph√¢n m√¥n',
            subjectCode: user.subjectInfo?.subjectCode
          };
        }
      });

      return {
        accounts: formattedUsers,
        pagination: {
          total,
          page: Number(page),
          limit: Number(limit),
          pages: Math.ceil(total / limit)
        }
      };
    } catch (error) {
      throw error;
    }
  }



  // L·∫•y danh s√°ch l·ªõp theo kh·ªëi
  async getClassesByGrade(gradeLevel) {
    try {
      const gradeLevelInt = parseInt(gradeLevel);
      
      const classes = await User.aggregate([
        {
          $match: {
            role: 'student',
            active: true
          }
        },
        {
          $lookup: {
            from: 'classes',
            localField: 'class_id',
            foreignField: '_id',
            as: 'classInfo'
          }
        },
        { $unwind: { path: '$classInfo', preserveNullAndEmptyArrays: true } },
        {
          $match: {
            $or: [
              { gradeLevel: gradeLevelInt },
              { 'classInfo.gradeLevel': gradeLevelInt }
            ]
          }
        },
        {
          $group: {
            _id: {
              $ifNull: ['$classInfo.className', '$className']
            },
            count: { $sum: 1 }
          }
        },
        {
          $sort: { _id: 1 }
        }
      ]);

      return classes.map(cls => ({
        className: cls._id,
        studentCount: cls.count
      }));
    } catch (error) {
      throw error;
    }
  }

  // L·∫•y th√¥ng tin chi ti·∫øt t√†i kho·∫£n
  async getAccountDetail(id) {
    try {
      const user = await User.findById(id)
        .populate([
          { path: 'class_id', select: 'className gradeLevel academicYear' },
          { path: 'subject', select: 'subjectName subjectCode' }
        ]);

      if (!user) {
        throw new Error('T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i');
      }

      // Format d·ªØ li·ªáu chi ti·∫øt
      const accountDetail = {
        id: user._id,
        name: user.name,
        email: user.email,
        phone: user.phone || '',
        address: user.address || '',
        dateOfBirth: user.dateOfBirth || null,
        gender: user.gender || '',
        avatar: user.avatar || null,
        active: user.active,
        role: user.role,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt
      };

      if (user.role == 'student') {
        return {
          ...accountDetail,
          studentId: user.studentId || `HS-${user._id.toString().slice(-6)}`,
          class: {
            name: user.class_id?.className || user.className || 'Ch∆∞a ph√¢n l·ªõp',
            gradeLevel: user.class_id?.gradeLevel || user.gradeLevel,
            academicYear: user.class_id?.academicYear || user.academicYear
          },
          subjects: [],
          roleInfo: { type: 'student' }
        };
      } else {
        // Ki·ªÉm tra xem teacher c√≥ l√† gi√°o vi√™n ch·ªß nhi·ªám l·ªõp n√†o kh√¥ng
        let homeroomClass = null;
        if (user.role.includes('homeroom_teacher') || user.role.includes('teacher')) {
          const Class = require('../../classes/models/class.model');
          homeroomClass = await Class.findOne({ 
            homeroomTeacher: user._id,
            active: true 
          }).select('className gradeLevel academicYear');
        }

        return {
          ...accountDetail,
          teacherId: user.teacherId || `GV-${user._id.toString().slice(-6)}`,
          subject: user.subject?.subjectName || 'Ch∆∞a ph√¢n m√¥n',
          subjectCode: user.subject?.subjectCode,
          subject: user.subject?.subjectName || 'Ch∆∞a ph√¢n m√¥n',
          homeroomClass: homeroomClass ? {
            id: homeroomClass._id,
            name: homeroomClass.className,
            gradeLevel: homeroomClass.gradeLevel,
            academicYear: homeroomClass.academicYear
          } : null,
          roleInfo: { 
            type: 'teacher',
            isHomeroom: user.role.includes('homeroom_teacher'),
            isHomeroomTeacher: homeroomClass !== null
          }
        };
      }
    } catch (error) {
      throw error;
    }
  }

  // L·∫•y th√¥ng tin user theo ID
  async getUserById(id) {
    try {
      const user = await User.findById(id);
      if (!user) {
        throw new Error('User not found');
      }

      return {
        id: user._id,
        email: user.email,
        name: user.name,
        role: user.role,
        class_id: user.class_id,
        subject: user.subject,
        isNewUser: user.isNewUser,
        active: user.active,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt
      };
    } catch (error) {
      throw error;
    }
  }

  // C·∫≠p nh·∫≠t th√¥ng tin user
  async updateUser(id, updateData) {
    try {
      const user = await User.findById(id);
      if (!user) {
        throw new Error('User not found');
      }

      if (updateData.password) {
        const salt = await bcrypt.genSalt(10);
        updateData.passwordHash = await bcrypt.hash(updateData.password, salt);
        delete updateData.password;
      }

      const updatedUser = await User.findByIdAndUpdate(
        id,
        { $set: updateData },
        { new: true }
      );

      return {
        id: updatedUser._id,
        email: updatedUser.email,
        name: updatedUser.name,
        role: updatedUser.role,
        subject: updatedUser.subject,
        isNewUser: updatedUser.isNewUser,
        active: updatedUser.active,
        createdAt: updatedUser.createdAt,
        updatedAt: updatedUser.updatedAt
      };
    } catch (error) {
      throw error;
    }
  }

  // X√≥a user
  async deleteUser(id) {
    try {
      const user = await User.findById(id);
      if (!user) {
        throw new Error('User not found');
      }

      await User.findByIdAndDelete(id);
    } catch (error) {
      throw error;
    }
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i active c·ªßa user
  async updateUserStatus(id, active) {
    try {
      const user = await User.findById(id);
      if (!user) {
        throw new Error('User not found');
      }

      const updatedUser = await User.findByIdAndUpdate(
        id,
        { $set: { active } },
        { new: true }
      );

      return {
        id: updatedUser._id,
        email: updatedUser.email,
        name: updatedUser.name,
        role: updatedUser.role,
        isNewUser: updatedUser.isNewUser,
        active: updatedUser.active,
        createdAt: updatedUser.createdAt,
        updatedAt: updatedUser.updatedAt
      };
    } catch (error) {
      throw error;
    }
  }

  // Import teachers t·ª´ file Excel
  async importTeachers(filePath, token) {
    const XLSX = require('xlsx');
    const fs = require('fs');
    
    try {
      // Verify token v√† ki·ªÉm tra role manager
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const currentUser = await User.findById(decoded.id);
      
      if (!currentUser || !currentUser.role.includes('manager')) {
        throw new Error('Only managers can import teachers');
      }

      // ƒê·ªçc file Excel
      const workbook = XLSX.readFile(filePath);
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const teachers = XLSX.utils.sheet_to_json(worksheet);

      if (!teachers || teachers.length === 0) {
        throw new Error('No data found in Excel file');
      }

      const results = {
        success: [],
        failed: [],
        total: teachers.length
      };

      // X·ª≠ l√Ω t·ª´ng teacher
      for (let i = 0; i < teachers.length; i++) {
        const teacher = teachers[i];
        
        try {
          // Validate d·ªØ li·ªáu
          if (!teacher.name || !teacher.email || !teacher.subjectId) {
            results.failed.push({
              row: i + 2, // +2 v√¨ h√†ng 1 l√† header, index b·∫Øt ƒë·∫ßu t·ª´ 0
              data: teacher,
              error: 'Missing required fields: name, email, or subjectId'
            });
            continue;
          }

          // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
          const existingUser = await User.findOne({ email: teacher.email });
          if (existingUser) {
            results.failed.push({
              row: i + 2,
              data: teacher,
              error: 'Email already exists'
            });
            continue;
          }

          // T·∫°o m·∫≠t kh·∫©u t·∫°m th·ªùi v√† hash
          const tempPassword = this.generateOTP();
          const passwordHash = await bcrypt.hash(tempPassword, 12);

          // T·∫°o user m·ªõi v·ªõi isNewUser = true (s·∫Ω redirect t·ªõi set-password)
          const newUser = new User({
            name: teacher.name,
            email: teacher.email,
            passwordHash,
            dateOfBirth: teacher.dateOfBirth ? new Date(teacher.dateOfBirth) : null,
            gender: teacher.gender || 'other',
            role: ['teacher'],
            subject: teacher.subjectId,
            isNewUser: true, // S·∫Ω redirect t·ªõi set-password khi login
            active: teacher.active !== false
          });

          await newUser.save();

          // G·ª≠i email v·ªõi m·∫≠t kh·∫©u t·∫°m th·ªùi
          await this.sendTeacherWelcomeEmail(teacher.email, teacher.name, tempPassword, teacher.subjectName);

          results.success.push({
            row: i + 2,
            email: teacher.email,
            name: teacher.name,
            status: 'awaiting_first_login',
            tempPassword: tempPassword // T·∫°m th·ªùi ƒë·ªÉ test, production n√™n b·ªè
          });

        } catch (error) {
          results.failed.push({
            row: i + 2,
            data: teacher,
            error: error.message
          });
        }
      }

      // X√≥a file t·∫°m sau khi x·ª≠ l√Ω
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
      }

      return results;

    } catch (error) {
      // X√≥a file t·∫°m n·∫øu c√≥ l·ªói
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
      }
      throw error;
    }
  }

  // Import teachers t·ª´ base64 string
  async importTeachersBase64(fileData, token) {
    const XLSX = require('xlsx');
    const fs = require('fs');
    
    try {
      // Verify token v√† ki·ªÉm tra role manager
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const currentUser = await User.findById(decoded.id);
      
      if (!currentUser || !currentUser.role.includes('manager')) {
        throw new Error('Only managers can import teachers');
      }

      // Decode base64 v√† t·∫°o buffer
      const buffer = Buffer.from(fileData, 'base64');
      
      // ƒê·ªçc Excel t·ª´ buffer
      const workbook = XLSX.read(buffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const teachers = XLSX.utils.sheet_to_json(worksheet);

      if (!teachers || teachers.length === 0) {
        throw new Error('No data found in Excel file');
      }

      const results = {
        success: [],
        failed: [],
        total: teachers.length
      };

      // X·ª≠ l√Ω t·ª´ng teacher
      for (let i = 0; i < teachers.length; i++) {
        const teacher = teachers[i];
        
        try {
          // Validate d·ªØ li·ªáu
          if (!teacher.name || !teacher.email || !teacher.subjectId) {
            results.failed.push({
              row: i + 2, // +2 v√¨ h√†ng 1 l√† header, index b·∫Øt ƒë·∫ßu t·ª´ 0
              data: teacher,
              error: 'Missing required fields: name, email, or subjectId'
            });
            continue;
          }

          // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
          const existingUser = await User.findOne({ email: teacher.email });
          if (existingUser) {
            results.failed.push({
              row: i + 2,
              data: teacher,
              error: 'Email already exists'
            });
            continue;
          }

          // T·∫°o m·∫≠t kh·∫©u t·∫°m th·ªùi v√† hash
          const tempPassword = this.generateOTP();
          const passwordHash = await bcrypt.hash(tempPassword, 12);

          // T·∫°o user m·ªõi v·ªõi isNewUser = true (s·∫Ω redirect t·ªõi set-password)
          const newUser = new User({
            name: teacher.name,
            email: teacher.email,
            passwordHash,
            dateOfBirth: teacher.dateOfBirth ? new Date(teacher.dateOfBirth) : null,
            gender: teacher.gender || 'other',
            role: ['teacher'],
            subject: teacher.subjectId,
            isNewUser: true, // S·∫Ω redirect t·ªõi set-password khi login
            active: teacher.active !== false
          });

          await newUser.save();

          // G·ª≠i email v·ªõi m·∫≠t kh·∫©u t·∫°m th·ªùi
          await this.sendTeacherWelcomeEmail(teacher.email, teacher.name, tempPassword, teacher.subjectName);

          results.success.push({
            row: i + 2,
            email: teacher.email,
            name: teacher.name,
            status: 'awaiting_first_login',
            tempPassword: tempPassword // T·∫°m th·ªùi ƒë·ªÉ test, production n√™n b·ªè
          });

        } catch (error) {
          results.failed.push({
            row: i + 2,
            data: teacher,
            error: error.message
          });
        }
      }

      return results;

    } catch (error) {
      throw error;
    }
  }

  // G·ª≠i email ch√†o m·ª´ng cho student m·ªõi import
  async sendStudentWelcomeEmail(email, name, tempPassword, className) {
    try {
      // Ki·ªÉm tra c·∫•u h√¨nh email
      if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
        console.log(`üìß [NO EMAIL CONFIG] Temp password for ${email}: ${tempPassword}`);
        console.log('‚ö†Ô∏è  Please configure EMAIL_USER, EMAIL_PASS in .env file to send real emails');
        return;
      }

      // C·∫•u h√¨nh transporter (s·ª≠ d·ª•ng Gmail)
      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS
        }
      });

      // N·ªôi dung email
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: 'Ch√†o m·ª´ng h·ªçc sinh m·ªõi - EcoSchool',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #4CAF50;">Ch√†o m·ª´ng ${name} ƒë·∫øn v·ªõi EcoSchool! üéì</h2>
            <p>B·∫°n ƒë√£ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng v·ªõi vai tr√≤ <strong>H·ªçc sinh</strong> l·ªõp <strong>${className || 'ch∆∞a x√°c ƒë·ªãnh'}</strong>.</p>
            
            <div style="background-color: #f0f8fe; padding: 20px; border-left: 4px solid #4CAF50; margin: 20px 0;">
              <h3 style="margin-top: 0;">Th√¥ng tin ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu:</h3>
              <p><strong>Email:</strong> ${email}</p>
              <p><strong>M·∫≠t kh·∫©u t·∫°m th·ªùi:</strong> <code style="background: #e8e8e8; padding: 4px 8px; border-radius: 4px; font-size: 16px;">${tempPassword}</code></p>
            </div>

            <div style="background-color: #fff3cd; padding: 15px; border: 1px solid #ffeaa7; border-radius: 5px; margin: 20px 0;">
              <h4 style="margin-top: 0; color: #856404;">üìã H∆∞·ªõng d·∫´n ƒëƒÉng nh·∫≠p:</h4>
              <ol style="margin: 0; color: #856404;">
                <li>Truy c·∫≠p trang ƒëƒÉng nh·∫≠p h·ªá th·ªëng</li>
                <li>S·ª≠ d·ª•ng email v√† m·∫≠t kh·∫©u t·∫°m th·ªùi ·ªü tr√™n</li>
                <li>H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông chuy·ªÉn ƒë·∫øn trang thi·∫øt l·∫≠p m·∫≠t kh·∫©u m·ªõi</li>
                <li>Nh·∫≠p m·∫≠t kh·∫©u m·ªõi theo y√™u c·∫ßu</li>
                <li>Ho√†n t·∫•t v√† b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng h·ªá th·ªëng</li>
              </ol>
            </div>

            <div style="text-align: center; margin: 30px 0;">
              <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/login" 
                 style="background-color: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block; font-weight: bold;">
                üöÄ ƒêƒÉng nh·∫≠p ngay
              </a>
            </div>

            <div style="background-color: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0;">
              <h4 style="margin-top: 0; color: #2e7d32;">üìö Th√¥ng tin l·ªõp h·ªçc:</h4>
              <p style="margin: 0; color: #2e7d32;">L·ªõp: <strong>${className}</strong></p>
              <p style="margin: 0; color: #2e7d32;">NƒÉm h·ªçc: <strong>2024-2025</strong></p>
            </div>

            <hr>
            <p style="color: #666; font-size: 12px;">
              Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng EcoSchool. Vui l√≤ng kh√¥ng ph·∫£n h·ªìi email n√†y.<br>
              N·∫øu b·∫°n g·∫∑p v·∫•n ƒë·ªÅ, vui l√≤ng li√™n h·ªá gi√°o vi√™n ch·ªß nhi·ªám ho·∫∑c qu·∫£n tr·ªã vi√™n h·ªá th·ªëng.
            </p>
          </div>
        `
      };

      // G·ª≠i email
      await transporter.sendMail(mailOptions);
      console.log(`üìß Student welcome email sent to ${email}`);
      
    } catch (error) {
      console.error('‚ùå Student welcome email failed:', error.message);
      // Log m·∫≠t kh·∫©u t·∫°m th·ªùi ƒë·ªÉ admin c√≥ th·ªÉ th√¥ng b√°o cho student
      console.log(`üìß [FALLBACK] Temp password for ${email}: ${tempPassword}`);
      // Kh√¥ng throw error ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n qu√° tr√¨nh import
    }
  }

  // Import students t·ª´ file xlsx
  async importStudents(filePath, token) {
    const XLSX = require('xlsx');
    const fs = require('fs');
    const Class = require('../../classes/models/class.model');
    
    try {
      // Verify token v√† ki·ªÉm tra role manager
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const currentUser = await User.findById(decoded.id);
      
      if (!currentUser || !currentUser.role.includes('manager')) {
        throw new Error('Only managers can import students');
      }

      // ƒê·ªçc file Excel
      const workbook = XLSX.readFile(filePath);
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const students = XLSX.utils.sheet_to_json(worksheet);

      if (!students || students.length === 0) {
        throw new Error('No data found in Excel file');
      }

      const results = {
        success: [],
        failed: [],
        total: students.length
      };

      // X·ª≠ l√Ω t·ª´ng student
      for (let i = 0; i < students.length; i++) {
        const student = students[i];
        
        try {
          // Validate d·ªØ li·ªáu
          if (!student.name || !student.email || !student.studentId || !student.className) {
            results.failed.push({
              row: i + 2, // +2 v√¨ h√†ng 1 l√† header, index b·∫Øt ƒë·∫ßu t·ª´ 0
              data: student,
              error: 'Missing required fields: name, email, studentId, or className'
            });
            continue;
          }

          // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
          const existingUser = await User.findOne({ email: student.email });
          if (existingUser) {
            results.failed.push({
              row: i + 2,
              data: student,
              error: 'Email already exists'
            });
            continue;
          }

          // Ki·ªÉm tra studentId ƒë√£ t·ªìn t·∫°i
          const existingStudentId = await User.findOne({ studentId: student.studentId });
          if (existingStudentId) {
            results.failed.push({
              row: i + 2,
              data: student,
              error: 'Student ID already exists'
            });
            continue;
          }

          // T√¨m l·ªõp h·ªçc theo t√™n
          const classInfo = await Class.findOne({ 
            className: student.className,
            academicYear: student.schoolYear || '2024-2025',
            active: true
          });

          if (!classInfo) {
            results.failed.push({
              row: i + 2,
              data: student,
              error: `Class ${student.className} not found for academic year ${student.schoolYear || '2024-2025'}`
            });
            continue;
          }

          // T·∫°o m·∫≠t kh·∫©u t·∫°m th·ªùi v√† hash
          const tempPassword = this.generateOTP();
          const passwordHash = await bcrypt.hash(tempPassword, 12);

          // T·∫°o user m·ªõi v·ªõi isNewUser = true (s·∫Ω redirect t·ªõi set-password)
          const newUser = new User({
            name: student.name,
            email: student.email,
            passwordHash,
            dateOfBirth: student.dateOfBirth ? new Date(student.dateOfBirth) : null,
            gender: student.gender || 'other',
            studentId: student.studentId,
            class_id: classInfo._id,
            role: ['student'],
            isNewUser: true, // S·∫Ω redirect t·ªõi set-password khi login
            active: student.active !== false
          });

          await newUser.save();

          // G·ª≠i email v·ªõi m·∫≠t kh·∫©u t·∫°m th·ªùi
          await this.sendStudentWelcomeEmail(student.email, student.name, tempPassword, student.className);

          results.success.push({
            row: i + 2,
            email: student.email,
            name: student.name,
            studentId: student.studentId,
            className: student.className,
            status: 'awaiting_first_login',
            tempPassword: tempPassword // T·∫°m th·ªùi ƒë·ªÉ test, production n√™n b·ªè
          });

        } catch (error) {
          results.failed.push({
            row: i + 2,
            data: student,
            error: error.message
          });
        }
      }

      // X√≥a file t·∫°m sau khi x·ª≠ l√Ω
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
      }

      return results;

    } catch (error) {
      // X√≥a file t·∫°m n·∫øu c√≥ l·ªói
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
      }
      throw error;
    }
  }

  // Import students t·ª´ base64 string
  async importStudentsBase64(fileData, token) {
    const XLSX = require('xlsx');
    const Class = require('../../classes/models/class.model');
    
    try {
      // Verify token v√† ki·ªÉm tra role manager
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const currentUser = await User.findById(decoded.id);
      
      if (!currentUser || !currentUser.role.includes('manager')) {
        throw new Error('Only managers can import students');
      }

      // Decode base64 v√† t·∫°o buffer
      const buffer = Buffer.from(fileData, 'base64');
      
      // ƒê·ªçc Excel t·ª´ buffer
      const workbook = XLSX.read(buffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const students = XLSX.utils.sheet_to_json(worksheet);

      if (!students || students.length === 0) {
        throw new Error('No data found in Excel file');
      }

      const results = {
        success: [],
        failed: [],
        total: students.length
      };

      // X·ª≠ l√Ω t·ª´ng student
      for (let i = 0; i < students.length; i++) {
        const student = students[i];
        
        try {
          // Validate d·ªØ li·ªáu
          if (!student.name || !student.email || !student.studentId || !student.className) {
            results.failed.push({
              row: i + 2, // +2 v√¨ h√†ng 1 l√† header, index b·∫Øt ƒë·∫ßu t·ª´ 0
              data: student,
              error: 'Missing required fields: name, email, studentId, or className'
            });
            continue;
          }

          // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
          const existingUser = await User.findOne({ email: student.email });
          if (existingUser) {
            results.failed.push({
              row: i + 2,
              data: student,
              error: 'Email already exists'
            });
            continue;
          }

          // Ki·ªÉm tra studentId ƒë√£ t·ªìn t·∫°i
          const existingStudentId = await User.findOne({ studentId: student.studentId });
          if (existingStudentId) {
            results.failed.push({
              row: i + 2,
              data: student,
              error: 'Student ID already exists'
            });
            continue;
          }

          // T√¨m l·ªõp h·ªçc theo t√™n
          const classInfo = await Class.findOne({ 
            className: student.className,
            academicYear: student.schoolYear || '2024-2025',
            active: true
          });

          if (!classInfo) {
            results.failed.push({
              row: i + 2,
              data: student,
              error: `Class ${student.className} not found for academic year ${student.schoolYear || '2024-2025'}`
            });
            continue;
          }

          // T·∫°o m·∫≠t kh·∫©u t·∫°m th·ªùi v√† hash
          const tempPassword = this.generateOTP();
          const passwordHash = await bcrypt.hash(tempPassword, 12);

          // T·∫°o user m·ªõi v·ªõi isNewUser = true (s·∫Ω redirect t·ªõi set-password)
          const newUser = new User({
            name: student.name,
            email: student.email,
            passwordHash,
            dateOfBirth: student.dateOfBirth ? new Date(student.dateOfBirth) : null,
            gender: student.gender || 'other',
            studentId: student.studentId,
            class_id: classInfo._id,
            role: ['student'],
            isNewUser: true, // S·∫Ω redirect t·ªõi set-password khi login
            active: student.active !== false
          });

          await newUser.save();

          // G·ª≠i email v·ªõi m·∫≠t kh·∫©u t·∫°m th·ªùi
          await this.sendStudentWelcomeEmail(student.email, student.name, tempPassword, student.className);

          results.success.push({
            row: i + 2,
            email: student.email,
            name: student.name,
            studentId: student.studentId,
            className: student.className,
            status: 'awaiting_first_login',
            tempPassword: tempPassword // T·∫°m th·ªùi ƒë·ªÉ test, production n√™n b·ªè
          });

        } catch (error) {
          results.failed.push({
            row: i + 2,
            data: student,
            error: error.message
          });
        }
      }

      return results;

    } catch (error) {
      throw error;
    }
  }

  // T·∫°o student m·ªõi v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß (ch·ªâ manager)
  async createStudent(studentData, token) {
    const Class = require('../../classes/models/class.model');

    try {
      // Verify token v√† ki·ªÉm tra role manager
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const currentUser = await User.findById(decoded.id);
      
      if (!currentUser || !currentUser.role.includes('manager')) {
        throw new Error('Only managers can create students');
      }

      // Validate d·ªØ li·ªáu b·∫Øt bu·ªôc
      const { name, email, studentId, className, academicYear, dateOfBirth, gender } = studentData;
      
      if (!name || !email || !studentId || !className) {
        throw new Error('Missing required fields: name, email, studentId, or className');
      }

      // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        throw new Error('Email already exists');
      }

      // Ki·ªÉm tra studentId ƒë√£ t·ªìn t·∫°i
      const existingStudentId = await User.findOne({ studentId });
      if (existingStudentId) {
        throw new Error('Student ID already exists');
      }

      // T√¨m l·ªõp h·ªçc theo t√™n v√† nƒÉm h·ªçc
      const classInfo = await Class.findOne({ 
        className,
        academicYear: academicYear || '2024-2025',
        active: true
      });

      if (!classInfo) {
        throw new Error(`Class ${className} not found for academic year ${academicYear || '2024-2025'}`);
      }

      // T·∫°o m·∫≠t kh·∫©u t·∫°m th·ªùi v√† hash
      const tempPassword = this.generateOTP();
      const passwordHash = await bcrypt.hash(tempPassword, 12);

      // T·∫°o student m·ªõi
      const newStudent = new User({
        name,
        email,
        passwordHash,
        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,
        gender: gender || 'other',
        studentId,
        class_id: classInfo._id,
        role: ['student'],
        isNewUser: true, // S·∫Ω redirect t·ªõi set-password khi login
        active: true
      });

      await newStudent.save();

      // G·ª≠i email v·ªõi m·∫≠t kh·∫©u t·∫°m th·ªùi
      await this.sendStudentWelcomeEmail(email, name, tempPassword, className);

      // Populate class info cho response
      await newStudent.populate('class_id', 'className academicYear');

      return {
        id: newStudent._id,
        name: newStudent.name,
        email: newStudent.email,
        studentId: newStudent.studentId,
        class: {
          id: newStudent.class_id._id,
          className: newStudent.class_id.className,
          academicYear: newStudent.class_id.academicYear
        },
        dateOfBirth: newStudent.dateOfBirth,
        gender: newStudent.gender,
        role: newStudent.role,
        isNewUser: newStudent.isNewUser,
        active: newStudent.active,
        tempPassword: tempPassword, // T·∫°m th·ªùi ƒë·ªÉ test, production n√™n b·ªè
        status: 'awaiting_first_login',
        createdAt: newStudent.createdAt,
        updatedAt: newStudent.updatedAt
      };

    } catch (error) {
      throw error;
    }
  }

  // T·∫°o teacher m·ªõi v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß (ch·ªâ manager)
  async createTeacher(teacherData, token) {
    const Subject = require('../../subjects/models/subject.model');

    try {
      // Verify token v√† ki·ªÉm tra role manager
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const currentUser = await User.findById(decoded.id);
      
      if (!currentUser || !currentUser.role.includes('manager')) {
        throw new Error('Only managers can create teachers');
      }

      // Validate d·ªØ li·ªáu b·∫Øt bu·ªôc
      const { name, email, subjectId, role, dateOfBirth, gender } = teacherData;
      
      if (!name || !email || !subjectId) {
        throw new Error('Missing required fields: name, email, or subjectId');
      }

      // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        throw new Error('Email already exists');
      }

      // Ki·ªÉm tra subject c√≥ t·ªìn t·∫°i kh√¥ng
      const subject = await Subject.findById(subjectId);
      if (!subject) {
        throw new Error('Subject not found');
      }

      // X√°c ƒë·ªãnh role - m·∫∑c ƒë·ªãnh l√† 'teacher' n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
      const teacherRole = role && ['teacher', 'homeroom_teacher'].includes(role) ? role : 'teacher';

      // T·∫°o m·∫≠t kh·∫©u t·∫°m th·ªùi v√† hash
      const tempPassword = this.generateOTP();
      const passwordHash = await bcrypt.hash(tempPassword, 12);

      // T·∫°o teacher m·ªõi
      const newTeacher = new User({
        name,
        email,
        passwordHash,
        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,
        gender: gender || 'other',
        role: [teacherRole],
        subject: subjectId,
        isNewUser: true, // S·∫Ω redirect t·ªõi set-password khi login
        active: true
      });

      await newTeacher.save();

      // Populate subject cho response
      await newTeacher.populate('subject', 'subjectName subjectCode');

      // G·ª≠i email v·ªõi m·∫≠t kh·∫©u t·∫°m th·ªùi
      await this.sendTeacherWelcomeEmail(email, name, tempPassword, subject.subjectName);

      return {
        id: newTeacher._id,
        name: newTeacher.name,
        email: newTeacher.email,
        subject: {
          id: newTeacher.subject._id,
          subjectName: newTeacher.subject.subjectName,
          subjectCode: newTeacher.subject.subjectCode
        },
        dateOfBirth: newTeacher.dateOfBirth,
        gender: newTeacher.gender,
        role: newTeacher.role,
        isNewUser: newTeacher.isNewUser,
        active: newTeacher.active,
        tempPassword: tempPassword, // T·∫°m th·ªùi ƒë·ªÉ test, production n√™n b·ªè
        status: 'awaiting_first_login',
        createdAt: newTeacher.createdAt,
        updatedAt: newTeacher.updatedAt
      };

    } catch (error) {
      throw error;
    }
  }

  // T·∫°o parent m·ªõi v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß (ch·ªâ manager)
  async createParent(parentData, token) {
    try {
      // Verify token v√† ki·ªÉm tra role manager
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const currentUser = await User.findById(decoded.id);
      
      if (!currentUser || !currentUser.role.includes('manager')) {
        throw new Error('Only managers can create parents');
      }

      // Validate d·ªØ li·ªáu b·∫Øt bu·ªôc
      const { name, email, phone, childrenIds, dateOfBirth, gender, address } = parentData;
      
      if (!name || !phone || !childrenIds || !Array.isArray(childrenIds) || childrenIds.length === 0) {
        throw new Error('Missing required fields: name, phone, or childrenIds (must be a non-empty array)');
      }

      // Generate email if not provided
      const parentEmail = email || this.generateParentEmail(name);

      // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i (n·∫øu ƒë∆∞·ª£c cung c·∫•p)
      if (email) {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
          throw new Error('Email already exists');
        }
      }

      // Ki·ªÉm tra phone ƒë√£ t·ªìn t·∫°i
      const existingPhone = await User.findOne({ phone });
      if (existingPhone) {
        throw new Error('Phone number already exists');
      }

      // Ki·ªÉm tra t·∫•t c·∫£ children c√≥ t·ªìn t·∫°i v√† l√† student kh√¥ng
      const children = await User.find({ 
        _id: { $in: childrenIds },
        role: { $in: ['student'] }
      });

      if (children.length !== childrenIds.length) {
        throw new Error('Some children not found or are not students');
      }

      // T·∫°o m·∫≠t kh·∫©u t·∫°m th·ªùi v√† hash
      const tempPassword = this.generateOTP();
      const passwordHash = await bcrypt.hash(tempPassword, 12);

      // T·∫°o parent m·ªõi
      const newParent = new User({
        name,
        email: parentEmail,
        passwordHash,
        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,
        gender: gender || 'other',
        role: ['parents'],
        children: childrenIds,
        phone,
        address: address || '',
        isNewUser: true, // S·∫Ω redirect t·ªõi set-password khi login
        active: true
      });

      await newParent.save();

      // Populate children info cho response
      await newParent.populate('children', 'name studentId class_id');

      // G·ª≠i email v·ªõi m·∫≠t kh·∫©u t·∫°m th·ªùi
      const childrenNames = children.map(child => child.name);
      await this.sendParentWelcomeEmail(parentEmail, name, tempPassword, childrenNames);

      return {
        id: newParent._id,
        name: newParent.name,
        email: newParent.email,
        phone: newParent.phone,
        address: newParent.address,
        children: newParent.children.map(child => ({
          id: child._id,
          name: child.name,
          studentId: child.studentId,
          class_id: child.class_id
        })),
        dateOfBirth: newParent.dateOfBirth,
        gender: newParent.gender,
        role: newParent.role,
        isNewUser: newParent.isNewUser,
        active: newParent.active,
        tempPassword: tempPassword, // T·∫°m th·ªùi ƒë·ªÉ test, production n√™n b·ªè
        status: 'awaiting_first_login',
        createdAt: newParent.createdAt,
        updatedAt: newParent.updatedAt
      };

    } catch (error) {
      throw error;
    }
  }

  // G·ª≠i email ch√†o m·ª´ng cho parent m·ªõi import
  async sendParentWelcomeEmail(email, name, tempPassword, childrenNames) {
    try {
      // Ki·ªÉm tra c·∫•u h√¨nh email
      if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
        console.log(`üìß [NO EMAIL CONFIG] Temp password for ${email}: ${tempPassword}`);
        console.log('‚ö†Ô∏è  Please configure EMAIL_USER, EMAIL_PASS in .env file to send real emails');
        return;
      }

      const transporter = nodemailer.createTransport({
        host: process.env.EMAIL_HOST,
        port: process.env.EMAIL_PORT || 587,
        secure: process.env.EMAIL_PORT == 465,
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS
        }
      });

      const mailOptions = {
        from: process.env.EMAIL_FROM || process.env.EMAIL_USER,
        to: email,
        subject: 'Welcome to EcoSchool - Parent Account Created',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h1 style="color: #2c3e50;">EcoSchool - Parent Account</h1>
            <p>Hello ${name},</p>
            <p>Your parent account has been created successfully. You can now access information about your children's education.</p>
            <p><strong>Children:</strong> ${childrenNames.join(', ')}</p>
            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px; text-align: center; margin: 20px 0;">
              <h2 style="color: #e74c3c; font-size: 24px; letter-spacing: 2px;">${tempPassword}</h2>
              <p style="margin: 0; color: #7f8c8d;">Your temporary password</p>
            </div>
            <p><strong>Important:</strong></p>
            <ul>
              <li>Use this temporary password to log in for the first time</li>
              <li>You will be prompted to set a new password on first login</li>
              <li>Do not share this password with anyone</li>
            </ul>
            <p>If you have any questions, please contact the school administration.</p>
            <hr style="margin: 30px 0;">
            <p style="color: #7f8c8d; font-size: 12px;">This is an automated message from EcoSchool system.</p>
          </div>
        `
      };

      await transporter.sendMail(mailOptions);
      console.log(`üìß Parent welcome email successfully sent to ${email}`);
    } catch (error) {
      console.error('‚ùå Parent welcome email sending failed:', error.message);
      console.log(`üìß [FALLBACK] Temp password for ${email}: ${tempPassword}`);
    }
  }

  // Import parents t·ª´ file Excel
  async importParents(filePath, token) {
    const XLSX = require('xlsx');
    const fs = require('fs');
    
    try {
      // Verify token v√† ki·ªÉm tra role manager
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const currentUser = await User.findById(decoded.id);
      
      if (!currentUser || !currentUser.role.includes('manager')) {
        throw new Error('Only managers can import parents');
      }

      // ƒê·ªçc file Excel
      const workbook = XLSX.readFile(filePath);
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const parentsData = XLSX.utils.sheet_to_json(worksheet);

      if (!parentsData || parentsData.length === 0) {
        throw new Error('No data found in Excel file');
      }

      const results = {
        success: [],
        failed: [],
        total: parentsData.length
      };

      // Group parents by email to handle multiple children
      const parentsByEmail = {};
      
      // Process each row
      for (let i = 0; i < parentsData.length; i++) {
        const parentRow = parentsData[i];
        
        try {
          // Validate d·ªØ li·ªáu
          if (!parentRow.name || !parentRow.childId || !parentRow.phone) {
            results.failed.push({
              row: i + 2,
              data: parentRow,
              error: 'Missing required fields: name, childId, or phone'
            });
            continue;
          }

          // Generate email if not provided
          const email = parentRow.email || this.generateParentEmail(parentRow.name);
          
          // Find child by _id
          const child = await User.findById(parentRow.childId);
          
          if (!child || !child.role.includes('student')) {
            results.failed.push({
              row: i + 2,
              data: parentRow,
              error: `Child with ID '${parentRow.childId}' not found or is not a student`
            });
            continue;
          }

          // Group by email to handle multiple children
          if (!parentsByEmail[email]) {
            parentsByEmail[email] = {
              name: parentRow.name,
              email: email,
              dateOfBirth: parentRow.dateOfBirth ? new Date(parentRow.dateOfBirth) : null,
              gender: parentRow.gender || 'other',
              phone: parentRow.phone,
              address: parentRow.address || '',
              children: [],
              row: i + 2
            };
          }
          
          parentsByEmail[email].children.push(child._id);

        } catch (error) {
          results.failed.push({
            row: i + 2,
            data: parentRow,
            error: error.message
          });
        }
      }

      // Process unique parents
      for (const [email, parentInfo] of Object.entries(parentsByEmail)) {
        try {
          // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
          const existingUser = await User.findOne({ email });
          if (existingUser) {
            results.failed.push({
              row: parentInfo.row,
              data: { email, name: parentInfo.name },
              error: 'Email already exists'
            });
            continue;
          }

          // T·∫°o m·∫≠t kh·∫©u t·∫°m th·ªùi v√† hash
          const tempPassword = this.generateOTP();
          const passwordHash = await bcrypt.hash(tempPassword, 12);

          // Get children names for email
          const children = await User.find({ _id: { $in: parentInfo.children } });
          const childrenNames = children.map(child => child.name);

          // T·∫°o parent m·ªõi
          const newParent = new User({
            name: parentInfo.name,
            email: parentInfo.email,
            passwordHash,
            dateOfBirth: parentInfo.dateOfBirth,
            gender: parentInfo.gender,
            role: ['parents'],
            children: parentInfo.children,
            phone: parentInfo.phone,
            address: parentInfo.address,
            isNewUser: true,
            active: true
          });

          await newParent.save();

          // G·ª≠i email v·ªõi m·∫≠t kh·∫©u t·∫°m th·ªùi
          await this.sendParentWelcomeEmail(parentInfo.email, parentInfo.name, tempPassword, childrenNames);

          results.success.push({
            row: parentInfo.row,
            email: parentInfo.email,
            name: parentInfo.name,
            childrenCount: parentInfo.children.length,
            childrenNames: childrenNames,
            status: 'awaiting_first_login',
            tempPassword: tempPassword // T·∫°m th·ªùi ƒë·ªÉ test, production n√™n b·ªè
          });

        } catch (error) {
          results.failed.push({
            row: parentInfo.row,
            data: { email: parentInfo.email, name: parentInfo.name },
            error: error.message
          });
        }
      }

      // X√≥a file t·∫°m sau khi x·ª≠ l√Ω
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
      }

      return results;

    } catch (error) {
      // X√≥a file t·∫°m n·∫øu c√≥ l·ªói
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
      }
      throw error;
    }
  }

  // Import parents t·ª´ base64
  async importParentsBase64(fileData, token) {
    const XLSX = require('xlsx');
    
    try {
      // Verify token v√† ki·ªÉm tra role manager
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const currentUser = await User.findById(decoded.id);
      
      if (!currentUser || !currentUser.role.includes('manager')) {
        throw new Error('Only managers can import parents');
      }

      // Decode base64 data
      const buffer = Buffer.from(fileData, 'base64');
      const workbook = XLSX.read(buffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const parentsData = XLSX.utils.sheet_to_json(worksheet);

      if (!parentsData || parentsData.length === 0) {
        throw new Error('No data found in Excel file');
      }

      const results = {
        success: [],
        failed: [],
        total: parentsData.length
      };

      // Group parents by email to handle multiple children
      const parentsByEmail = {};
      
      // Process each row
      for (let i = 0; i < parentsData.length; i++) {
        const parentRow = parentsData[i];
        
        try {
          // Validate d·ªØ li·ªáu
          if (!parentRow.name || !parentRow.childId || !parentRow.phone) {
            results.failed.push({
              row: i + 2,
              data: parentRow,
              error: 'Missing required fields: name, childId, or phone'
            });
            continue;
          }

          // Generate email if not provided
          const email = parentRow.email || this.generateParentEmail(parentRow.name);
          
          // Find child by _id
          const child = await User.findById(parentRow.childId);
          
          if (!child || !child.role.includes('student')) {
            results.failed.push({
              row: i + 2,
              data: parentRow,
              error: `Child with ID '${parentRow.childId}' not found or is not a student`
            });
            continue;
          }

          // Group by email to handle multiple children
          if (!parentsByEmail[email]) {
            parentsByEmail[email] = {
              name: parentRow.name,
              email: email,
              dateOfBirth: parentRow.dateOfBirth ? new Date(parentRow.dateOfBirth) : null,
              gender: parentRow.gender || 'other',
              phone: parentRow.phone,
              address: parentRow.address || '',
              children: [],
              row: i + 2
            };
          }
          
          parentsByEmail[email].children.push(child._id);

        } catch (error) {
          results.failed.push({
            row: i + 2,
            data: parentRow,
            error: error.message
          });
        }
      }

      // Process unique parents
      for (const [email, parentInfo] of Object.entries(parentsByEmail)) {
        try {
          // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
          const existingUser = await User.findOne({ email });
          if (existingUser) {
            results.failed.push({
              row: parentInfo.row,
              data: { email, name: parentInfo.name },
              error: 'Email already exists'
            });
            continue;
          }

          // T·∫°o m·∫≠t kh·∫©u t·∫°m th·ªùi v√† hash
          const tempPassword = this.generateOTP();
          const passwordHash = await bcrypt.hash(tempPassword, 12);

          // Get children names for email
          const children = await User.find({ _id: { $in: parentInfo.children } });
          const childrenNames = children.map(child => child.name);

          // T·∫°o parent m·ªõi
          const newParent = new User({
            name: parentInfo.name,
            email: parentInfo.email,
            passwordHash,
            dateOfBirth: parentInfo.dateOfBirth,
            gender: parentInfo.gender,
            role: ['parents'],
            children: parentInfo.children,
            phone: parentInfo.phone,
            address: parentInfo.address,
            isNewUser: true,
            active: true
          });

          await newParent.save();

          // G·ª≠i email v·ªõi m·∫≠t kh·∫©u t·∫°m th·ªùi
          await this.sendParentWelcomeEmail(parentInfo.email, parentInfo.name, tempPassword, childrenNames);

          results.success.push({
            row: parentInfo.row,
            email: parentInfo.email,
            name: parentInfo.name,
            childrenCount: parentInfo.children.length,
            childrenNames: childrenNames,
            status: 'awaiting_first_login',
            tempPassword: tempPassword // T·∫°m th·ªùi ƒë·ªÉ test, production n√™n b·ªè
          });

        } catch (error) {
          results.failed.push({
            row: parentInfo.row,
            data: { email: parentInfo.email, name: parentInfo.name },
            error: error.message
          });
        }
      }

      return results;

    } catch (error) {
      throw error;
    }
  }

  // Generate parent email from name
  generateParentEmail(name) {
    // Remove diacritics and convert to lowercase
    const normalizedName = name
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .toLowerCase()
      .replace(/[^a-z\s]/g, '')
      .replace(/\s+/g, '')
      .substring(0, 20); // Limit length
    
    return `${normalizedName}.parents@yopmail.com`;
  }

  // T·∫°o gi√°o vi√™n t·ª± ƒë·ªông khi import TKB
  async createTeacherFromSchedule(teacherName, subjectName, schoolId) {
    try {
      // Ki·ªÉm tra gi√°o vi√™n ƒë√£ t·ªìn t·∫°i
      const existingTeacher = await User.findOne({ 
        name: teacherName,
        role: { $in: ['teacher', 'homeroom_teacher'] }
      });

      if (existingTeacher) {
        return existingTeacher;
      }

      // T√¨m m√¥n h·ªçc v·ªõi mapping t√™n m√¥n h·ªçc
      const subjectMapping = {
        'To√°n': 'Mathematics',
        'Ng·ªØ vƒÉn': 'Literature', 
        'Ngo·∫°i ng·ªØ': 'English',
        'V·∫≠t l√Ω': 'Physics',
        'H√≥a h·ªçc': 'Chemistry',
        'Sinh h·ªçc': 'Biology',
        'L·ªãch s·ª≠': 'History',
        'ƒê·ªãa l√Ω': 'Geography',
        'Tin h·ªçc': 'Informatics',
        'GDQP': 'Defense Education',
        'GDCD': 'Civic Education',
        'Th·ªÉ d·ª•c': 'Physical Education',
        'Ch√†o c·ªù': 'Flag Ceremony',
        'Sinh ho·∫°t l·ªõp': 'Class Activity'
      };

      let subject = null;
      const mappedSubjectName = subjectMapping[subjectName] || subjectName;
      
      // T√¨m m√¥n h·ªçc theo t√™n ƒë√£ map ho·∫∑c t√™n g·ªëc
      subject = await Subject.findOne({ 
        $or: [
          { subjectName: { $regex: new RegExp(mappedSubjectName, 'i') } },
          { subjectName: { $regex: new RegExp(subjectName, 'i') } }
        ]
      });

      if (!subject) {
        console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√¥n h·ªçc: ${subjectName}, s·∫Ω t·∫°o gi√°o vi√™n kh√¥ng c√≥ m√¥n h·ªçc`);
      }

      // T·∫°o email v√† password theo format y√™u c·∫ßu
      const email = this.generateTeacherEmail(teacherName);
      const password = this.generateTeacherPassword();
      const passwordHash = await bcrypt.hash(password, 12);

      // T·∫°o m√£ gi√°o vi√™n
      const teacherCount = await User.countDocuments({ role: { $in: ['teacher', 'homeroom_teacher'] } });
      const teacherId = `TCH${String(teacherCount + 1).padStart(3, '0')}`;

      // T·∫°o gi√°o vi√™n m·ªõi v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
      const newTeacher = new User({
        name: teacherName,
        email: email,
        passwordHash: passwordHash,
        teacherId: teacherId,
        role: ['teacher'],
        subject: subject ? subject._id : undefined,
        dateOfBirth: this.generateRandomDate(25, 60),
        gender: Math.random() > 0.5 ? 'male' : 'female',
        phone: this.generateRandomPhone(),
        address: this.generateRandomAddress(),
        school: schoolId,
        isNewUser: true,
        active: true
      });

      await newTeacher.save();

      // G·ª≠i email ch√†o m·ª´ng
      if (subject) {
        await this.sendTeacherWelcomeEmail(email, teacherName, password, subject.subjectName);
      }

      console.log(`‚úÖ ƒê√£ t·∫°o gi√°o vi√™n m·ªõi: ${teacherName} (${email}) - M√¥n: ${subject ? subject.subjectName : 'Ch∆∞a ph√¢n m√¥n'}`);
      return newTeacher;

    } catch (error) {
      console.error(`‚ùå L·ªói t·∫°o gi√°o vi√™n ${teacherName}:`, error.message);
      throw error;
    }
  }

  // Generate teacher email
  generateTeacherEmail(name) {
    const normalizedName = name
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/[^a-z0-9\s]/g, '')
      .replace(/\s+/g, '.');
    return `${normalizedName}.teacher@yopmail.com`;
  }

  // Generate teacher password
  generateTeacherPassword() {
    return 'Teacher@123';
  }

  // Generate random date
  generateRandomDate(minAge, maxAge) {
    const today = new Date();
    const minDate = new Date(today.getFullYear() - maxAge, today.getMonth(), today.getDate());
    const maxDate = new Date(today.getFullYear() - minAge, today.getMonth(), today.getDate());
    return new Date(minDate.getTime() + Math.random() * (maxDate.getTime() - minDate.getTime()));
  }

  // Generate random phone
  generateRandomPhone() {
    const prefixes = ['032', '033', '034', '035', '036', '037', '038', '039'];
    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
    const number = Math.floor(Math.random() * 10000000).toString().padStart(7, '0');
    return `${prefix}${number}`;
  }

  // Generate random address
  generateRandomAddress() {
    const streets = ['Nguy·ªÖn VƒÉn Linh', 'L√™ VƒÉn Vi·ªát', 'Mai Ch√≠ Th·ªç', 'V√µ VƒÉn Ng√¢n', 'Ph·∫°m VƒÉn ƒê·ªìng'];
    const districts = ['Qu·∫≠n 1', 'Qu·∫≠n 2', 'Qu·∫≠n 3', 'Qu·∫≠n 7', 'Qu·∫≠n 9'];
    const street = streets[Math.floor(Math.random() * streets.length)];
    const district = districts[Math.floor(Math.random() * districts.length)];
    const number = Math.floor(Math.random() * 200) + 1;
    return `${number} ${street}, ${district}, TP.HCM`;
  }
}

module.exports = new UserService(); 