const mongoose = require("mongoose");

class LessonReferenceSwapperService {
  constructor() {
    // ƒê·ªãnh nghƒ©a c√°c collection c√≥ reference ƒë·∫øn lesson
    // C√≥ th·ªÉ d·ªÖ d√†ng th√™m collection m·ªõi m√† kh√¥ng c·∫ßn s·ª≠a code
    this.lessonReferenceCollections = [
      {
        modelName: "TestInfo",
        modelPath: "../models/test-info.model",
        lessonField: "lesson",
        description: "Test information",
      },
      // ƒê√£ lo·∫°i b·ªè TeacherLessonEvaluation v√† StudentLessonEvaluation
      // v√¨ kh√¥ng c·∫ßn swap evaluation khi swap lesson
      {
        modelName: "LessonRequest",
        modelPath: "../models/lesson-request.model",
        lessonField: "originalLesson",
        description: "Lesson requests (original lesson)",
      },
      {
        modelName: "LessonRequest",
        modelPath: "../models/lesson-request.model",
        lessonField: "replacementLesson",
        description: "Lesson requests (replacement lesson)",
      },
      {
        modelName: "Note",
        modelPath: "../../note/models/note.model",
        lessonField: "lesson",
        description: "User notes",
      },
      // D·ªÖ d√†ng th√™m collection m·ªõi ·ªü ƒë√¢y khi c·∫ßn
      // {
      //   modelName: "NewCollection",
      //   modelPath: "../models/new-collection.model",
      //   lessonField: "lessonId",
      //   description: "New collection description"
      // }
    ];
  }

  /**
   * Ho√°n ƒë·ªïi lesson references trong t·∫•t c·∫£ collections
   * @param {string} originalLessonId - ID c·ªßa lesson g·ªëc
   * @param {string} replacementLessonId - ID c·ªßa lesson thay th·∫ø
   * @param {string} processedBy - ID c·ªßa user x·ª≠ l√Ω
   * @returns {Object} K·∫øt qu·∫£ ho√°n ƒë·ªïi
   */
  async swapLessonReferences(
    originalLessonId,
    replacementLessonId,
    processedBy
  ) {
    const results = {
      success: true,
      swappedCollections: [],
      errors: [],
      totalSwapped: 0,
    };

    console.log(
      `üîÑ Starting lesson reference swap: ${originalLessonId} ‚Üî ${replacementLessonId}`
    );

    for (const collectionConfig of this.lessonReferenceCollections) {
      try {
        const swapResult = await this.swapCollectionReferences(
          collectionConfig,
          originalLessonId,
          replacementLessonId,
          processedBy
        );

        if (swapResult.success) {
          results.swappedCollections.push({
            collection: collectionConfig.modelName,
            field: collectionConfig.lessonField,
            swapped: swapResult.swapped,
            description: collectionConfig.description,
          });
          results.totalSwapped += swapResult.swapped;
        } else {
          results.errors.push({
            collection: collectionConfig.modelName,
            error: swapResult.error,
          });
        }
      } catch (error) {
        console.error(
          `‚ùå Error swapping ${collectionConfig.modelName}:`,
          error.message
        );
        results.errors.push({
          collection: collectionConfig.modelName,
          error: error.message,
        });
      }
    }

    // N·∫øu c√≥ l·ªói, ƒë√°nh d·∫•u kh√¥ng th√†nh c√¥ng
    if (results.errors.length > 0) {
      results.success = false;
    }

    console.log(
      `‚úÖ Lesson reference swap completed: ${results.totalSwapped} records swapped`
    );
    return results;
  }

  /**
   * Ho√°n ƒë·ªïi references trong m·ªôt collection c·ª• th·ªÉ
   * @param {Object} collectionConfig - C·∫•u h√¨nh collection
   * @param {string} originalLessonId - ID lesson g·ªëc
   * @param {string} replacementLessonId - ID lesson thay th·∫ø
   * @param {string} processedBy - ID user x·ª≠ l√Ω
   * @returns {Object} K·∫øt qu·∫£ ho√°n ƒë·ªïi
   */
  async swapCollectionReferences(
    collectionConfig,
    originalLessonId,
    replacementLessonId,
    processedBy
  ) {
    try {
      const Model = require(collectionConfig.modelPath);
      const lessonField = collectionConfig.lessonField;

      // T√¨m records li√™n quan ƒë·∫øn original lesson
      const originalRecords = await Model.find({
        [lessonField]: originalLessonId,
      });

      // T√¨m records li√™n quan ƒë·∫øn replacement lesson
      const replacementRecords = await Model.find({
        [lessonField]: replacementLessonId,
      });

      let swapped = 0;

      // Ho√°n ƒë·ªïi original records sang replacement lesson
      for (const record of originalRecords) {
        await Model.updateOne(
          { _id: record._id },
          {
            [lessonField]: replacementLessonId,
            lastModifiedBy: processedBy,
            updatedAt: new Date(),
          }
        );
        swapped++;
      }

      // Ho√°n ƒë·ªïi replacement records sang original lesson
      for (const record of replacementRecords) {
        await Model.updateOne(
          { _id: record._id },
          {
            [lessonField]: originalLessonId,
            lastModifiedBy: processedBy,
            updatedAt: new Date(),
          }
        );
        swapped++;
      }

      console.log(
        `‚úÖ Swapped ${swapped} records in ${collectionConfig.modelName}`
      );

      return {
        success: true,
        swapped: swapped,
        collection: collectionConfig.modelName,
      };
    } catch (error) {
      console.error(
        `‚ùå Error in ${collectionConfig.modelName}:`,
        error.message
      );
      return {
        success: false,
        error: error.message,
        collection: collectionConfig.modelName,
      };
    }
  }
}

module.exports = new LessonReferenceSwapperService();
