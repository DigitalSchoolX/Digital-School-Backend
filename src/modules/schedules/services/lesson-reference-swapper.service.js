const mongoose = require("mongoose");
const Lesson = require("../models/lesson.model");

class LessonReferenceSwapperService {
  constructor() {
    // ƒê·ªãnh nghƒ©a c√°c collection c√≥ reference ƒë·∫øn lesson
    // C√≥ th·ªÉ d·ªÖ d√†ng th√™m collection m·ªõi m√† kh√¥ng c·∫ßn s·ª≠a code
    this.lessonReferenceCollections = [
      {
        modelName: "TestInfo",
        modelPath: "../models/test-info.model",
        lessonField: "lesson",
        description: "Test information",
      },
      // ƒê√£ lo·∫°i b·ªè TeacherLessonEvaluation v√† StudentLessonEvaluation
      // v√¨ kh√¥ng c·∫ßn swap evaluation khi swap lesson
      {
        modelName: "LessonRequest",
        modelPath: "../models/lesson-request.model",
        lessonField: "originalLesson",
        description: "Lesson requests (original lesson)",
      },
      {
        modelName: "LessonRequest",
        modelPath: "../models/lesson-request.model",
        lessonField: "replacementLesson",
        description: "Lesson requests (replacement lesson)",
      },
      {
        modelName: "Note",
        modelPath: "../../note/models/note.model",
        lessonField: "lesson",
        description: "User notes",
        hasReminder: true, // ƒê√°nh d·∫•u collection n√†y c√≥ reminder c·∫ßn c·∫≠p nh·∫≠t
      },
      // D·ªÖ d√†ng th√™m collection m·ªõi ·ªü ƒë√¢y khi c·∫ßn
      // {
      //   modelName: "NewCollection",
      //   modelPath: "../models/new-collection.model",
      //   lessonField: "lessonId",
      //   description: "New collection description"
      // }
    ];
  }

  /**
   * T√≠nh to√°n l·∫°i remindAt cho note d·ª±a tr√™n lesson m·ªõi
   * @param {Object} note - Note object
   * @param {Object} lesson - Lesson object v·ªõi timeSlot ƒë√£ populate
   * @returns {Date|null} remindAt m·ªõi ho·∫∑c null n·∫øu kh√¥ng c√≥ reminder
   */
  calculateNewRemindAt(note, lesson) {
    // Ch·ªâ t√≠nh to√°n n·∫øu note c√≥ reminder v√† lesson c√≥ timeSlot
    if (!note.remindAt || !note.time || !lesson.timeSlot || !lesson.timeSlot.startTime) {
      return null;
    }

    try {
      const [hour, minute] = lesson.timeSlot.startTime.split(":").map(Number);
      const scheduledDate = new Date(lesson.scheduledDate);
      scheduledDate.setHours(hour, minute, 0, 0);
      
      const newRemindAt = new Date(scheduledDate.getTime() - note.time * 60000);
      
      // Ki·ªÉm tra t√≠nh h·ª£p l·ªá
      if (isNaN(newRemindAt.getTime())) {
        console.warn(`‚ö†Ô∏è Invalid remindAt calculated for note ${note._id}`);
        return null;
      }
      
      return newRemindAt;
    } catch (error) {
      console.error(`‚ùå Error calculating new remindAt for note ${note._id}:`, error.message);
      return null;
    }
  }

  /**
   * Test method ƒë·ªÉ ki·ªÉm tra logic t√≠nh to√°n remindAt
   * @param {Object} note - Note object v·ªõi remindAt v√† time
   * @param {Object} lesson - Lesson object v·ªõi timeSlot
   * @returns {Object} K·∫øt qu·∫£ test
   */
  testRemindAtCalculation(note, lesson) {
    console.log("üß™ Testing remindAt calculation:");
    console.log(`Note: remindAt=${note.remindAt}, time=${note.time} minutes`);
    console.log(`Lesson: scheduledDate=${lesson.scheduledDate}, timeSlot=${lesson.timeSlot?.startTime}`);
    
    const newRemindAt = this.calculateNewRemindAt(note, lesson);
    
    console.log(`Result: ${newRemindAt ? newRemindAt.toISOString() : 'null'}`);
    
    return {
      originalRemindAt: note.remindAt,
      newRemindAt: newRemindAt,
      timeDifference: newRemindAt ? (newRemindAt.getTime() - note.remindAt.getTime()) / 60000 : null
    };
  }

  /**
   * Ho√°n ƒë·ªïi lesson references trong t·∫•t c·∫£ collections
   * @param {string} originalLessonId - ID c·ªßa lesson g·ªëc
   * @param {string} replacementLessonId - ID c·ªßa lesson thay th·∫ø
   * @param {string} processedBy - ID c·ªßa user x·ª≠ l√Ω
   * @returns {Object} K·∫øt qu·∫£ ho√°n ƒë·ªïi
   */
  async swapLessonReferences(
    originalLessonId,
    replacementLessonId,
    processedBy
  ) {
    const results = {
      success: true,
      swappedCollections: [],
      errors: [],
      totalSwapped: 0,
      reminderUpdates: 0,
    };

    console.log(
      `üîÑ Starting lesson reference swap: ${originalLessonId} ‚Üî ${replacementLessonId}`
    );

    for (const collectionConfig of this.lessonReferenceCollections) {
      try {
        const swapResult = await this.swapCollectionReferences(
          collectionConfig,
          originalLessonId,
          replacementLessonId,
          processedBy
        );

        if (swapResult.success) {
          results.swappedCollections.push({
            collection: collectionConfig.modelName,
            field: collectionConfig.lessonField,
            swapped: swapResult.swapped,
            reminderUpdates: swapResult.reminderUpdates || 0,
            description: collectionConfig.description,
          });
          results.totalSwapped += swapResult.swapped;
          results.reminderUpdates += swapResult.reminderUpdates || 0;
        } else {
          results.errors.push({
            collection: collectionConfig.modelName,
            error: swapResult.error,
          });
        }
      } catch (error) {
        console.error(
          `‚ùå Error swapping ${collectionConfig.modelName}:`,
          error.message
        );
        results.errors.push({
          collection: collectionConfig.modelName,
          error: error.message,
        });
      }
    }

    // N·∫øu c√≥ l·ªói, ƒë√°nh d·∫•u kh√¥ng th√†nh c√¥ng
    if (results.errors.length > 0) {
      results.success = false;
    }

    console.log(
      `‚úÖ Lesson reference swap completed: ${results.totalSwapped} records swapped, ${results.reminderUpdates} reminders updated`
    );
    return results;
  }

  /**
   * Ho√°n ƒë·ªïi references trong m·ªôt collection c·ª• th·ªÉ
   * @param {Object} collectionConfig - C·∫•u h√¨nh collection
   * @param {string} originalLessonId - ID lesson g·ªëc
   * @param {string} replacementLessonId - ID lesson thay th·∫ø
   * @param {string} processedBy - ID user x·ª≠ l√Ω
   * @returns {Object} K·∫øt qu·∫£ ho√°n ƒë·ªïi
   */
  async swapCollectionReferences(
    collectionConfig,
    originalLessonId,
    replacementLessonId,
    processedBy
  ) {
    try {
      const Model = require(collectionConfig.modelPath);
      const lessonField = collectionConfig.lessonField;

      // T√¨m records li√™n quan ƒë·∫øn original lesson
      const originalRecords = await Model.find({
        [lessonField]: originalLessonId,
      });

      // T√¨m records li√™n quan ƒë·∫øn replacement lesson
      const replacementRecords = await Model.find({
        [lessonField]: replacementLessonId,
      });

      let swapped = 0;
      let reminderUpdates = 0;

      // Cache lesson data ƒë·ªÉ tr√°nh query nhi·ªÅu l·∫ßn
      let originalLesson = null;
      let replacementLesson = null;
      
      if (collectionConfig.hasReminder && (originalRecords.length > 0 || replacementRecords.length > 0)) {
        // Ch·ªâ query lesson n·∫øu c√≥ note c·∫ßn c·∫≠p nh·∫≠t reminder
        [originalLesson, replacementLesson] = await Promise.all([
          Lesson.findById(originalLessonId).populate("timeSlot"),
          Lesson.findById(replacementLessonId).populate("timeSlot")
        ]);
      }

      // Ho√°n ƒë·ªïi original records sang replacement lesson
      for (const record of originalRecords) {
        const updateData = {
          [lessonField]: replacementLessonId,
          lastModifiedBy: processedBy,
          updatedAt: new Date(),
        };

        // N·∫øu l√† Note v√† c√≥ reminder, t√≠nh to√°n l·∫°i remindAt
        if (collectionConfig.hasReminder && record.remindAt && record.time && replacementLesson) {
          const newRemindAt = this.calculateNewRemindAt(record, replacementLesson);
          if (newRemindAt) {
            updateData.remindAt = newRemindAt;
            reminderUpdates++;
            console.log(`üìù Updated reminder for note ${record._id}: ${record.remindAt.toISOString()} ‚Üí ${newRemindAt.toISOString()}`);
          }
        }

        await Model.updateOne({ _id: record._id }, updateData);
        swapped++;
      }

      // Ho√°n ƒë·ªïi replacement records sang original lesson
      for (const record of replacementRecords) {
        const updateData = {
          [lessonField]: originalLessonId,
          lastModifiedBy: processedBy,
          updatedAt: new Date(),
        };

        // N·∫øu l√† Note v√† c√≥ reminder, t√≠nh to√°n l·∫°i remindAt
        if (collectionConfig.hasReminder && record.remindAt && record.time && originalLesson) {
          const newRemindAt = this.calculateNewRemindAt(record, originalLesson);
          if (newRemindAt) {
            updateData.remindAt = newRemindAt;
            reminderUpdates++;
            console.log(`üìù Updated reminder for note ${record._id}: ${record.remindAt.toISOString()} ‚Üí ${newRemindAt.toISOString()}`);
          }
        }

        await Model.updateOne({ _id: record._id }, updateData);
        swapped++;
      }

      console.log(
        `‚úÖ Swapped ${swapped} records in ${collectionConfig.modelName}${reminderUpdates > 0 ? `, updated ${reminderUpdates} reminders` : ''}`
      );

      return {
        success: true,
        swapped: swapped,
        reminderUpdates: reminderUpdates,
        collection: collectionConfig.modelName,
      };
    } catch (error) {
      console.error(
        `‚ùå Error in ${collectionConfig.modelName}:`,
        error.message
      );
      return {
        success: false,
        error: error.message,
        collection: collectionConfig.modelName,
      };
    }
  }
}

module.exports = new LessonReferenceSwapperService();
