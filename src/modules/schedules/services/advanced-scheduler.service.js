const TimetableSchedulerService = require('./timetable-scheduler.service');
const TeacherAssignmentService = require('./teacher-assignment.service');
const Schedule = require('../models/schedule.model');
const Class = require('../../classes/models/class.model');
const Subject = require('../../subjects/models/subject.model');
const User = require('../../auth/models/user.model');

class AdvancedSchedulerService {
  constructor() {
    this.timetableScheduler = new TimetableSchedulerService();
    this.teacherAssignment = new TeacherAssignmentService();
  }

  async createOptimizedSchedule(classId, academicYear) {
    try {
      console.log(`üöÄ Creating optimized schedule for class ${classId}...`);
      
      // 1. L·∫•y th√¥ng tin l·ªõp
      const classInfo = await Class.findById(classId).populate('homeroomTeacher');
      if (!classInfo) {
        throw new Error('Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc');
      }

      if (!classInfo.homeroomTeacher) {
        throw new Error('L·ªõp h·ªçc ch∆∞a c√≥ gi√°o vi√™n ch·ªß nhi·ªám');
      }

      console.log(`üìö L·ªõp: ${classInfo.className}, GVCN: ${classInfo.homeroomTeacher.name}`);

      // 2. L·∫•y m√¥n h·ªçc theo c·∫•p l·ªõp
      const gradeLevel = this.extractGradeFromClassName(classInfo.className);
      const subjects = await Subject.find({
        gradeLevels: gradeLevel,
        isActive: true
      }).lean();

      if (!subjects || subjects.length === 0) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y m√¥n h·ªçc cho c·∫•p l·ªõp ${gradeLevel}`);
      }

      console.log(`üìñ T√¨m th·∫•y ${subjects.length} m√¥n h·ªçc cho c·∫•p l·ªõp ${gradeLevel}`);

      // 3. L·∫•y gi√°o vi√™n
      const subjectIds = subjects.map(s => s._id);
      const teachers = await User.find({
        role: { $in: ['teacher', 'homeroom_teacher'] },
        subject: { $in: subjectIds },
        active: true
      }).populate('subject').lean();

      console.log(`üë®‚Äçüè´ T√¨m th·∫•y ${teachers.length} gi√°o vi√™n`);

      // 4. Th√™m GVCN n·∫øu c·∫ßn
      const homeroomTeacher = classInfo.homeroomTeacher;
      if (homeroomTeacher.subject) {
        const homeroomSubject = await Subject.findById(homeroomTeacher.subject).lean();
        if (homeroomSubject && homeroomSubject.gradeLevels.includes(gradeLevel)) {
          const existingTeacher = teachers.find(t => t._id.toString() === homeroomTeacher._id.toString());
          if (!existingTeacher) {
            teachers.push({
              ...homeroomTeacher,
              subject: homeroomSubject
            });
            console.log(`‚úÖ ƒê√£ th√™m GVCN ${homeroomTeacher.name} d·∫°y m√¥n ${homeroomSubject.subjectName}`);
          }
        }
      }

      if (teachers.length === 0) {
        throw new Error('Kh√¥ng t√¨m th·∫•y gi√°o vi√™n ph√π h·ª£p');
      }

      // 5. Log mapping
      console.log('üìã Teacher-Subject mapping:');
    teachers.forEach(teacher => {
        if (teacher.subject) {
          console.log(`  - ${teacher.name}: ${teacher.subject.subjectName || 'Unknown'}`);
        }
      });

      // 6. T·∫°o l·ªãch v·ªõi logic ph√¢n c√¥ng gi√°o vi√™n ƒë√∫ng v√† ki·ªÉm tra xung ƒë·ªôt
      console.log('üöÄ T·∫°o th·ªùi kh√≥a bi·ªÉu v·ªõi logic ph√¢n c√¥ng gi√°o vi√™n ƒë√∫ng v√† ki·ªÉm tra xung ƒë·ªôt...');
      
      // T·∫°o b·∫£n ƒë·ªì ph√¢n c√¥ng gi√°o vi√™n
      const teacherAssignmentMap = await this.teacherAssignment.createTeacherAssignmentMap(
        classId, 
        subjects
      );

      // In b√°o c√°o ph√¢n c√¥ng
      this.teacherAssignment.printAssignmentReport(teacherAssignmentMap, classInfo.className);

      // T·∫°o th·ªùi kh√≥a bi·ªÉu v·ªõi ki·ªÉm tra xung ƒë·ªôt
      const optimizedSchedule = await this.teacherAssignment.createOptimizedScheduleWithConflictCheck(
        classId, 
        subjects, 
        teacherAssignmentMap, 
        classInfo.className
      );
      
      console.log('‚úÖ Th·ªùi kh√≥a bi·ªÉu ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi logic ph√¢n c√¥ng ƒë√∫ng');
      
      // In b√°o c√°o workload sau khi t·∫°o xong t·∫•t c·∫£ l·ªõp
      if (this.isLastClass) {
        this.teacherAssignment.printWorkloadSummary();
      }
      
      return optimizedSchedule;

    } catch (error) {
      console.error(`‚ùå L·ªói t·∫°o th·ªùi kh√≥a bi·ªÉu: ${error.message}`);
      throw error;
    }
  }

  async createFallbackSchedule(classId, academicYear, subjects, teachers, classInfo) {
    try {
      console.log('üîß T·∫°o fallback schedule v·ªõi logic ph√¢n c√¥ng gi√°o vi√™n ƒë√∫ng...');
      const schedule = Schedule.createTemplate(classId, academicYear, classInfo.homeroomTeacher._id);
      
      // T·∫°o b·∫£n ƒë·ªì ph√¢n c√¥ng gi√°o vi√™n ƒë√∫ng logic
      const teacherAssignmentMap = await this.teacherAssignment.createTeacherAssignmentMap(
        classId, 
        subjects
      );

      // In b√°o c√°o ph√¢n c√¥ng
      this.teacherAssignment.printAssignmentReport(teacherAssignmentMap, classInfo.className);

      // T·∫°o danh s√°ch m√¥n h·ªçc c·∫ßn x·∫øp theo s·ªë ti·∫øt
      const subjectPeriods = [];
      subjects.forEach(subject => {
        const periodsPerWeek = subject.periodsPerWeek || 3;
        for (let i = 0; i < periodsPerWeek; i++) {
          subjectPeriods.push(subject);
        }
      });

      console.log(`üìä T·ªïng s·ªë ti·∫øt c·∫ßn x·∫øp: ${subjectPeriods.length}`);

      let periodIndex = 0;
      let unplacedCount = 0;
      const maxPeriodsPerDay = 7;
      const daysPerWeek = 6;

      for (let dayIndex = 0; dayIndex < daysPerWeek && periodIndex < subjectPeriods.length; dayIndex++) {
        const daySchedule = schedule.schedule[dayIndex];
        
        // B·ªè qua ti·∫øt ch√†o c·ªù (th·ª© 2 ti·∫øt 1) v√† sinh ho·∫°t l·ªõp (th·ª© 7 ti·∫øt 7)
        const skipPeriods = [];
        if (dayIndex === 0) skipPeriods.push(1); // Th·ª© 2 ti·∫øt 1: Ch√†o c·ªù
        if (dayIndex === 5) skipPeriods.push(7); // Th·ª© 7 ti·∫øt 7: Sinh ho·∫°t l·ªõp

        for (let period = 1; period <= maxPeriodsPerDay && periodIndex < subjectPeriods.length; period++) {
          if (skipPeriods.includes(period)) continue;

          // 1. Ch·ªçn subject tr∆∞·ªõc
          const subject = subjectPeriods[periodIndex];
          
          // 2. L·∫•y gi√°o vi√™n ƒë√£ ƒë∆∞·ª£c ph√¢n c√¥ng cho m√¥n n√†y
          const assignedTeacher = this.teacherAssignment.getAssignedTeacher(teacherAssignmentMap, subject._id);
          
          if (assignedTeacher) {
            const timeSlot = this.getTimeSlot(period);
            
            daySchedule.periods.push({
              periodNumber: period,
              subject: subject._id,
              teacher: assignedTeacher._id,
              session: timeSlot.session,
              timeStart: timeSlot.start,
              timeEnd: timeSlot.end,
              status: 'not_started'
            });

            console.log(`‚úÖ Ti·∫øt ${period} - ${this.getDayName(dayIndex)}: ${subject.subjectName} (${assignedTeacher.name})`);
            periodIndex++;
          } else {
            console.log(`‚ö†Ô∏è Kh√¥ng c√≥ gi√°o vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng cho m√¥n ${subject.subjectName}`);
            unplacedCount++;
            periodIndex++;
          }
        }
      }

      // Th√™m c√°c ti·∫øt c·ªë ƒë·ªãnh
      this.addFixedPeriods(schedule, classInfo.homeroomTeacher._id);
      
      if (unplacedCount > 0) {
        console.log(`‚ö†Ô∏è Warning: ${unplacedCount} periods could not be scheduled due to constraints`);
      }

      console.log(`üìà ƒê√£ x·∫øp ${periodIndex - unplacedCount}/${subjectPeriods.length} ti·∫øt h·ªçc`);
      
      // Save the fallback schedule
      await schedule.save();
    return schedule;

    } catch (error) {
      throw new Error(`L·ªói t·∫°o th·ªùi kh√≥a bi·ªÉu fallback: ${error.message}`);
    }
  }

  addFixedPeriods(schedule, homeroomTeacherId) {
    schedule.schedule[0].periods.unshift({
      periodNumber: 1,
      subject: null,
      teacher: homeroomTeacherId,
      session: 'morning',
      timeStart: '07:00',
      timeEnd: '07:45',
      status: 'not_started',
      fixed: true,
      specialType: 'flag_ceremony'
    });

    schedule.schedule[5].periods.push({
      periodNumber: 7,
      subject: null,
      teacher: homeroomTeacherId,
      session: 'afternoon',
      timeStart: '14:20',
      timeEnd: '15:05',
      status: 'not_started',
      fixed: true,
      specialType: 'class_meeting'
    });
  }

  getTimeSlot(periodNumber) {
    const timeSlots = [
      { start: '07:00', end: '07:45', session: 'morning' },
      { start: '07:50', end: '08:35', session: 'morning' },
      { start: '08:40', end: '09:25', session: 'morning' },
      { start: '09:45', end: '10:30', session: 'morning' },
      { start: '10:35', end: '11:20', session: 'morning' },
      { start: '13:30', end: '14:15', session: 'afternoon' },
      { start: '14:20', end: '15:05', session: 'afternoon' }
    ];
    return timeSlots[periodNumber - 1] || timeSlots[0];
  }

  extractGradeFromClassName(className) {
    const match = className.match(/^(\d+)/);
    return match ? parseInt(match[1]) : 12;
  }

  getDayName(dayIndex) {
    const days = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'];
    return days[dayIndex] || `Day ${dayIndex + 1}`;
  }

  async getScheduleByClass(classId, academicYear, options = {}) {
    try {
      const query = {
        class: classId,
        academicYear,
        status: 'active'
      };

      if (options.semester) {
        query.semester = options.semester;
      }

      if (options.weekNumber) {
        query.weekNumber = options.weekNumber;
      }

      const schedule = await Schedule.findOne(query)
        .populate('class')
        .populate('schedule.periods.subject')
        .populate('schedule.periods.teacher', 'name email')
        .populate('createdBy', 'name email')
        .lean();

      return schedule;
    } catch (error) {
      throw new Error(`Error fetching schedule: ${error.message}`);
    }
  }

  async updatePeriodStatus(scheduleId, dayOfWeek, periodNumber, status, updateData = {}) {
    try {
      const schedule = await Schedule.findById(scheduleId);
      if (!schedule) {
        throw new Error('Schedule not found');
      }

      const success = schedule.updatePeriodStatus(dayOfWeek, periodNumber, status, updateData);
      if (!success) {
        throw new Error('Period not found or update failed');
      }

      await schedule.save();
      return schedule;
    } catch (error) {
      throw new Error(`Error updating period status: ${error.message}`);
    }
  }

  async getLearningProgress(classId, academicYear) {
    try {
      const schedule = await this.getScheduleByClass(classId, academicYear);
      if (!schedule) {
        throw new Error('Schedule not found');
      }

      const overallProgress = schedule.getLearningProgress();
      const subjectProgress = schedule.getProgressBySubject();

      return {
        overall: overallProgress,
        bySubject: subjectProgress,
        classInfo: {
          className: schedule.class.className,
          academicYear: schedule.academicYear,
          semester: schedule.semester
        }
      };
    } catch (error) {
      throw new Error(`Error getting learning progress: ${error.message}`);
    }
  }
}

module.exports = AdvancedSchedulerService; 