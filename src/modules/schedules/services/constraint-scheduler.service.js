const Lesson = require("../models/lesson.model");
const WeeklySchedule = require("../models/weekly-schedule.model");
const User = require("../../auth/models/user.model");

class ConstraintSchedulerService {
  constructor() {
    // M√¥n h·ªçc ∆∞u ti√™n c·∫ßn c√≥ ti·∫øt ƒë√¥i
    this.PRIORITY_SUBJECTS = ["Mathematics", "Literature", "English"];

    // ƒê·ªô ∆∞u ti√™n c√°c m√¥n h·ªçc
    this.SUBJECT_PRIORITIES = {
      Mathematics: 10,
      Literature: 9,
      English: 8,
      Physics: 7,
      Chemistry: 6,
      Biology: 5,
      History: 4,
      Geography: 3,
      "Physical Education": 2,
      Arts: 1,
    };

    // ƒê·ªãnh nghƒ©a ti·∫øt h·ªçc
    this.MORNING_PERIODS = [1, 2, 3, 4, 5];
    this.AFTERNOON_PERIODS = [6, 7, 8, 9, 10];
    this.BREAK_AFTER_PERIOD = 5; // Ngh·ªâ l·ªõn sau ti·∫øt 5

    // NEW: C·∫•u h√¨nh l·ªãch h·ªçc tu·∫ßn
    this.SCHEDULE_OPTIONS = {
      MONDAY_TO_FRIDAY: {
        days: [0, 1, 2, 3, 4], // Th·ª© 2-6 (dayIndex 0-4)
        classMeetingDay: 4, // Sinh ho·∫°t l·ªõp th·ª© 6 (dayIndex 4)
        classMeetingPeriod: 5,
        name: "Th·ª© 2 - Th·ª© 6",
      },
      MONDAY_TO_SATURDAY: {
        days: [0, 1, 2, 3, 4, 5], // Th·ª© 2-7 (dayIndex 0-5)
        classMeetingDay: 5, // Sinh ho·∫°t l·ªõp th·ª© 7 (dayIndex 5)
        classMeetingPeriod: 5,
        name: "Th·ª© 2 - Th·ª© 7",
      },
    };

    // NEW: Y√™u c·∫ßu t·ªëi thi·ªÉu
    this.MINIMUM_EXTENDED_DAYS = 2; // T·ªëi thi·ªÉu 2 ng√†y h·ªçc >5 ti·∫øt
    this.CORE_PERIODS = [1, 2, 3, 4, 5]; // Ti·∫øt 1-5 ph·∫£i l√† subject
  }

  /**
   * H√ÄM CH√çNH - T·∫°o th·ªùi kh√≥a bi·ªÉu v·ªõi r√†ng bu·ªôc v√† options
   * @param {Object} options - C·∫•u h√¨nh l·ªãch: { scheduleType: 'MONDAY_TO_FRIDAY' | 'MONDAY_TO_SATURDAY' }
   */
  async createConstraintBasedSchedule(
    weeklyScheduleId,
    classId,
    academicYearId,
    weekNum,
    weekStartDate,
    timeSlots,
    subjects,
    homeroomTeacher,
    createdBy,
    options = {}
  ) {
    console.log(
      `\nüéØ B·∫ÆT ƒê·∫¶U T·∫†O TH·ªúI KH√ìA BI·ªÇU V·ªöI R√ÄNG BU·ªòC - Tu·∫ßn ${weekNum}`
    );
    console.log("=".repeat(60));

    // X√°c ƒë·ªãnh lo·∫°i l·ªãch h·ªçc
    const scheduleType = options.scheduleType || "MONDAY_TO_SATURDAY";
    const scheduleConfig = this.SCHEDULE_OPTIONS[scheduleType];
    console.log(`üìÖ Lo·∫°i l·ªãch: ${scheduleConfig.name}`);

    // Kh·ªüi t·∫°o h·ªá th·ªëng r√†ng bu·ªôc
    const constraints = await this.initializeConstraintSystem(
      classId,
      subjects,
      homeroomTeacher,
      timeSlots,
      scheduleConfig
    );

    // Th·ª±c hi·ªán c√°c giai ƒëo·∫°n l·∫≠p l·ªãch
    await this.scheduleFixedPeriods(
      constraints,
      weekStartDate,
      timeSlots,
      homeroomTeacher,
      createdBy,
      academicYearId
    );
    await this.scheduleDoublePeriods(
      constraints,
      weekStartDate,
      timeSlots,
      createdBy,
      academicYearId
    );
    await this.scheduleSinglePeriods(
      constraints,
      weekStartDate,
      timeSlots,
      createdBy,
      academicYearId
    );
    await this.ensureCorePeriodRequirements(
      constraints,
      weekStartDate,
      timeSlots,
      createdBy,
      academicYearId
    );
    await this.ensureMinimumExtendedDays(
      constraints,
      weekStartDate,
      timeSlots,
      createdBy,
      academicYearId
    );
    await this.fillEmptySlots(
      constraints,
      weekStartDate,
      timeSlots,
      homeroomTeacher,
      createdBy,
      academicYearId
    );

    // Ki·ªÉm tra v√† b√°o c√°o
    const validationResult = this.validateAllConstraints(constraints);
    const lessons = await this.saveLessonsToWeeklySchedule(
      constraints,
      weeklyScheduleId
    );
    this.printSchedulingReport(constraints, validationResult);

    return lessons;
  }

  /**
   * Kh·ªüi t·∫°o h·ªá th·ªëng theo d√µi r√†ng bu·ªôc v·ªõi c·∫•u h√¨nh l·ªãch
   */
  async initializeConstraintSystem(
    classId,
    subjects,
    homeroomTeacher,
    timeSlots,
    scheduleConfig
  ) {
    const constraints = {
      classId,
      subjects,
      homeroomTeacher,
      timeSlots,
      scheduleConfig,
      // Ma tr·∫≠n l·ªãch h·ªçc: [ng√†y][ti·∫øt] = lesson ho·∫∑c null
      schedule: Array(7)
        .fill()
        .map(() => Array(10).fill(null)),
      // Theo d√µi l·ªãch gi√°o vi√™n
      teacherSchedules: new Map(),
      // Y√™u c·∫ßu m√¥n h·ªçc
      subjectRequirements: new Map(),
      // Vi ph·∫°m r√†ng bu·ªôc
      violations: [],
      // Th·ªëng k√™
      stats: {
        totalLessons: 0,
        doublePeriods: 0,
        prioritySubjectsInMorning: 0,
        extendedDays: 0,
        totalWeeklyHours: 0,
        scheduledWeeklyHours: 0,
      },
    };

    await this.initializeTeacherSchedules(constraints);
    this.initializeSubjectRequirements(constraints);

    console.log(
      `‚úÖ H·ªá th·ªëng kh·ªüi t·∫°o: ${subjects.length} m√¥n h·ªçc, ${constraints.teacherSchedules.size} gi√°o vi√™n`
    );
    console.log(
      `üìä T·ªïng ti·∫øt/tu·∫ßn c·∫ßn x·∫øp: ${constraints.stats.totalWeeklyHours}`
    );
    return constraints;
  }

  /**
   * Kh·ªüi t·∫°o l·ªãch gi√°o vi√™n v·ªõi gi·ªõi h·∫°n kh·ªëi l∆∞·ª£ng
   */
  async initializeTeacherSchedules(constraints) {
    const teacherIds = new Set();

    // Th√™m gi√°o vi√™n ch·ªß nhi·ªám
    if (constraints.homeroomTeacher) {
      teacherIds.add(constraints.homeroomTeacher._id.toString());
    }

    // Th√™m gi√°o vi√™n b·ªô m√¥n
    for (const subject of constraints.subjects) {
      const teacher = await this.findSpecializedTeacher(subject._id);
      if (teacher) teacherIds.add(teacher._id.toString());
    }

    // Kh·ªüi t·∫°o l·ªãch cho t·ª´ng gi√°o vi√™n
    for (const teacherId of teacherIds) {
      constraints.teacherSchedules.set(teacherId, {
        schedule: Array(7)
          .fill()
          .map(() => Array(10).fill(false)),
        workload: { daily: Array(7).fill(0), weekly: 0 },
        constraints: {
          maxLessonsPerDay: 8,
          maxLessonsPerWeek: 30,
          unavailableTimes: [],
        },
      });
    }
  }

  /**
   * NEW: Kh·ªüi t·∫°o y√™u c·∫ßu m√¥n h·ªçc v·ªõi ƒë·∫ßy ƒë·ªß weeklyHours
   */
  initializeSubjectRequirements(constraints) {
    let totalWeeklyHours = 0;

    constraints.subjects.forEach((subject) => {
      const weeklyHours = subject.weeklyHours || 3;
      const isPriority = this.PRIORITY_SUBJECTS.includes(subject.subjectName);

      // T√≠nh s·ªë ti·∫øt ƒë√¥i d·ª±a tr√™n t·ªïng s·ªë ti·∫øt v√† ∆∞u ti√™n
      let targetDoublePeriods = 0;
      if (weeklyHours >= 4) {
        // 4+ ti·∫øt ‚Üí 2 ti·∫øt ƒë√¥i (s·ª≠ d·ª•ng h·∫øt 4 ti·∫øt)
        targetDoublePeriods = 2;
      } else if (weeklyHours >= 3 && isPriority) {
        // 3 ti·∫øt m√¥n ∆∞u ti√™n ‚Üí 1 ti·∫øt ƒë√¥i + 1 ti·∫øt ƒë∆°n
        targetDoublePeriods = 1;
      } else if (weeklyHours >= 2 && isPriority) {
        // 2 ti·∫øt m√¥n ∆∞u ti√™n ‚Üí 1 ti·∫øt ƒë√¥i
        targetDoublePeriods = 1;
      }

      constraints.subjectRequirements.set(subject._id.toString(), {
        subject,
        required: weeklyHours,
        scheduled: 0,
        doublePeriods: 0,
        isPriority,
        targetDoublePeriods,
        maxDoublePeriodsPerDay: 1,
        dailyScheduled: Array(7).fill(0),
        // NEW: Theo d√µi ti·∫øt core (1-5) vs ti·∫øt chi·ªÅu (6-10)
        corePeriodsScheduled: 0,
        afternoonPeriodsScheduled: 0,
      });

      totalWeeklyHours += weeklyHours;
    });

    constraints.stats.totalWeeklyHours = totalWeeklyHours;
    console.log(
      `üìä T·ªïng ti·∫øt/tu·∫ßn theo subject.weeklyHours: ${totalWeeklyHours} ti·∫øt`
    );
  }

  /**
   * GIAI ƒêO·∫†N 1: X·∫øp ti·∫øt c·ªë ƒë·ªãnh v·ªõi options
   */
  async scheduleFixedPeriods(
    constraints,
    weekStartDate,
    timeSlots,
    homeroomTeacher,
    createdBy,
    academicYearId
  ) {
    console.log("üè∑Ô∏è Giai ƒëo·∫°n 1: X·∫øp ti·∫øt c·ªë ƒë·ªãnh...");

    const { classMeetingDay, classMeetingPeriod } = constraints.scheduleConfig;

    // Ch√†o c·ªù th·ª© 2 ti·∫øt 1
    const mondayDate = new Date(weekStartDate);
    const flagLesson = await this.createLesson({
      classId: constraints.classId,
      academicYearId,
      dayIndex: 0,
      period: 1,
      type: "fixed",
      fixedInfo: { type: "flag_ceremony", description: "Ch√†o c·ªù" },
      teacher: homeroomTeacher,
      date: mondayDate,
      timeSlot: timeSlots[0],
      createdBy,
    });

    constraints.schedule[0][0] = flagLesson;
    this.bookTeacherSlot(constraints, homeroomTeacher._id, 0, 1);

    // Sinh ho·∫°t l·ªõp theo config
    const classMeetingDate = new Date(weekStartDate);
    classMeetingDate.setDate(weekStartDate.getDate() + classMeetingDay);
    const classMeetingLesson = await this.createLesson({
      classId: constraints.classId,
      academicYearId,
      dayIndex: classMeetingDay,
      period: classMeetingPeriod,
      type: "fixed",
      fixedInfo: { type: "class_meeting", description: "Sinh ho·∫°t l·ªõp" },
      teacher: homeroomTeacher,
      date: classMeetingDate,
      timeSlot: timeSlots[classMeetingPeriod - 1],
      createdBy,
    });

    constraints.schedule[classMeetingDay][classMeetingPeriod - 1] =
      classMeetingLesson;
    this.bookTeacherSlot(
      constraints,
      homeroomTeacher._id,
      classMeetingDay,
      classMeetingPeriod
    );

    console.log(
      `‚úÖ Ti·∫øt c·ªë ƒë·ªãnh: Ch√†o c·ªù (T2-T1), Sinh ho·∫°t l·ªõp (${
        constraints.scheduleConfig.name.split(" - ")[1]
      }-T${classMeetingPeriod})`
    );
  }

  /**
   * GIAI ƒêO·∫†N 2: X·∫øp ti·∫øt ƒë√¥i theo target (4 ti·∫øt ‚Üí 2 ti·∫øt ƒë√¥i ·ªü 2 ng√†y kh√°c nhau)
   */
  async scheduleDoublePeriods(
    constraints,
    weekStartDate,
    timeSlots,
    createdBy,
    academicYearId
  ) {
    console.log("üîó Giai ƒëo·∫°n 2: X·∫øp ti·∫øt ƒë√¥i (VƒÉn, To√°n, Anh)...");

    // L·ªçc c√°c m√¥n c·∫ßn ti·∫øt ƒë√¥i
    const subjectsNeedingDouble = constraints.subjects.filter((subject) => {
      const requirement = constraints.subjectRequirements.get(
        subject._id.toString()
      );
      return requirement.targetDoublePeriods > 0;
    });

    // S·∫Øp x·∫øp ∆∞u ti√™n: m√¥n c√≥ nhi·ªÅu ti·∫øt ƒë√¥i nh·∫•t tr∆∞·ªõc
    subjectsNeedingDouble.sort((a, b) => {
      const reqA = constraints.subjectRequirements.get(a._id.toString());
      const reqB = constraints.subjectRequirements.get(b._id.toString());
      return reqB.targetDoublePeriods - reqA.targetDoublePeriods;
    });

    for (const subject of subjectsNeedingDouble) {
      const requirement = constraints.subjectRequirements.get(
        subject._id.toString()
      );
      const teacher = await this.findSpecializedTeacher(subject._id);

      if (!teacher) {
        constraints.violations.push({
          type: "NO_SPECIALIZED_TEACHER",
          subject: subject.subjectName,
          priority: "CRITICAL",
        });
        continue;
      }

      // X·∫øp s·ªë ti·∫øt ƒë√¥i theo target (v√≠ d·ª•: To√°n 4 ti·∫øt ‚Üí 2 ti·∫øt ƒë√¥i ·ªü 2 ng√†y kh√°c nhau)
      for (let dp = 0; dp < requirement.targetDoublePeriods; dp++) {
        const slot = this.findBestDoubleSlot(constraints, subject, teacher);

        if (slot) {
          await this.scheduleDoubleLesson(
            constraints,
            subject,
            teacher,
            slot.dayIndex,
            slot.startPeriod,
            weekStartDate,
            timeSlots,
            createdBy,
            academicYearId
          );

          requirement.doublePeriods++;
          requirement.scheduled += 2;
          constraints.stats.doublePeriods++;

          // Ki·ªÉm tra c√≥ trong bu·ªïi s√°ng kh√¥ng
          if (this.MORNING_PERIODS.includes(slot.startPeriod)) {
            constraints.stats.prioritySubjectsInMorning++;
          }

          console.log(
            `‚úÖ Ti·∫øt ƒë√¥i: ${subject.subjectName} - Ng√†y ${
              slot.dayIndex + 1
            }, T${slot.startPeriod}-${slot.startPeriod + 1}`
          );
        } else {
          console.log(
            `‚ö†Ô∏è Kh√¥ng th·ªÉ x·∫øp ti·∫øt ƒë√¥i ${dp + 1}/${
              requirement.targetDoublePeriods
            } cho ${subject.subjectName}`
          );
          constraints.violations.push({
            type: "CANNOT_SCHEDULE_DOUBLE_PERIOD",
            subject: subject.subjectName,
            reason: `Kh√¥ng t√¨m ƒë∆∞·ª£c khe cho ti·∫øt ƒë√¥i ${dp + 1}/${
              requirement.targetDoublePeriods
            }`,
            priority: "HIGH",
          });
        }
      }
    }
  }

  /**
   * T√¨m khe tr·ªëng t·ªët nh·∫•t cho ti·∫øt ƒë√¥i - R√ÉI ƒê·ªÄU T2-T6, M·ªñI NG√ÄY T·ªêI ƒêA 1 C·∫∂P
   */
  findBestDoubleSlot(constraints, subject, teacher) {
    const requirement = constraints.subjectRequirements.get(
      subject._id.toString()
    );
    const workingDays = constraints.scheduleConfig.days; // L·∫•y ng√†y l√†m vi·ªác t·ª´ config

    // R√ÄNG BU·ªòC: Kh√¥ng x·∫øp ti·∫øt ƒë√¥i qua gi·ªù ngh·ªâ l·ªõn (sau ti·∫øt 5)
    const morningSlots = [
      [1, 2],
      [2, 3],
      [3, 4],
      [4, 5],
    ];
    const afternoonSlots = [
      [6, 7],
      [7, 8],
      [8, 9],
    ];

    // R√ÄNG BU·ªòC: M√¥n ∆∞u ti√™n v√†o bu·ªïi s√°ng
    const slotsToCheck = this.PRIORITY_SUBJECTS.includes(subject.subjectName)
      ? [...morningSlots, ...afternoonSlots]
      : [...afternoonSlots, ...morningSlots];

    // T·∫°o danh s√°ch c√°c slot kh·∫£ d·ª•ng v·ªõi ƒëi·ªÉm s·ªë
    const availableSlots = [];

    // Ki·ªÉm tra c√°c ng√†y l√†m vi·ªác theo config
    for (const dayIndex of workingDays) {
      // R√ÄNG BU·ªòC: Ki·ªÉm tra kh√¥ng c√≥ ti·∫øt n√†o c·ªßa m√¥n n√†y trong ng√†y
      if (requirement.dailyScheduled[dayIndex] > 0) {
        continue; // Skip this day if subject already has lessons
      }

      // R√ÄNG BU·ªòC M·ªöI: Ki·ªÉm tra ng√†y n√†y ƒë√£ c√≥ ti·∫øt ƒë√¥i ch∆∞a (t·ªëi ƒëa 1 c·∫∑p/ng√†y)
      if (this.hasDoublePeriodInDay(constraints, dayIndex)) {
        continue; // Skip if this day already has a double period
      }

      for (const [period1, period2] of slotsToCheck) {
        if (
          this.canScheduleDoubleSlot(
            constraints,
            teacher._id,
            dayIndex,
            period1,
            period2
          )
        ) {
          // T√≠nh ƒëi·ªÉm ∆∞u ti√™n ƒë·ªÉ r√£i ƒë·ªÅu
          let score = this.calculateDoubleSlotScore(
            constraints,
            dayIndex,
            period1,
            subject
          );

          availableSlots.push({
            dayIndex,
            startPeriod: period1,
            score,
          });
        }
      }
    }

    // S·∫Øp x·∫øp theo ƒëi·ªÉm (cao nh·∫•t tr∆∞·ªõc)
    availableSlots.sort((a, b) => b.score - a.score);

    return availableSlots.length > 0 ? availableSlots[0] : null;
  }

  /**
   * Ki·ªÉm tra xem ng√†y ƒë√£ c√≥ ti·∫øt ƒë√¥i ch∆∞a
   */
  hasDoublePeriodInDay(constraints, dayIndex) {
    // Ki·ªÉm tra c√°c c·∫∑p ti·∫øt li√™n ti·∫øp c√≥ c√πng m√¥n kh√¥ng
    for (let period = 1; period <= 9; period++) {
      const lesson1 = constraints.schedule[dayIndex][period - 1];
      const lesson2 = constraints.schedule[dayIndex][period];

      if (
        lesson1 &&
        lesson2 &&
        lesson1.subject &&
        lesson2.subject &&
        lesson1.subject.toString() === lesson2.subject.toString()
      ) {
        return true; // ƒê√£ c√≥ ti·∫øt ƒë√¥i
      }
    }
    return false;
  }

  /**
   * T√≠nh ƒëi·ªÉm cho slot ti·∫øt ƒë√¥i ƒë·ªÉ r√£i ƒë·ªÅu
   */
  calculateDoubleSlotScore(constraints, dayIndex, period, subject) {
    let score = 0;

    // ƒê·∫øm s·ªë ti·∫øt ƒë√¥i ƒë√£ c√≥ trong ng√†y n√†y
    let doubleLessonsThisDay = 0;
    for (let p = 0; p < 10; p++) {
      if (constraints.schedule[dayIndex][p] !== null) {
        doubleLessonsThisDay++;
      }
    }

    // ∆Øu ti√™n ng√†y c√≥ √≠t ti·∫øt ƒë√¥i h∆°n (ƒë·ªÉ r√£i ƒë·ªÅu)
    score += (10 - doubleLessonsThisDay) * 20;

    // ∆Øu ti√™n bu·ªïi s√°ng cho m√¥n quan tr·ªçng
    if (this.PRIORITY_SUBJECTS.includes(subject.subjectName) && period <= 5) {
      score += 30;
    }

    // ∆Øu ti√™n c√°c ng√†y T2, T4, T6 cho ti·∫øt ƒë√¥i (r√£i ƒë·ªÅu trong tu·∫ßn)
    if ([0, 2, 4].includes(dayIndex)) {
      score += 25;
    }

    // Tr√°nh ti·∫øt ƒë·∫ßu v√† cu·ªëi ng√†y
    if (period === 1 || period >= 9) {
      score -= 10;
    }

    return score;
  }

  /**
   * Ki·ªÉm tra c√≥ th·ªÉ x·∫øp ti·∫øt ƒë√¥i kh√¥ng
   */
  canScheduleDoubleSlot(constraints, teacherId, dayIndex, period1, period2) {
    // R√ÄNG BU·ªòC: M·ªôt l·ªõp t·∫°i m·ªôt th·ªùi ƒëi·ªÉm CH·ªà h·ªçc 1 m√¥n
    if (
      constraints.schedule[dayIndex][period1 - 1] !== null ||
      constraints.schedule[dayIndex][period2 - 1] !== null
    )
      return false;

    // R√ÄNG BU·ªòC: M·ªôt gi√°o vi√™n KH√îNG ƒë∆∞·ª£c d·∫°y 2 ti·∫øt c√πng l√∫c
    const teacherSchedule = constraints.teacherSchedules.get(
      teacherId.toString()
    );
    if (!teacherSchedule) return false;

    if (
      teacherSchedule.schedule[dayIndex][period1 - 1] ||
      teacherSchedule.schedule[dayIndex][period2 - 1]
    )
      return false;

    // R√ÄNG BU·ªòC: Kh√¥ng v∆∞·ª£t qu√° maxLessonsPerDay
    if (
      teacherSchedule.workload.daily[dayIndex] + 2 >
      teacherSchedule.constraints.maxLessonsPerDay
    )
      return false;

    return true;
  }

  /**
   * X·∫øp ti·∫øt ƒë√¥i v·ªõi li√™n k·∫øt ƒë√∫ng
   */
  async scheduleDoubleLesson(
    constraints,
    subject,
    teacher,
    dayIndex,
    startPeriod,
    weekStartDate,
    timeSlots,
    createdBy,
    academicYearId
  ) {
    const date = new Date(weekStartDate);
    date.setDate(weekStartDate.getDate() + dayIndex);

    const lesson1 = await this.createLesson({
      classId: constraints.classId,
      academicYearId,
      dayIndex,
      period: startPeriod,
      type: "regular",
      subject,
      teacher,
      date,
      timeSlot: timeSlots[startPeriod - 1],
      createdBy,
      notes: `Ti·∫øt ƒë√¥i - Ph·∫ßn 1/2`,
    });

    const lesson2 = await this.createLesson({
      classId: constraints.classId,
      academicYearId,
      dayIndex,
      period: startPeriod + 1,
      type: "regular",
      subject,
      teacher,
      date,
      timeSlot: timeSlots[startPeriod],
      createdBy,
      notes: `Ti·∫øt ƒë√¥i - Ph·∫ßn 2/2`,
    });

    constraints.schedule[dayIndex][startPeriod - 1] = lesson1;
    constraints.schedule[dayIndex][startPeriod] = lesson2;

    this.bookTeacherSlot(constraints, teacher._id, dayIndex, startPeriod);
    this.bookTeacherSlot(constraints, teacher._id, dayIndex, startPeriod + 1);

    // Update subject requirements including daily tracking
    const requirement = constraints.subjectRequirements.get(
      subject._id.toString()
    );
    requirement.scheduled += 2;
    requirement.doublePeriods += 1;
    requirement.dailyScheduled[dayIndex] += 2; // Track daily lessons

    return [lesson1, lesson2];
  }

  /**
   * GIAI ƒêO·∫†N 3: X·∫øp ti·∫øt ƒë∆°n - ƒê·∫¢M B·∫¢O TI·∫æT 1-5 LU√îN C√ì SUBJECT...
   */
  async scheduleSinglePeriods(
    constraints,
    weekStartDate,
    timeSlots,
    createdBy,
    academicYearId
  ) {
    console.log(
      "üìö Giai ƒëo·∫°n 3: X·∫øp ti·∫øt ƒë∆°n - ƒê·∫¢M B·∫¢O TI·∫æT 1-5 LU√îN C√ì SUBJECT..."
    );

    const remainingPeriods = [];

    // T·∫°o danh s√°ch ti·∫øt c√≤n l·∫°i c·∫ßn x·∫øp
    for (const subject of constraints.subjects) {
      const requirement = constraints.subjectRequirements.get(
        subject._id.toString()
      );
      const remaining = requirement.required - requirement.scheduled;

      for (let i = 0; i < remaining; i++) {
        const teacher = await this.findSpecializedTeacher(subject._id);
        if (teacher) {
          remainingPeriods.push({
            subject,
            teacher,
            priority: this.SUBJECT_PRIORITIES[subject.subjectName] || 1,
          });
        }
      }
    }

    // S·∫Øp x·∫øp theo ƒë·ªô ∆∞u ti√™n
    remainingPeriods.sort((a, b) => b.priority - a.priority);

    // GIAI ƒêO·∫†N 3A: B·∫ÆT BU·ªòC PH·∫¢I ƒêI·ªÄN TI·∫æT 1-5 (CORE PERIODS)
    console.log("üèõÔ∏è GIAI ƒêO·∫†N 3A: B·∫ÆT BU·ªòC ƒëi·ªÅn ti·∫øt 1-5 (CORE PERIODS)...");
    await this.enforceCorePeriods(
      constraints,
      remainingPeriods,
      weekStartDate,
      timeSlots,
      createdBy,
      academicYearId
    );

    // Filter out scheduled periods
    const stillRemaining = remainingPeriods.filter((period) => {
      const requirement = constraints.subjectRequirements.get(
        period.subject._id.toString()
      );
      return requirement.scheduled < requirement.required;
    });

    // GIAI ƒêO·∫†N 3B: ƒêi·ªÅn ti·∫øt c√≤n l·∫°i v√†o ti·∫øt 6-8 (∆∞u ti√™n), 9-10 (h·∫°n ch·∫ø)
    console.log(
      "üåÜ GIAI ƒêO·∫†N 3B: ƒêi·ªÅn ti·∫øt c√≤n l·∫°i - ∆Øu ti√™n T6-8, h·∫°n ch·∫ø T9-10..."
    );

    // ∆Øu ti√™n ti·∫øt 6-8 tr∆∞·ªõc
    for (const period of stillRemaining) {
      const requirement = constraints.subjectRequirements.get(
        period.subject._id.toString()
      );
      if (requirement.scheduled >= requirement.required) continue;

      const slot = this.findBestSingleSlotInRange(
        constraints,
        period.subject,
        period.teacher,
        6,
        8
      );

      if (slot) {
        await this.scheduleSingleLesson(
          constraints,
          period.subject,
          period.teacher,
          slot.dayIndex,
          slot.period,
          weekStartDate,
          timeSlots,
          createdBy,
          academicYearId
        );

        requirement.scheduled++;
        console.log(
          `‚úÖ Ti·∫øt ƒë∆°n (T6-8): ${period.subject.subjectName} - Ng√†y ${
            slot.dayIndex + 1
          }, T${slot.period}`
        );
      }
    }

    // Sau ƒë√≥ m·ªõi d√πng ti·∫øt 9-10 n·∫øu c·∫ßn thi·∫øt
    for (const period of stillRemaining) {
      const requirement = constraints.subjectRequirements.get(
        period.subject._id.toString()
      );
      if (requirement.scheduled >= requirement.required) continue;

      const slot = this.findBestSingleSlotInRange(
        constraints,
        period.subject,
        period.teacher,
        9,
        10
      );

      if (slot) {
        await this.scheduleSingleLesson(
          constraints,
          period.subject,
          period.teacher,
          slot.dayIndex,
          slot.period,
          weekStartDate,
          timeSlots,
          createdBy,
          academicYearId
        );

        requirement.scheduled++;
        console.log(
          `‚ö†Ô∏è Ti·∫øt ƒë∆°n (T9-10): ${period.subject.subjectName} - Ng√†y ${
            slot.dayIndex + 1
          }, T${slot.period}`
        );
      } else {
        constraints.violations.push({
          type: "CANNOT_SCHEDULE_SINGLE_PERIOD",
          subject: period.subject.subjectName,
          reason: "Kh√¥ng t√¨m ƒë∆∞·ª£c khe tr·ªëng ph√π h·ª£p",
          priority: "MEDIUM",
        });
      }
    }

    // Ki·ªÉm tra v√† ƒë·∫£m b·∫£o √≠t nh·∫•t 2 ng√†y c√≥ > 5 ti·∫øt
    await this.ensureMinimumExtendedDays(
      constraints,
      weekStartDate,
      timeSlots,
      createdBy,
      academicYearId
    );
  }

  /**
   * M·ªöI: B·∫ÆT BU·ªòC ƒëi·ªÅn ti·∫øt 1-5 (th·ª© 2-6) v·ªõi subject
   */
  async enforceCorePeriods(
    constraints,
    remainingPeriods,
    weekStartDate,
    timeSlots,
    createdBy,
    academicYearId
  ) {
    console.log("üèõÔ∏è B·∫Øt bu·ªôc ƒëi·ªÅn t·∫•t c·∫£ ti·∫øt 1-5 (T2-T6) v·ªõi subject...");

    // ƒê·∫øm s·ªë slot tr·ªëng trong ti·∫øt 1-5
    let emptyCoreSlots = 0;
    const coreSlotsNeeded = [];

    for (let dayIndex = 0; dayIndex < 5; dayIndex++) {
      // T2-T6
      for (let period = 1; period <= 5; period++) {
        if (constraints.schedule[dayIndex][period - 1] === null) {
          emptyCoreSlots++;
          coreSlotsNeeded.push({ dayIndex, period });
        }
      }
    }

    console.log(
      `üéØ C·∫ßn ƒëi·ªÅn ${emptyCoreSlots} ti·∫øt tr·ªëng trong core periods (T1-5)`
    );

    // N·∫øu kh√¥ng ƒë·ªß subject ƒë·ªÉ ƒëi·ªÅn, ph·∫£i t·∫°o th√™m
    while (coreSlotsNeeded.length > 0 && remainingPeriods.length > 0) {
      const slot = coreSlotsNeeded.shift();
      const period = remainingPeriods.shift();

      if (
        this.canScheduleSingleSlot(
          constraints,
          period.subject,
          period.teacher._id,
          slot.dayIndex,
          slot.period
        )
      ) {
        await this.scheduleSingleLesson(
          constraints,
          period.subject,
          period.teacher,
          slot.dayIndex,
          slot.period,
          weekStartDate,
          timeSlots,
          createdBy,
          academicYearId
        );

        const requirement = constraints.subjectRequirements.get(
          period.subject._id.toString()
        );
        requirement.scheduled++;
        requirement.dailyScheduled[slot.dayIndex]++;

        console.log(
          `üèõÔ∏è CORE PERIOD: ${period.subject.subjectName} - Ng√†y ${
            slot.dayIndex + 1
          }, T${slot.period}`
        );
      } else {
        // N·∫øu kh√¥ng th·ªÉ x·∫øp, th·ª≠ v·ªõi subject kh√°c
        remainingPeriods.push(period);
        coreSlotsNeeded.push(slot);

        // Tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
        if (remainingPeriods.length < coreSlotsNeeded.length) {
          console.log(
            "‚ö†Ô∏è Kh√¥ng ƒë·ªß subject ƒë·ªÉ ƒëi·ªÅn t·∫•t c·∫£ core periods, s·∫Ω t·∫°o subject b·ªï sung..."
          );
          await this.createSupplementarySubjectsForCorePeriods(
            constraints,
            coreSlotsNeeded,
            weekStartDate,
            timeSlots,
            createdBy,
            academicYearId
          );
          break;
        }
      }
    }

    // N·∫øu v·∫´n c√≤n core slots tr·ªëng, c·∫ßn x·ª≠ l√Ω ƒë·∫∑c bi·ªát
    if (coreSlotsNeeded.length > 0) {
      console.log(
        `‚ö†Ô∏è V·∫´n c√≤n ${coreSlotsNeeded.length} core slots tr·ªëng, ƒëang x·ª≠ l√Ω...`
      );
      await this.createSupplementarySubjectsForCorePeriods(
        constraints,
        coreSlotsNeeded,
        weekStartDate,
        timeSlots,
        createdBy,
        academicYearId
      );
    }
  }

  /**
   * M·ªöI: T·∫°o subject b·ªï sung ƒë·ªÉ ƒëi·ªÅn core periods
   */
  async createSupplementarySubjectsForCorePeriods(
    constraints,
    coreSlotsNeeded,
    weekStartDate,
    timeSlots,
    createdBy,
    academicYearId
  ) {
    console.log("üîß T·∫°o subject b·ªï sung ƒë·ªÉ ƒëi·ªÅn core periods...");

    // T√¨m subject c√≥ th·ªÉ m·ªü r·ªông th√™m ti·∫øt
    const extensibleSubjects = constraints.subjects.filter((subject) => {
      const requirement = constraints.subjectRequirements.get(
        subject._id.toString()
      );
      return requirement.scheduled >= requirement.required; // ƒê√£ ƒë·ªß ti·∫øt nh∆∞ng c√≥ th·ªÉ th√™m
    });

    // S·∫Øp x·∫øp theo ƒë·ªô ∆∞u ti√™n
    extensibleSubjects.sort((a, b) => {
      const priorityA = this.SUBJECT_PRIORITIES[a.subjectName] || 1;
      const priorityB = this.SUBJECT_PRIORITIES[b.subjectName] || 1;
      return priorityB - priorityA;
    });

    for (const slot of coreSlotsNeeded) {
      let scheduled = false;

      // Th·ª≠ t·ª´ng subject c√≥ th·ªÉ m·ªü r·ªông
      for (const subject of extensibleSubjects) {
        const teacher = await this.findSpecializedTeacher(subject._id);
        if (
          teacher &&
          this.canScheduleSingleSlot(
            constraints,
            subject,
            teacher._id,
            slot.dayIndex,
            slot.period
          )
        ) {
          await this.scheduleSingleLesson(
            constraints,
            subject,
            teacher,
            slot.dayIndex,
            slot.period,
            weekStartDate,
            timeSlots,
            createdBy,
            academicYearId
          );

          const requirement = constraints.subjectRequirements.get(
            subject._id.toString()
          );
          requirement.scheduled++;
          requirement.dailyScheduled[slot.dayIndex]++;

          console.log(
            `üîß SUPPLEMENTARY: ${subject.subjectName} - Ng√†y ${
              slot.dayIndex + 1
            }, T${slot.period}`
          );
          scheduled = true;
          break;
        }
      }

      if (!scheduled) {
        console.log(
          `‚ùå Kh√¥ng th·ªÉ ƒëi·ªÅn slot: Ng√†y ${slot.dayIndex + 1}, T${slot.period}`
        );
        constraints.violations.push({
          type: "CANNOT_FILL_CORE_PERIOD",
          dayIndex: slot.dayIndex,
          period: slot.period,
          reason: "Kh√¥ng c√≥ subject ph√π h·ª£p",
          priority: "CRITICAL",
        });
      }
    }
  }

  /**
   * T√¨m khe tr·ªëng t·ªët nh·∫•t cho ti·∫øt ƒë∆°n - CH·ªà T2-T6
   */
  findBestSingleSlot(constraints, subject, teacher) {
    return this.findBestSingleSlotInRange(constraints, subject, teacher, 1, 10);
  }

  /**
   * T√¨m khe tr·ªëng t·ªët nh·∫•t cho ti·∫øt ƒë∆°n trong kho·∫£ng ti·∫øt nh·∫•t ƒë·ªãnh
   */
  findBestSingleSlotInRange(
    constraints,
    subject,
    teacher,
    startPeriod,
    endPeriod
  ) {
    const requirement = constraints.subjectRequirements.get(
      subject._id.toString()
    );
    const workingDays = constraints.scheduleConfig.days; // L·∫•y ng√†y l√†m vi·ªác t·ª´ config
    const slots = [];

    // T·∫°o danh s√°ch t·∫•t c·∫£ khe c√≥ th·ªÉ - theo ng√†y l√†m vi·ªác
    for (const dayIndex of workingDays) {
      // R√ÄNG BU·ªòC: ∆Øu ti√™n ng√†y ch∆∞a c√≥ m√¥n n√†y
      const hasSubjectToday = requirement.dailyScheduled[dayIndex] > 0;

      for (let period = startPeriod; period <= endPeriod; period++) {
        if (
          this.canScheduleSingleSlot(
            constraints,
            subject,
            teacher._id,
            dayIndex,
            period
          )
        ) {
          let score = this.calculateSlotScore(
            constraints,
            subject,
            teacher,
            dayIndex,
            period
          );

          // Bonus ƒëi·ªÉm cho ng√†y ch∆∞a c√≥ m√¥n n√†y
          if (!hasSubjectToday) {
            score += 100;
          }

          // BONUS C·ª∞C L·ªöN cho ti·∫øt 1-5 ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n ƒë·∫ßy
          if (period >= 1 && period <= 5) {
            score += 500; // TƒÉng t·ª´ 200 l√™n 500
          }

          // Penalty cho ti·∫øt 9-10 ƒë·ªÉ h·∫°n ch·∫ø s·ª≠ d·ª•ng
          if (period >= 9 && period <= 10) {
            score -= 100;
          }

          // Bonus trung b√¨nh cho ti·∫øt 6-8
          if (period >= 6 && period <= 8) {
            score += 50;
          }

          // Bonus cho vi·ªác r√£i ƒë·ªÅu qua c√°c ng√†y
          let lessonsThisDay = 0;
          for (let p = 0; p < 10; p++) {
            if (constraints.schedule[dayIndex][p] !== null) {
              lessonsThisDay++;
            }
          }
          // ∆Øu ti√™n ng√†y c√≥ √≠t ti·∫øt h∆°n
          score += (10 - lessonsThisDay) * 15;

          // CRITICAL: N·∫øu ƒë√¢y l√† core period (1-5) v√† slot tr·ªëng, bonus c·ª±c l·ªõn
          if (
            period >= 1 &&
            period <= 5 &&
            constraints.schedule[dayIndex][period - 1] === null
          ) {
            score += 1000; // Bonus c·ª±c l·ªõn
          }

          slots.push({
            dayIndex,
            period,
            score,
          });
        }
      }
    }

    // S·∫Øp x·∫øp theo ƒëi·ªÉm (cao nh·∫•t tr∆∞·ªõc)
    slots.sort((a, b) => b.score - a.score);
    return slots.length > 0 ? slots[0] : null;
  }

  /**
   * GIAI ƒêO·∫†N 4: ƒê·∫£m b·∫£o ti·∫øt 1-5 lu√¥n c√≥ m√¥n h·ªçc (kh√¥ng ƒë∆∞·ª£c tr·ªëng)
   */
  async ensureCorePeriodRequirements(
    constraints,
    weekStartDate,
    timeSlots,
    createdBy,
    academicYearId
  ) {
    console.log("üéØ Giai ƒëo·∫°n 4: ƒê·∫£m b·∫£o ti·∫øt 1-5 lu√¥n c√≥ m√¥n h·ªçc...");

    const workingDays = constraints.scheduleConfig.days;
    let corePeriodsFixed = 0;

    // Ki·ªÉm tra t·ª´ng ng√†y l√†m vi·ªác
    for (const dayIndex of workingDays) {
      // Ki·ªÉm tra ti·∫øt 1-5 c·ªßa ng√†y n√†y
      for (let period = 1; period <= this.CORE_PERIODS.length; period++) {
        const currentLesson = constraints.schedule[dayIndex][period - 1];

        if (currentLesson === null) {
          // T√¨m m√¥n h·ªçc ph√π h·ª£p ƒë·ªÉ ƒëi·ªÅn v√†o khe tr·ªëng
          const suitableSubject = this.findSubjectForCorePeriod(
            constraints,
            dayIndex,
            period
          );

          if (suitableSubject) {
            const teacher = await this.findSpecializedTeacher(
              suitableSubject._id
            );

            if (
              teacher &&
              this.canScheduleSingleSlot(
                constraints,
                suitableSubject,
                teacher._id,
                dayIndex,
                period
              )
            ) {
              // T·∫°o ti·∫øt h·ªçc b·ªï sung
              await this.scheduleSingleLesson(
                constraints,
                suitableSubject,
                teacher,
                dayIndex,
                period,
                weekStartDate,
                timeSlots,
                createdBy,
                academicYearId
              );

              const requirement = constraints.subjectRequirements.get(
                suitableSubject._id.toString()
              );
              requirement.scheduled++;
              requirement.corePeriodsScheduled++;
              requirement.dailyScheduled[dayIndex]++;

              corePeriodsFixed++;
              console.log(
                `‚úÖ ƒêi·ªÅn ti·∫øt core: ${suitableSubject.subjectName} - Ng√†y ${
                  dayIndex + 1
                }, T${period}`
              );
            } else {
              // T·∫°o ti·∫øt t·ª± h·ªçc n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c m√¥n ph√π h·ª£p
              const selfStudyDate = new Date(weekStartDate);
              selfStudyDate.setDate(weekStartDate.getDate() + dayIndex);

              const selfStudyLesson = await this.createLesson({
                classId: constraints.classId,
                academicYearId,
                dayIndex,
                period,
                type: "self_study",
                fixedInfo: { type: "self_study", description: "T·ª± h·ªçc" },
                teacher: constraints.homeroomTeacher,
                date: selfStudyDate,
                timeSlot: timeSlots[period - 1],
                createdBy,
              });

              constraints.schedule[dayIndex][period - 1] = selfStudyLesson;
              this.bookTeacherSlot(
                constraints,
                constraints.homeroomTeacher._id,
                dayIndex,
                period
              );

              corePeriodsFixed++;
              console.log(
                `‚ö†Ô∏è T·∫°o ti·∫øt t·ª± h·ªçc: Ng√†y ${
                  dayIndex + 1
                }, T${period} (kh√¥ng t√¨m ƒë∆∞·ª£c m√¥n ph√π h·ª£p)`
              );
            }
          }
        }
      }
    }

    console.log(`‚úÖ ƒê√£ ƒëi·ªÅn ${corePeriodsFixed} ti·∫øt core tr·ªëng`);
  }

  /**
   * T√¨m m√¥n h·ªçc ph√π h·ª£p ƒë·ªÉ ƒëi·ªÅn v√†o ti·∫øt core
   */
  findSubjectForCorePeriod(constraints, dayIndex, period) {
    // T√¨m m√¥n h·ªçc ch∆∞a ƒë·ªß ti·∫øt v√† ph√π h·ª£p v·ªõi ti·∫øt core
    const suitableSubjects = [];

    for (const [subjectId, requirement] of constraints.subjectRequirements) {
      if (requirement.scheduled < requirement.required) {
        // Ki·ªÉm tra m√¥n n√†y c√≥ th·ªÉ h·ªçc v√†o ti·∫øt n√†y kh√¥ng
        if (requirement.dailyScheduled[dayIndex] < 2) {
          // T·ªëi ƒëa 2 ti·∫øt/ng√†y
          suitableSubjects.push({
            subject: requirement.subject,
            remainingHours: requirement.required - requirement.scheduled,
            isPriority: requirement.isPriority,
          });
        }
      }
    }

    if (suitableSubjects.length === 0) return null;

    // S·∫Øp x·∫øp ∆∞u ti√™n: m√¥n ∆∞u ti√™n tr∆∞·ªõc, m√¥n thi·∫øu nhi·ªÅu ti·∫øt tr∆∞·ªõc
    suitableSubjects.sort((a, b) => {
      if (a.isPriority !== b.isPriority) {
        return b.isPriority ? 1 : -1; // M√¥n ∆∞u ti√™n tr∆∞·ªõc
      }
      return b.remainingHours - a.remainingHours; // M√¥n thi·∫øu nhi·ªÅu ti·∫øt tr∆∞·ªõc
    });

    return suitableSubjects[0].subject;
  }

  /**
   * GIAI ƒêO·∫†N 5: ƒê·∫£m b·∫£o √≠t nh·∫•t 2 ng√†y c√≥ > 5 ti·∫øt c√≥ subject
   */
  async ensureMinimumExtendedDays(
    constraints,
    weekStartDate,
    timeSlots,
    createdBy,
    academicYearId
  ) {
    console.log("üìä Ki·ªÉm tra √≠t nh·∫•t 2 ng√†y c√≥ > 5 ti·∫øt...");

    let extendedDays = 0;
    const dayStats = [];
    const workingDays = constraints.scheduleConfig.days; // L·∫•y ng√†y l√†m vi·ªác t·ª´ config

    // ƒê·∫øm s·ªë ti·∫øt c√≥ subject m·ªói ng√†y l√†m vi·ªác
    for (const dayIndex of workingDays) {
      let subjectLessons = 0;
      for (let period = 0; period < 10; period++) {
        const lesson = constraints.schedule[dayIndex][period];
        if (lesson && lesson.subject) {
          subjectLessons++;
        }
      }

      dayStats.push({
        dayIndex,
        subjectLessons,
        isExtended: subjectLessons > 5,
      });

      if (subjectLessons > 5) {
        extendedDays++;
      }

      const dayName =
        dayIndex === 0
          ? "T2"
          : dayIndex === 1
          ? "T3"
          : dayIndex === 2
          ? "T4"
          : dayIndex === 3
          ? "T5"
          : dayIndex === 4
          ? "T6"
          : "T7";
      console.log(
        `   ${dayName}: ${subjectLessons} ti·∫øt c√≥ subject ${
          subjectLessons > 5 ? "‚úÖ" : ""
        }`
      );
    }

    // N·∫øu ch∆∞a ƒë·ªß 2 ng√†y extended, th√™m ti·∫øt v√†o c√°c ng√†y c·∫ßn thi·∫øt
    if (extendedDays < this.MINIMUM_EXTENDED_DAYS) {
      console.log(
        `‚ö†Ô∏è Ch·ªâ c√≥ ${extendedDays} ng√†y > 5 ti·∫øt, c·∫ßn th√™m ${
          this.MINIMUM_EXTENDED_DAYS - extendedDays
        } ng√†y...`
      );

      // T√¨m ng√†y c√≥ √≠t ti·∫øt nh·∫•t ƒë·ªÉ th√™m
      const candidateDays = dayStats
        .filter((d) => !d.isExtended && d.subjectLessons <= 8) // Kh√¥ng qu√° t·∫£i
        .sort((a, b) => b.subjectLessons - a.subjectLessons); // ∆Øu ti√™n ng√†y c√≥ nhi·ªÅu ti·∫øt h∆°n

      for (
        let i = 0;
        i <
        Math.min(
          this.MINIMUM_EXTENDED_DAYS - extendedDays,
          candidateDays.length
        );
        i++
      ) {
        const targetDay = candidateDays[i];
        const dayName =
          targetDay.dayIndex === 0
            ? "T2"
            : targetDay.dayIndex === 1
            ? "T3"
            : targetDay.dayIndex === 2
            ? "T4"
            : targetDay.dayIndex === 3
            ? "T5"
            : targetDay.dayIndex === 4
            ? "T6"
            : "T7";
        console.log(`üéØ Th√™m ti·∫øt cho ${dayName}...`);

        // Th√™m ti·∫øt v√†o ti·∫øt 6-10 cho ng√†y n√†y
        await this.addExtraLessonsToDay(
          constraints,
          targetDay.dayIndex,
          weekStartDate,
          timeSlots,
          createdBy,
          academicYearId
        );
      }
    } else {
      console.log(`‚úÖ ƒê√£ c√≥ ${extendedDays} ng√†y > 5 ti·∫øt, ƒë·∫°t y√™u c·∫ßu`);
    }
  }

  /**
   * Th√™m ti·∫øt b·ªï sung cho m·ªôt ng√†y
   */
  async addExtraLessonsToDay(
    constraints,
    dayIndex,
    weekStartDate,
    timeSlots,
    createdBy,
    academicYearId
  ) {
    // T√¨m m√¥n h·ªçc c√≥ th·ªÉ th√™m ti·∫øt
    for (const subject of constraints.subjects) {
      const requirement = constraints.subjectRequirements.get(
        subject._id.toString()
      );

      // Ch·ªâ th√™m n·∫øu m√¥n n√†y ch∆∞a c√≥ ti·∫øt trong ng√†y n√†y
      if (requirement.dailyScheduled[dayIndex] === 0) {
        const teacher = await this.findSpecializedTeacher(subject._id);
        if (teacher) {
          // T√¨m slot trong ti·∫øt 6-10
          for (let period = 6; period <= 10; period++) {
            if (
              this.canScheduleSingleSlot(
                constraints,
                subject,
                teacher._id,
                dayIndex,
                period
              )
            ) {
              await this.scheduleSingleLesson(
                constraints,
                subject,
                teacher,
                dayIndex,
                period,
                weekStartDate,
                timeSlots,
                createdBy,
                academicYearId
              );

              requirement.scheduled++;
              requirement.dailyScheduled[dayIndex]++;

              console.log(
                `   ‚ûï Th√™m ${subject.subjectName} - Ng√†y ${
                  dayIndex + 1
                }, T${period}`
              );
              return; // Ch·ªâ th√™m 1 ti·∫øt
            }
          }
        }
      }
    }
  }

  /**
   * T√≠nh ƒëi·ªÉm ∆∞u ti√™n cho khe th·ªùi gian
   */
  calculateSlotScore(constraints, subject, teacher, dayIndex, period) {
    let score = 0;

    // R√ÄNG BU·ªòC: M√¥n ∆∞u ti√™n v√†o bu·ªïi s√°ng
    if (
      this.PRIORITY_SUBJECTS.includes(subject.subjectName) &&
      this.MORNING_PERIODS.includes(period)
    ) {
      score += 50;
    }

    // R√ÄNG BU·ªòC: Th·ªÉ d·ª•c kh√¥ng ti·∫øt 1 v√† sau ƒÉn tr∆∞·ªùng
    if (subject.subjectName === "Physical Education") {
      if (period === 1) score -= 100; // Kh√¥ng ti·∫øt ƒë·∫ßu
      if (period === 6) score -= 50; // Kh√¥ng sau ƒÉn tr∆∞·ªùng
    }

    // R√ÄNG BU·ªòC: M√¥n th·ª±c h√†nh ∆∞u ti√™n bu·ªïi chi·ªÅu
    const practicalSubjects = [
      "Computer Science",
      "Chemistry Lab",
      "Physics Lab",
    ];
    if (
      practicalSubjects.includes(subject.subjectName) &&
      this.AFTERNOON_PERIODS.includes(period)
    ) {
      score += 30;
    }

    // C√¢n b·∫±ng kh·ªëi l∆∞·ª£ng gi√°o vi√™n
    const teacherSchedule = constraints.teacherSchedules.get(
      teacher._id.toString()
    );
    if (teacherSchedule) {
      const dailyLoad = teacherSchedule.workload.daily[dayIndex];
      if (dailyLoad < 3) score += 20; // ∆Øu ti√™n ng√†y √≠t vi·ªác
      if (dailyLoad > 6) score -= 30; // Tr√°nh ng√†y qu√° t·∫£i
    }

    return score;
  }

  /**
   * Ki·ªÉm tra c√≥ th·ªÉ x·∫øp ti·∫øt ƒë∆°n kh√¥ng
   */
  canScheduleSingleSlot(constraints, subject, teacherId, dayIndex, period) {
    // Ki·ªÉm tra c∆° b·∫£n
    if (constraints.schedule[dayIndex][period - 1] !== null) return false;

    const teacherSchedule = constraints.teacherSchedules.get(
      teacherId.toString()
    );
    if (!teacherSchedule) return false;

    if (teacherSchedule.schedule[dayIndex][period - 1]) return false;

    // Gi·ªõi h·∫°n ti·∫øt/ng√†y
    if (
      teacherSchedule.workload.daily[dayIndex] >=
      teacherSchedule.constraints.maxLessonsPerDay
    )
      return false;

    // R√ÄNG BU·ªòC: Kh√¥ng qu√° 3 ti·∫øt li√™n ti·∫øp c√πng m√¥n
    if (
      this.checkConsecutiveSubjectLimit(
        constraints,
        subject._id,
        dayIndex,
        period
      )
    )
      return false;

    return true;
  }

  /**
   * Ki·ªÉm tra gi·ªõi h·∫°n ti·∫øt li√™n ti·∫øp (t·ªëi ƒëa 3)
   */
  checkConsecutiveSubjectLimit(constraints, subjectId, dayIndex, period) {
    let count = 1; // Bao g·ªìm ti·∫øt hi·ªán t·∫°i

    // Ki·ªÉm tra ng∆∞·ª£c l·∫°i
    for (let p = period - 1; p >= 1; p--) {
      const lesson = constraints.schedule[dayIndex][p - 1];
      if (
        lesson &&
        lesson.subject &&
        lesson.subject.toString() === subjectId.toString()
      ) {
        count++;
      } else break;
    }

    // Ki·ªÉm tra ti·∫øn t·ªõi
    for (let p = period + 1; p <= 10; p++) {
      const lesson = constraints.schedule[dayIndex][p - 1];
      if (
        lesson &&
        lesson.subject &&
        lesson.subject.toString() === subjectId.toString()
      ) {
        count++;
      } else break;
    }

    return count > 3;
  }

  /**
   * X·∫øp ti·∫øt ƒë∆°n
   */
  async scheduleSingleLesson(
    constraints,
    subject,
    teacher,
    dayIndex,
    period,
    weekStartDate,
    timeSlots,
    createdBy,
    academicYearId
  ) {
    const date = new Date(weekStartDate);
    date.setDate(weekStartDate.getDate() + dayIndex);

    const lesson = await this.createLesson({
      classId: constraints.classId,
      academicYearId,
      dayIndex,
      period,
      type: "regular",
      subject,
      teacher,
      date,
      timeSlot: timeSlots[period - 1],
      createdBy,
    });

    constraints.schedule[dayIndex][period - 1] = lesson;
    this.bookTeacherSlot(constraints, teacher._id, dayIndex, period);

    // Update daily tracking
    const requirement = constraints.subjectRequirements.get(
      subject._id.toString()
    );
    requirement.dailyScheduled[dayIndex] += 1;

    return lesson;
  }

  /**
   * GIAI ƒêO·∫†N 4: ƒêi·ªÅn khe tr·ªëng
   */
  async fillEmptySlots(
    constraints,
    weekStartDate,
    timeSlots,
    homeroomTeacher,
    createdBy,
    academicYearId
  ) {
    console.log("üîÑ Giai ƒëo·∫°n 4: ƒêi·ªÅn khe tr·ªëng - KI·ªÇM TRA CORE PERIODS...");

    // KI·ªÇM TRA: Ti·∫øt 1-5 KH√îNG ƒê∆Ø·ª¢C TR·ªêNG
    let corePeriodViolations = 0;
    for (let dayIndex = 0; dayIndex < 5; dayIndex++) {
      for (let period = 1; period <= 5; period++) {
        if (constraints.schedule[dayIndex][period - 1] === null) {
          corePeriodViolations++;
          console.log(
            `‚ùå VI PH·∫†M: Ti·∫øt ${period} ng√†y ${
              dayIndex + 1
            } v·∫´n tr·ªëng trong core periods!`
          );

          constraints.violations.push({
            type: "CORE_PERIOD_EMPTY",
            dayIndex: dayIndex,
            period: period,
            reason: "Ti·∫øt 1-5 kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
            priority: "CRITICAL",
          });
        }
      }
    }

    if (corePeriodViolations > 0) {
      console.log(
        `üö® C·∫¢NH B√ÅO: ${corePeriodViolations} ti·∫øt trong core periods (1-5) v·∫´n tr·ªëng!`
      );
    } else {
      console.log("‚úÖ T·∫•t c·∫£ core periods (1-5) ƒë√£ c√≥ subject");
    }

    // T2-T6 (dayIndex 0-4): CH·ªà ƒëi·ªÅn ti·∫øt 6-10 n·∫øu tr·ªëng
    for (let dayIndex = 0; dayIndex < 5; dayIndex++) {
      for (let period = 6; period <= 10; period++) {
        if (constraints.schedule[dayIndex][period - 1] === null) {
          const date = new Date(weekStartDate);
          date.setDate(weekStartDate.getDate() + dayIndex);

          const emptyLesson = await this.createLesson({
            classId: constraints.classId,
            academicYearId,
            dayIndex,
            period,
            type: "empty",
            teacher: homeroomTeacher,
            date,
            timeSlot: timeSlots[period - 1],
            createdBy,
            notes: "Ti·∫øt tr·ªëng - Ti·∫øt 6-10",
          });

          constraints.schedule[dayIndex][period - 1] = emptyLesson;
        }
      }
    }

    // X·ª≠ l√Ω th·ª© 7 v√† ch·ªß nh·∫≠t theo lo·∫°i l·ªãch
    const scheduleType = constraints.scheduleConfig.name;
    const workingDays = constraints.scheduleConfig.days;

    if (scheduleType.includes("Th·ª© 7")) {
      // MONDAY_TO_SATURDAY
      console.log("üìÖ L·ªãch th·ª© 2-7: Th·ª© 7 c√≥ ti·∫øt h·ªçc, ch·ªâ CN tr·ªëng...");

      // Th·ª© 7 (dayIndex 5): ƒêi·ªÅn ti·∫øt 6-10 n·∫øu tr·ªëng (ti·∫øt 1-5 ƒë√£ c√≥ t·ª´ c√°c giai ƒëo·∫°n tr∆∞·ªõc)
      if (workingDays.includes(5)) {
        console.log("   üìö Th·ª© 7: ƒêi·ªÅn ti·∫øt 6-10 n·∫øu tr·ªëng");
        for (let period = 6; period <= 10; period++) {
          if (constraints.schedule[5][period - 1] === null) {
            const date = new Date(weekStartDate);
            date.setDate(weekStartDate.getDate() + 5);

            const emptyLesson = await this.createLesson({
              classId: constraints.classId,
              academicYearId,
              dayIndex: 5,
              period,
              type: "empty",
              teacher: homeroomTeacher,
              date,
              timeSlot: timeSlots[period - 1],
              createdBy,
              notes: "Th·ª© 7 - Ti·∫øt tr·ªëng bu·ªïi chi·ªÅu",
            });

            constraints.schedule[5][period - 1] = emptyLesson;
          }
        }
      }

      // Ch·ªß nh·∫≠t (dayIndex 6): T·∫§T C·∫¢ 10 ti·∫øt tr·ªëng
      console.log("   üî∏ Ch·ªß nh·∫≠t: 10 ti·∫øt tr·ªëng");
      for (let period = 1; period <= 10; period++) {
        const date = new Date(weekStartDate);
        date.setDate(weekStartDate.getDate() + 6);

        const emptyLesson = await this.createLesson({
          classId: constraints.classId,
          academicYearId,
          dayIndex: 6,
          period,
          type: "empty",
          teacher: homeroomTeacher,
          date,
          timeSlot: timeSlots[period - 1],
          createdBy,
          notes: "Ch·ªß nh·∫≠t - Ti·∫øt tr·ªëng",
        });

        constraints.schedule[6][period - 1] = emptyLesson;
      }
    } else {
      // MONDAY_TO_FRIDAY
      console.log("üìÖ L·ªãch th·ª© 2-6: Th·ª© 7 v√† CN ƒë·ªÅu tr·ªëng...");

      // Th·ª© 7 v√† CN (dayIndex 5-6): T·∫§T C·∫¢ 10 ti·∫øt tr·ªëng
      for (let dayIndex = 5; dayIndex < 7; dayIndex++) {
        const dayName = dayIndex === 5 ? "Th·ª© 7" : "Ch·ªß nh·∫≠t";
        console.log(`   üî∏ ${dayName}: 10 ti·∫øt tr·ªëng`);

        for (let period = 1; period <= 10; period++) {
          const date = new Date(weekStartDate);
          date.setDate(weekStartDate.getDate() + dayIndex);

          const emptyLesson = await this.createLesson({
            classId: constraints.classId,
            academicYearId,
            dayIndex,
            period,
            type: "empty",
            teacher: homeroomTeacher,
            date,
            timeSlot: timeSlots[period - 1],
            createdBy,
            notes: `${dayName} - Ti·∫øt tr·ªëng`,
          });

          constraints.schedule[dayIndex][period - 1] = emptyLesson;
        }
      }
    }
  }

  /**
   * T·∫°o lesson v·ªõi ID ƒë√∫ng v√† ki·ªÉm tra tr√πng l·∫∑p
   */
  async createLesson(data) {
    const date = data.date.toISOString().slice(0, 10).replace(/-/g, "");
    const classIdShort = data.classId.toString().slice(-6);
    const timeSlotIdShort = data.timeSlot._id.toString().slice(-4);
    const timestamp = Date.now().toString().slice(-3); // Add timestamp to ensure uniqueness
    const lessonId = `${classIdShort}_${date}_${timeSlotIdShort}_${timestamp}`;

    const lessonData = {
      lessonId,
      class: data.classId,
      academicYear: data.academicYearId,
      timeSlot: data.timeSlot._id,
      scheduledDate: data.date,
      type: data.type,
      status: "scheduled",
      createdBy: data.createdBy,
    };

    if (data.subject) lessonData.subject = data.subject._id;
    if (data.teacher) lessonData.teacher = data.teacher._id;
    if (data.fixedInfo) lessonData.fixedInfo = data.fixedInfo;
    if (data.notes) lessonData.notes = data.notes;

    try {
      const lesson = new Lesson(lessonData);
      await lesson.save();
      return lesson;
    } catch (error) {
      if (error.code === 11000) {
        // Duplicate key error, try with different timestamp
        const newTimestamp = (Date.now() + Math.random() * 1000)
          .toString()
          .slice(-3);
        const newLessonId = `${classIdShort}_${date}_${timeSlotIdShort}_${newTimestamp}`;
        lessonData.lessonId = newLessonId;

        const lesson = new Lesson(lessonData);
        await lesson.save();
        return lesson;
      }
      throw error;
    }
  }

  /**
   * ƒê·∫∑t ch·ªó cho gi√°o vi√™n
   */
  bookTeacherSlot(constraints, teacherId, dayIndex, period) {
    const teacherSchedule = constraints.teacherSchedules.get(
      teacherId.toString()
    );
    if (teacherSchedule) {
      teacherSchedule.schedule[dayIndex][period - 1] = true;
      teacherSchedule.workload.daily[dayIndex]++;
      teacherSchedule.workload.weekly++;
    }
  }

  /**
   * T√¨m gi√°o vi√™n chuy√™n m√¥n
   */
  async findSpecializedTeacher(subjectId) {
    return await User.findOne({
      subject: subjectId,
      role: { $in: ["teacher", "homeroom_teacher"] },
      active: true,
    });
  }

  /**
   * KI·ªÇM TRA: T·∫•t c·∫£ r√†ng bu·ªôc
   */
  validateAllConstraints(constraints) {
    const violations = [];

    this.validateTeacherConstraints(constraints, violations);
    this.validateSubjectRequirements(constraints, violations);
    this.validateDoublePeriodRequirements(constraints, violations);
    this.validateTimePreferences(constraints, violations);

    return { isValid: violations.length === 0, violations };
  }

  /**
   * Ki·ªÉm tra r√†ng bu·ªôc gi√°o vi√™n (CRITICAL)
   */
  validateTeacherConstraints(constraints, violations) {
    for (const [teacherId, teacherData] of constraints.teacherSchedules) {
      // Gi·ªõi h·∫°n h√†ng ng√†y
      teacherData.workload.daily.forEach((daily, dayIndex) => {
        if (daily > teacherData.constraints.maxLessonsPerDay) {
          violations.push({
            type: "TEACHER_DAILY_OVERLOAD",
            teacherId,
            day: dayIndex,
            actual: daily,
            limit: teacherData.constraints.maxLessonsPerDay,
            priority: "CRITICAL",
          });
        }
      });

      // Gi·ªõi h·∫°n h√†ng tu·∫ßn
      if (
        teacherData.workload.weekly > teacherData.constraints.maxLessonsPerWeek
      ) {
        violations.push({
          type: "TEACHER_WEEKLY_OVERLOAD",
          teacherId,
          actual: teacherData.workload.weekly,
          limit: teacherData.constraints.maxLessonsPerWeek,
          priority: "CRITICAL",
        });
      }
    }
  }

  /**
   * Ki·ªÉm tra y√™u c·∫ßu m√¥n h·ªçc - ƒë·∫£m b·∫£o ƒë·ªß weeklyHours
   */
  validateSubjectRequirements(constraints, violations) {
    let totalRequiredHours = 0;
    let totalScheduledHours = 0;

    for (const [subjectId, requirement] of constraints.subjectRequirements) {
      totalRequiredHours += requirement.required;
      totalScheduledHours += requirement.scheduled;

      if (requirement.scheduled < requirement.required) {
        violations.push({
          type: "INSUFFICIENT_PERIODS",
          subject: requirement.subject.subjectName,
          required: requirement.required,
          scheduled: requirement.scheduled,
          deficit: requirement.required - requirement.scheduled,
          priority: "HIGH",
        });
      }

      // Ki·ªÉm tra c√≥ qu√° nhi·ªÅu ti·∫øt kh√¥ng
      if (requirement.scheduled > requirement.required) {
        violations.push({
          type: "EXCESSIVE_PERIODS",
          subject: requirement.subject.subjectName,
          required: requirement.required,
          scheduled: requirement.scheduled,
          excess: requirement.scheduled - requirement.required,
          priority: "MEDIUM",
        });
      }
    }

    // C·∫≠p nh·∫≠t th·ªëng k√™ t·ªïng
    constraints.stats.scheduledWeeklyHours = totalScheduledHours;

    // Ki·ªÉm tra t·ªïng s·ªë ti·∫øt
    if (totalScheduledHours < totalRequiredHours) {
      violations.push({
        type: "TOTAL_WEEKLY_HOURS_INSUFFICIENT",
        required: totalRequiredHours,
        scheduled: totalScheduledHours,
        deficit: totalRequiredHours - totalScheduledHours,
        priority: "CRITICAL",
      });
    }

    console.log(
      `üìä T·ªïng ti·∫øt: ${totalScheduledHours}/${totalRequiredHours} (${(
        (totalScheduledHours / totalRequiredHours) *
        100
      ).toFixed(1)}%)`
    );
  }

  /**
   * Ki·ªÉm tra y√™u c·∫ßu ti·∫øt ƒë√¥i
   */
  validateDoublePeriodRequirements(constraints, violations) {
    for (const [subjectId, requirement] of constraints.subjectRequirements) {
      if (
        requirement.targetDoublePeriods > 0 &&
        requirement.doublePeriods < requirement.targetDoublePeriods
      ) {
        violations.push({
          type: "INSUFFICIENT_DOUBLE_PERIODS",
          subject: requirement.subject.subjectName,
          required: requirement.targetDoublePeriods,
          scheduled: requirement.doublePeriods,
          priority: "HIGH",
        });
      }
    }
  }

  /**
   * Ki·ªÉm tra ∆∞u ti√™n th·ªùi gian
   */
  validateTimePreferences(constraints, violations) {
    let priorityInMorning = 0;
    let totalPriority = 0;

    // ƒê·∫øm m√¥n ∆∞u ti√™n trong bu·ªïi s√°ng
    for (let dayIndex = 0; dayIndex < 6; dayIndex++) {
      for (let period = 1; period <= 10; period++) {
        const lesson = constraints.schedule[dayIndex][period - 1];
        if (lesson && lesson.subject) {
          const subject = constraints.subjects.find(
            (s) => s._id.toString() === lesson.subject.toString()
          );
          if (subject && this.PRIORITY_SUBJECTS.includes(subject.subjectName)) {
            totalPriority++;
            if (this.MORNING_PERIODS.includes(period)) priorityInMorning++;
          }
        }
      }
    }

    // Ki·ªÉm tra t·ª∑ l·ªá 60%
    if (totalPriority > 0 && priorityInMorning / totalPriority < 0.6) {
      violations.push({
        type: "PRIORITY_SUBJECTS_NOT_IN_MORNING",
        actual: ((priorityInMorning / totalPriority) * 100).toFixed(1) + "%",
        expected: "60%+",
        priority: "MEDIUM",
      });
    }
  }

  /**
   * L∆∞u lessons v√†o weekly schedule
   */
  async saveLessonsToWeeklySchedule(constraints, weeklyScheduleId) {
    const lessonIds = [];

    for (let dayIndex = 0; dayIndex < 7; dayIndex++) {
      for (let period = 1; period <= 10; period++) {
        const lesson = constraints.schedule[dayIndex][period - 1];
        if (lesson) lessonIds.push(lesson._id);
      }
    }

    const weeklySchedule = await WeeklySchedule.findById(weeklyScheduleId);
    weeklySchedule.lessons = lessonIds;
    weeklySchedule.stats = {
      totalLessons: lessonIds.length,
      subjectLessons: lessonIds.length,
      emptySlots: 0,
      constraintViolations: 0,
    };
    await weeklySchedule.save();

    return lessonIds;
  }

  /**
   * In b√°o c√°o to√†n di·ªán
   */
  printSchedulingReport(constraints, validationResult) {
    console.log(`\nüìä B√ÅO C√ÅO T·∫†O TH·ªúI KH√ìA BI·ªÇU V·ªöI R√ÄNG BU·ªòC`);
    console.log("=".repeat(60));

    const totalScheduled = Array.from(
      constraints.subjectRequirements.values()
    ).reduce((sum, req) => sum + req.scheduled, 0);

    console.log(`üìà T·ªîNG QUAN:`);
    console.log(`  T·ªïng ti·∫øt ƒë√£ x·∫øp: ${totalScheduled}`);
    console.log(`  Ti·∫øt ƒë√¥i ƒë√£ t·∫°o: ${constraints.stats.doublePeriods}`);
    console.log(
      `  M√¥n ∆∞u ti√™n bu·ªïi s√°ng: ${constraints.stats.prioritySubjectsInMorning}`
    );

    console.log(`\nüìö CHI TI·∫æT M√îN H·ªåC:`);
    for (const [subjectId, req] of constraints.subjectRequirements) {
      const completion = ((req.scheduled / req.required) * 100).toFixed(1);
      const doubleInfo =
        req.targetDoublePeriods > 0
          ? ` (${req.doublePeriods}/${req.targetDoublePeriods} ti·∫øt ƒë√¥i)`
          : "";
      console.log(
        `  ${req.subject.subjectName}: ${req.scheduled}/${req.required} (${completion}%)${doubleInfo}`
      );
    }

    console.log(`\nüë®‚Äçüè´ KH·ªêI L∆Ø·ª¢NG GI√ÅO VI√äN:`);
    for (const [teacherId, data] of constraints.teacherSchedules) {
      const dailyLoads = data.workload.daily.join("-");
      console.log(
        `  GV ${teacherId.slice(-6)}: ${
          data.workload.weekly
        } ti·∫øt/tu·∫ßn (${dailyLoads} h√†ng ng√†y)`
      );
    }

    // B√°o c√°o vi ph·∫°m
    if (validationResult.violations.length === 0) {
      console.log(`\n‚úÖ T·∫§T C·∫¢ R√ÄNG BU·ªòC ƒê√É ƒê∆Ø·ª¢C TH·ªéA M√ÉN!`);
    } else {
      console.log(
        `\n‚ùå VI PH·∫†M R√ÄNG BU·ªòC (${validationResult.violations.length}):`
      );

      const critical = validationResult.violations.filter(
        (v) => v.priority === "CRITICAL"
      );
      const high = validationResult.violations.filter(
        (v) => v.priority === "HIGH"
      );
      const medium = validationResult.violations.filter(
        (v) => v.priority === "MEDIUM"
      );

      if (critical.length > 0) {
        console.log(`  üö® NGHI√äM TR·ªåNG (${critical.length}):`);
        critical.forEach((v) =>
          console.log(
            `    - ${v.type}: ${v.subject || "Chi ti·∫øt trong ƒë·ªëi t∆∞·ª£ng"}`
          )
        );
      }

      if (high.length > 0) {
        console.log(`  ‚ö†Ô∏è CAO (${high.length}):`);
        high.forEach((v) =>
          console.log(
            `    - ${v.type}: ${v.subject || "Chi ti·∫øt trong ƒë·ªëi t∆∞·ª£ng"}`
          )
        );
      }

      if (medium.length > 0) {
        console.log(`  üìã TRUNG B√åNH (${medium.length}):`);
        medium.forEach((v) =>
          console.log(
            `    - ${v.type}: ${v.actual || "Chi ti·∫øt trong ƒë·ªëi t∆∞·ª£ng"}`
          )
        );
      }
    }

    console.log(`\nüéØ HO√ÄN TH√ÄNH T·∫†O TH·ªúI KH√ìA BI·ªÇU`);
    console.log("=".repeat(60));
  }
}

module.exports = ConstraintSchedulerService;
