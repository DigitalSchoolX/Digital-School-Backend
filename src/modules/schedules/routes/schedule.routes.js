const express = require('express');
const router = express.Router();
const scheduleController = require('../controllers/schedule.controller');
const authMiddleware = require('../../auth/middleware/auth.middleware');
const scheduleValidation = require('../middleware/schedule.validation');

// Routes cho qu·∫£n l√Ω th·ªùi kh√≥a bi·ªÉu

// POST /api/schedules/initialize - Kh·ªüi t·∫°o th·ªùi kh√≥a bi·ªÉu cho t·∫•t c·∫£ l·ªõp trong nƒÉm h·ªçc
router.post('/initialize', 
  authMiddleware.protect,
  (req, res, next) => {
    console.log('üîç Initialize route for all classes - User:', req.user.role);
    next();
  },
  authMiddleware.authorize('admin', 'manager'),
  scheduleValidation.validateInitializeSchedule,
  scheduleController.initializeSchedulesForAcademicYear
);

// POST /api/schedules/initialize-class - Kh·ªüi t·∫°o th·ªùi kh√≥a bi·ªÉu cho m·ªôt l·ªõp c·ª• th·ªÉ
router.post('/initialize-class', 
  authMiddleware.protect,
  (req, res, next) => {
    console.log('üîç Initialize class route - User:', req.user.role);
    next();
  },
  authMiddleware.authorize('admin', 'manager'),
  scheduleValidation.validateInitializeClassSchedule,
  scheduleController.initializeScheduleForClass
);

// POST /api/schedules/initialize-optimized - Kh·ªüi t·∫°o th·ªùi kh√≥a bi·ªÉu t·ªëi ∆∞u v·ªõi thu·∫≠t to√°n Heuristic/Greedy
router.post('/initialize-optimized', 
  authMiddleware.protect,
  (req, res, next) => {
    console.log('üöÄ Initialize optimized route - User:', req.user.role);
    next();
  },
  authMiddleware.authorize('admin', 'manager'),
  scheduleValidation.validateInitializeSchedule,
  scheduleController.initializeOptimizedSchedules
);

// Test route ƒë·ªÉ ki·ªÉm tra auth
router.get('/test-auth', 
  authMiddleware.protect,
  (req, res) => {
    res.json({
      success: true,
      message: 'Auth working',
      user: {
        id: req.user._id,
        role: req.user.role,
        email: req.user.email
      }
    });
  }
);

// GET /api/schedules/class - Xem th·ªùi kh√≥a bi·ªÉu c·ªßa m·ªôt l·ªõp c·ª• th·ªÉ
// Query params: className, academicYear, weekNumber (optional) OR startOfWeek, endOfWeek
// V√≠ d·ª•: /api/schedules/class?className=12A4&academicYear=2023-2024&startOfWeek=2024-12-16&endOfWeek=2024-12-22
router.get('/class',
  authMiddleware.protect,
  scheduleValidation.validateGetClassSchedule,
  scheduleController.getClassSchedule
);

// GET /api/schedules/available - Xem t·∫•t c·∫£ schedules c√≥ s·∫µn (debugging)
router.get('/available',
  authMiddleware.protect,
  scheduleController.getAvailableSchedules
);

// GET /api/schedules/check-class - Ki·ªÉm tra l·ªõp c√≥ t·ªìn t·∫°i kh√¥ng
router.get('/check-class',
  authMiddleware.protect,
  scheduleController.checkClassExists
);

// GET /api/schedules/progress - L·∫•y ti·∫øn ƒë·ªô h·ªçc t·∫≠p c·ªßa l·ªõp
router.get('/progress',
  authMiddleware.protect,
  scheduleController.getLearningProgress
);

// GET /api/schedules/attendance-report - L·∫•y b√°o c√°o ƒëi·ªÉm danh
router.get('/attendance-report',
  authMiddleware.protect,
  scheduleController.getAttendanceReport
);

// GET /api/schedules/stats - L·∫•y th·ªëng k√™ th·ªùi kh√≥a bi·ªÉu (ƒë·∫∑t tr∆∞·ªõc /:id ƒë·ªÉ tr√°nh conflict)
router.get('/stats',
  authMiddleware.protect,
  scheduleController.getScheduleStats
);

// GET /api/schedules - L·∫•y danh s√°ch th·ªùi kh√≥a bi·ªÉu v·ªõi filter
router.get('/',
  authMiddleware.protect,
  scheduleController.getSchedules
);

// GET /api/schedules/:id - L·∫•y chi ti·∫øt th·ªùi kh√≥a bi·ªÉu
router.get('/:id',
  authMiddleware.protect,
  scheduleController.getScheduleById
);

// PUT /api/schedules/:id/status - C·∫≠p nh·∫≠t tr·∫°ng th√°i th·ªùi kh√≥a bi·ªÉu (ƒë·∫∑t tr∆∞·ªõc /:id ƒë·ªÉ tr√°nh conflict)
router.put('/:id/status',
  authMiddleware.protect,
  authMiddleware.authorize('admin', 'manager'),
  scheduleValidation.validateUpdateStatus,
  scheduleController.updateScheduleStatus
);

// PUT /api/schedules/:id - C·∫≠p nh·∫≠t th·ªùi kh√≥a bi·ªÉu
router.put('/:id',
  authMiddleware.protect,
  authMiddleware.authorize('admin', 'manager', 'teacher'),
  scheduleController.updateSchedule
);

// DELETE /api/schedules/:id - X√≥a th·ªùi kh√≥a bi·ªÉu
router.delete('/:id',
  authMiddleware.protect,
  authMiddleware.authorize('admin', 'manager'),
  scheduleController.deleteSchedule
);

// Routes helper cho frontend

// GET /api/schedules/helper/classes - L·∫•y danh s√°ch l·ªõp theo kh·ªëi v√† nƒÉm h·ªçc
router.get('/helper/classes',
  authMiddleware.protect,
  scheduleController.getClassesByGrade
);

// GET /api/schedules/helper/preview - Preview t·∫°o th·ªùi kh√≥a bi·ªÉu
router.post('/helper/preview',
  authMiddleware.protect,
  authMiddleware.authorize('admin', 'manager'),
  scheduleController.previewScheduleCreation
);

// GET /api/schedules/helper/academic-years - L·∫•y danh s√°ch nƒÉm h·ªçc
router.get('/helper/academic-years',
  authMiddleware.protect,
  scheduleController.getAcademicYearOptions
);

// GET /api/schedules/helper/time-slots - L·∫•y danh s√°ch khung gi·ªù
router.get('/helper/time-slots',
  authMiddleware.protect,
  scheduleController.getTimeSlots
);

// Legacy routes (gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch)
router.post('/grade',
  authMiddleware.protect,
  authMiddleware.authorize('admin', 'manager'),
  scheduleController.createScheduleForGrade
);

// Routes cho qu·∫£n l√Ω tr·∫°ng th√°i ti·∫øt h·ªçc

// PATCH /api/schedules/:scheduleId/period-status - C·∫≠p nh·∫≠t tr·∫°ng th√°i ti·∫øt h·ªçc
router.patch('/:scheduleId/period-status',
  authMiddleware.protect,
  authMiddleware.authorize('admin', 'manager', 'teacher'),
  scheduleController.updatePeriodStatus
);

// PATCH /api/schedules/:scheduleId/bulk-period-status - Bulk update tr·∫°ng th√°i nhi·ªÅu ti·∫øt
router.patch('/:scheduleId/bulk-period-status',
  authMiddleware.protect,
  authMiddleware.authorize('admin', 'manager', 'teacher'),
  scheduleController.bulkUpdatePeriodStatus
);

// PATCH /api/schedules/:scheduleId/mark-completed - Mark ti·∫øt h·ªçc ƒë√£ ho√†n th√†nh
router.patch('/:scheduleId/mark-completed',
  authMiddleware.protect,
  authMiddleware.authorize('admin', 'manager', 'teacher'),
  scheduleController.markPeriodCompleted
);

// PATCH /api/schedules/:scheduleId/mark-absent - Mark ti·∫øt h·ªçc v·∫Øng m·∫∑t
router.patch('/:scheduleId/mark-absent',
  authMiddleware.protect,
  authMiddleware.authorize('admin', 'manager', 'teacher'),
  scheduleController.markPeriodAbsent
);

module.exports = router; 