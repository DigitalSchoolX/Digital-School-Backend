const express = require("express");
const router = express.Router();
const scheduleController = require("../controllers/schedule.controller");
const authMiddleware = require("../../auth/middleware/auth.middleware");
const scheduleValidation = require("../middleware/schedule.validation");

// Import lesson request routes
const lessonRequestRoutes = require('./lesson-request.routes');
const substituteRequestRoutes = require('./substitute-request.routes');

// Routes cho qu·∫£n l√Ω th·ªùi kh√≥a bi·ªÉu

// Mount lesson request routes
router.use('/lesson-request', lessonRequestRoutes);

// Mount substitute request routes
router.use('/substitute-request', substituteRequestRoutes);

// POST /api/schedules/initialize - Kh·ªüi t·∫°o th·ªùi kh√≥a bi·ªÉu cho t·∫•t c·∫£ l·ªõp trong nƒÉm h·ªçc
router.post(
  "/initialize",
  authMiddleware.protect,
  (req, res, next) => {
    console.log("üîç Initialize route for all classes - User:", req.user.role);
    next();
  },
  authMiddleware.authorize("admin", "manager"),
  scheduleValidation.validateInitializeSchedule,
  scheduleController.initializeSchedulesForAcademicYear
);



// Test route ƒë·ªÉ ki·ªÉm tra auth
router.get("/test-auth", authMiddleware.protect, (req, res) => {
  res.json({
    success: true,
    message: "Auth working",
    user: {
      id: req.user._id,
      role: req.user.role,
      email: req.user.email,
    },
  });
});

// GET /api/schedules/class - Xem th·ªùi kh√≥a bi·ªÉu c·ªßa m·ªôt l·ªõp c·ª• th·ªÉ
// Query params: className, academicYear, weekNumber (optional) OR startOfWeek, endOfWeek
// V√≠ d·ª•: /api/schedules/class?className=12A4&academicYear=2023-2024&startOfWeek=2024-12-16&endOfWeek=2024-12-22
router.get(
  "/class",
  authMiddleware.protect,
  scheduleValidation.validateGetClassSchedule,
  scheduleController.getClassSchedule
);

// GET /api/schedules/teacher - Xem l·ªãch d·∫°y c·ªßa gi√°o vi√™n
// Query params: teacherId, academicYear, startOfWeek, endOfWeek
// V√≠ d·ª•: /api/schedules/teacher?teacherId=64f8b9c123456789abcdef07&academicYear=2024-2025&startOfWeek=2024-12-19&endOfWeek=2024-12-25
router.get(
  "/teacher",
  authMiddleware.protect,
  authMiddleware.authorize("teacher", "manager"),
  scheduleController.getTeacherSchedule
);

// GET /api/schedules/lesson/:lessonId - Xem chi ti·∫øt ti·∫øt h·ªçc
// Params: lessonId
// V√≠ d·ª•: /api/schedules/lesson/675a1b2c3d4e5f6789012345
router.get(
  "/lesson/:lessonId",
  authMiddleware.protect,
  authMiddleware.authorize("teacher", "manager", "student"),
  scheduleController.getLessonDetail
);

// GET /api/schedules/lesson/:lessonId/students - L·∫•y danh s√°ch h·ªçc sinh c·ªßa lesson
// Params: lessonId
// Ch·ªâ gi√°o vi√™n d·∫°y ti·∫øt ƒë√≥ m·ªõi ƒë∆∞·ª£c xem
// V√≠ d·ª•: /api/schedules/lesson/675a1b2c3d4e5f6789012345/students
router.get(
  "/lesson/:lessonId/students",
  authMiddleware.protect,
  authMiddleware.authorize("teacher"),
  scheduleController.getLessonStudents
);

// GET /api/schedules/available - Xem t·∫•t c·∫£ schedules c√≥ s·∫µn (debugging)
router.get(
  "/available",
  authMiddleware.protect,
  scheduleController.getAvailableSchedules
);

// GET /api/schedules/check-class - Ki·ªÉm tra l·ªõp c√≥ t·ªìn t·∫°i kh√¥ng
router.get(
  "/check-class",
  authMiddleware.protect,
  scheduleController.checkClassExists
);

// GET /api/schedules/progress - L·∫•y ti·∫øn ƒë·ªô h·ªçc t·∫≠p c·ªßa l·ªõp
router.get(
  "/progress",
  authMiddleware.protect,
  scheduleController.getLearningProgress
);

// GET /api/schedules/attendance-report - L·∫•y b√°o c√°o ƒëi·ªÉm danh
router.get(
  "/attendance-report",
  authMiddleware.protect,
  scheduleController.getAttendanceReport
);

// GET /api/schedules/stats - L·∫•y th·ªëng k√™ th·ªùi kh√≥a bi·ªÉu (ƒë·∫∑t tr∆∞·ªõc /:id ƒë·ªÉ tr√°nh conflict)
router.get(
  "/stats",
  authMiddleware.protect,
  scheduleController.getScheduleStats
);

// GET /api/schedules/period-details - Xem chi ti·∫øt ti·∫øt h·ªçc (ƒë·∫∑t tr∆∞·ªõc /:id ƒë·ªÉ tr√°nh conflict)
router.get(
  "/period-details",
  authMiddleware.protect,
  scheduleController.getPeriodDetails
);

// GET /api/schedules - L·∫•y danh s√°ch th·ªùi kh√≥a bi·ªÉu v·ªõi filter
router.get("/", authMiddleware.protect, scheduleController.getSchedules);

// GET /api/schedules/:id - L·∫•y chi ti·∫øt th·ªùi kh√≥a bi·ªÉu v·ªõi filter options
router.get("/:id", authMiddleware.protect, scheduleController.getScheduleById);

// PUT /api/schedules/:id/status - C·∫≠p nh·∫≠t tr·∫°ng th√°i th·ªùi kh√≥a bi·ªÉu (ƒë·∫∑t tr∆∞·ªõc /:id ƒë·ªÉ tr√°nh conflict)
router.put(
  "/:id/status",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager"),
  scheduleValidation.validateUpdateStatus,
  scheduleController.updateScheduleStatus
);

// PUT /api/schedules/:id - C·∫≠p nh·∫≠t th·ªùi kh√≥a bi·ªÉu
router.put(
  "/:id",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager", "teacher"),
  scheduleController.updateSchedule
);

// DELETE /api/schedules/:id - X√≥a th·ªùi kh√≥a bi·ªÉu
router.delete(
  "/:id",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager"),
  scheduleController.deleteSchedule
);

// Routes helper cho frontend

// GET /api/schedules/helper/classes - L·∫•y danh s√°ch l·ªõp theo kh·ªëi v√† nƒÉm h·ªçc
router.get(
  "/helper/classes",
  authMiddleware.protect,
  scheduleController.getClassesByGrade
);

// GET /api/schedules/helper/preview - Preview t·∫°o th·ªùi kh√≥a bi·ªÉu
router.post(
  "/helper/preview",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager"),
  scheduleController.previewScheduleCreation
);

// GET /api/schedules/helper/academic-years - L·∫•y danh s√°ch nƒÉm h·ªçc
router.get(
  "/helper/academic-years",
  authMiddleware.protect,
  scheduleController.getAcademicYearOptions
);

// GET /api/schedules/helper/time-slots - L·∫•y danh s√°ch khung gi·ªù
router.get(
  "/helper/time-slots",
  authMiddleware.protect,
  scheduleController.getTimeSlots
);

// Legacy routes (gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch)
router.post(
  "/grade",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager"),
  scheduleController.createScheduleForGrade
);

// PATCH /api/schedules/lesson/:lessonId/complete - Complete lesson
// Params: lessonId
// Ch·ªâ gi√°o vi√™n ƒë·∫£m nhi·ªám ho·∫∑c gi√°o vi√™n d·∫°y thay m·ªõi c√≥ th·ªÉ complete
router.patch(
  "/lesson/:lessonId/complete",
  authMiddleware.protect,
  authMiddleware.authorize("teacher"),
  scheduleController.completeLessonById
);

// Routes cho qu·∫£n l√Ω tr·∫°ng th√°i ti·∫øt h·ªçc

// PATCH /api/schedules/:scheduleId/period-status - C·∫≠p nh·∫≠t tr·∫°ng th√°i ti·∫øt h·ªçc
router.patch(
  "/:scheduleId/period-status",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager", "teacher"),
  scheduleController.updatePeriodStatus
);

// PATCH /api/schedules/:scheduleId/bulk-period-status - Bulk update tr·∫°ng th√°i nhi·ªÅu ti·∫øt
router.patch(
  "/:scheduleId/bulk-period-status",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager", "teacher"),
  scheduleController.bulkUpdatePeriodStatus
);

// PATCH /api/schedules/:scheduleId/mark-completed - Mark ti·∫øt h·ªçc ƒë√£ ho√†n th√†nh
router.patch(
  "/:scheduleId/mark-completed",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager", "teacher"),
  scheduleController.markPeriodCompleted
);

// PATCH /api/schedules/:scheduleId/mark-absent - Mark ti·∫øt h·ªçc v·∫Øng m·∫∑t
router.patch(
  "/:scheduleId/mark-absent",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager", "teacher"),
  scheduleController.markPeriodAbsent
);

// Routes cho qu·∫£n l√Ω lo·∫°i ti·∫øt h·ªçc (Period Type Management)

// GET /api/schedules/period-type-statistics - L·∫•y th·ªëng k√™ theo lo·∫°i ti·∫øt h·ªçc
router.get(
  "/period-type-statistics",
  authMiddleware.protect,
  scheduleController.getPeriodTypeStatistics
);

// GET /api/schedules/periods-by-type - L·∫•y danh s√°ch ti·∫øt h·ªçc theo lo·∫°i
router.get(
  "/periods-by-type",
  authMiddleware.protect,
  scheduleController.getPeriodsByType
);

// GET /api/schedules/identify-period-type - Nh·∫≠n bi·∫øt lo·∫°i ti·∫øt h·ªçc
router.get(
  "/identify-period-type",
  authMiddleware.protect,
  scheduleController.identifyPeriodType
);

// GET /api/schedules/available-slots - Ki·ªÉm tra slot tr·ªëng ƒë·ªÉ th√™m ti·∫øt h·ªçc
router.get(
  "/available-slots",
  authMiddleware.protect,
  scheduleController.checkAvailableSlots
);

// POST /api/schedules/:scheduleId/periods/makeup - Th√™m ti·∫øt d·∫°y b√π
router.post(
  "/:scheduleId/periods/makeup",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager", "teacher"),
  scheduleController.addMakeupPeriod
);

// POST /api/schedules/:scheduleId/periods/extracurricular - Th√™m ho·∫°t ƒë·ªông ngo·∫°i kh√≥a
router.post(
  "/:scheduleId/periods/extracurricular",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager", "teacher"),
  scheduleController.addExtracurricularPeriod
);

// Routes cho ƒë√°nh gi√° ti·∫øt h·ªçc

// POST /api/schedules/:scheduleId/evaluate - ƒê√°nh gi√° ti·∫øt h·ªçc
router.post(
  "/:scheduleId/evaluate",
  authMiddleware.protect,
  authMiddleware.authorize(
    "admin",
    "manager",
    "principal",
    "head_teacher",
    "teacher"
  ),
  scheduleController.evaluatePeriod
);

// GET /api/schedules/:scheduleId/evaluation - L·∫•y ƒë√°nh gi√° ti·∫øt h·ªçc
router.get(
  "/:scheduleId/evaluation",
  authMiddleware.protect,
  scheduleController.getPeriodEvaluation
);

// ========== API M·ªöI CHO SCHEMA TU·∫¶N-NG√ÄY-TI·∫æT ==========

// GET /api/schedules/:scheduleId/periods/:periodId - L·∫•y chi ti·∫øt ti·∫øt h·ªçc theo ID
router.get(
  "/:scheduleId/periods/:periodId",
  authMiddleware.protect,
  scheduleController.getPeriodById
);

// GET /api/schedules/:scheduleId/empty-slots - L·∫•y danh s√°ch ti·∫øt r·ªóng
router.get(
  "/:scheduleId/empty-slots",
  authMiddleware.protect,
  scheduleController.getEmptySlots
);

// GET /api/schedules/:scheduleId/weeks - L·∫•y th·ªùi kh√≥a bi·ªÉu theo tu·∫ßn
router.get(
  "/:scheduleId/weeks",
  authMiddleware.protect,
  scheduleController.getScheduleByWeek
);

// PUT /api/schedules/:scheduleId/periods/:periodId/status - C·∫≠p nh·∫≠t tr·∫°ng th√°i ti·∫øt h·ªçc theo ID
router.put(
  "/:scheduleId/periods/:periodId/status",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager", "teacher"),
  scheduleController.updatePeriodStatusById
);

// POST /api/schedules/:scheduleId/periods/:periodId/makeup - Th√™m ti·∫øt d·∫°y b√π v√†o slot r·ªóng
router.post(
  "/:scheduleId/periods/:periodId/makeup",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager", "teacher"),
  scheduleController.addMakeupToEmptySlot
);

// POST /api/schedules/:scheduleId/periods/:periodId/extracurricular - Th√™m ho·∫°t ƒë·ªông ngo·∫°i kh√≥a v√†o slot r·ªóng
router.post(
  "/:scheduleId/periods/:periodId/extracurricular",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager", "teacher"),
  scheduleController.addExtracurricularToEmptySlot
);

// API M·ªöI: L·∫•y l·ªãch h·ªçc theo ng√†y c·ª• th·ªÉ
// GET /api/schedules/day-schedule?className=12A1&academicYear=2024-2025&date=2024-12-16
router.get(
  "/day-schedule",
  authMiddleware.protect,
  scheduleController.getDaySchedule
);

// API M·ªöI: Search periods v·ªõi filter ph·ª©c t·∫°p
// GET /api/schedules/search-periods?teacher=xxx&subject=xxx&status=completed
router.get(
  "/search-periods",
  authMiddleware.protect,
  scheduleController.searchPeriods
);

// API M·ªöI: L·∫•y l·ªãch gi·∫£ng d·∫°y c·ªßa gi√°o vi√™n theo tu·∫ßn
// GET /api/schedules/teacher-weekly?teacherId=xxx&weekNumber=1&academicYear=2024-2025
router.get(
  "/teacher-weekly",
  authMiddleware.protect,
  scheduleController.getTeacherWeeklySchedule
);

// GET /api/schedules/periods/:periodId/detailed - L·∫•y chi ti·∫øt ti·∫øt h·ªçc v·ªõi metadata ƒë·∫ßy ƒë·ªß
router.get(
  "/periods/:periodId/detailed",
  authMiddleware.protect,
  scheduleController.getDetailedPeriodInfo
);

// PUT /api/schedules/bulk-update-periods - Bulk update nhi·ªÅu ti·∫øt h·ªçc
router.put(
  "/bulk-update-periods",
  authMiddleware.protect,
  authMiddleware.authorize("admin", "manager", "teacher"),
  scheduleController.bulkUpdatePeriods
);

// C·∫≠p nh·∫≠t m√¥ t·∫£ th√™m cho lesson
router.patch(
  "/lessons/:lessonId/description",
  authMiddleware.protect,
  authMiddleware.authorize("teacher", "manager", "admin"),
  scheduleController.updateLessonDescription
);

// X√≥a m√¥ t·∫£ th√™m cho lesson
router.delete(
  "/lessons/:lessonId/description",
  authMiddleware.protect,
  authMiddleware.authorize("teacher", "manager", "admin"),
  scheduleController.deleteLessonDescription
);


module.exports = router;
