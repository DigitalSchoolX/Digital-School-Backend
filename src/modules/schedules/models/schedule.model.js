const mongoose = require('mongoose');

// Schema cho m·ªôt ti·∫øt h·ªçc c·ª• th·ªÉ
const periodSchema = new mongoose.Schema({
  // ID ri√™ng cho m·ªói ti·∫øt h·ªçc
  _id: {
    type: mongoose.Schema.Types.ObjectId,
    default: () => new mongoose.Types.ObjectId()
  },
  
  // ID t·ª± ƒë·ªông v·ªõi format: period + s·ªë ti·∫øt + th·ª© + ng√†y th√°ng nƒÉm
  periodId: {
    type: String,
    required: true
  },
  
  periodNumber: {
    type: Number,
    required: true,
    min: 1,
    max: 10 // TƒÉng l√™n 10 ƒë·ªÉ c√≥ th·ªÉ th√™m ti·∫øt r·ªóng
  },
  subject: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Subject',
    required: false,
    default: null,
    validate: {
      validator: function(v) {
        // Subject is only required for regular periods (not empty, fixed, etc.)
        if (this.periodType === 'regular' && !v) {
          return false; // Subject is required for regular periods
        }
        return true; // All other cases are valid
      },
      message: 'Subject is required for regular periods'
    }
  },
  teacher: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: false,
    default: null,
    validate: {
      validator: function(v) {
        // Teacher is only required for regular periods (not empty, fixed, etc.)
        if (this.periodType === 'regular' && !v) {
          return false; // Teacher is required for regular periods
        }
        return true; // All other cases are valid
      },
      message: 'Teacher is required for regular periods'
    }
  },
  session: {
    type: String,
    enum: ['morning', 'afternoon'], // Bu·ªïi s√°ng ho·∫∑c chi·ªÅu
    required: false
  },
  timeStart: {
    type: String,
    required: false
  },
  timeEnd: {
    type: String,
    required: false
  },
  // Ph√¢n lo·∫°i ti·∫øt h·ªçc
  periodType: {
    type: String,
    enum: ['regular', 'makeup', 'extracurricular', 'fixed', 'empty'], // Th√™m 'empty' cho ti·∫øt r·ªóng
    default: 'regular'
  },
  // Th√™m tr·∫°ng th√°i h·ªçc t·∫≠p
  status: {
    type: String,
    enum: ['not_started', 'completed', 'absent', 'makeup'], // Ch∆∞a h·ªçc, H·ªçc xong, V·∫Øng ti·∫øt, Ti·∫øt b√π
    default: 'not_started'
  },
  actualDate: {
    type: Date, // Ng√†y th·ª±c t·∫ø di·ªÖn ra ti·∫øt h·ªçc
    default: null
  },
  completedAt: {
    type: Date, // Th·ªùi gian ho√†n th√†nh ti·∫øt h·ªçc
    default: null
  },
  notes: {
    type: String, // Ghi ch√∫ cho ti·∫øt h·ªçc
    maxlength: 200
  },
  attendance: {
    presentStudents: {
      type: Number,
      default: 0
    },
    absentStudents: {
      type: Number, 
      default: 0
    },
    totalStudents: {
      type: Number,
      default: 0
    }
  },
  // ƒê√°nh d·∫•u ti·∫øt h·ªçc c·ªë ƒë·ªãnh (ch√†o c·ªù, sinh ho·∫°t l·ªõp) - DEPRECATED, s·ª≠ d·ª•ng periodType = 'fixed'
  fixed: {
    type: Boolean,
    default: false
  },
  specialType: {
    type: String,
    enum: ['flag_ceremony', 'class_meeting'],
    required: false
  },
  // Th√¥ng tin b·ªï sung cho ti·∫øt d·∫°y b√π
  makeupInfo: {
    originalDate: {
      type: Date, // Ng√†y g·ªëc b·ªã v·∫Øng
      required: false
    },
    reason: {
      type: String, // L√Ω do d·∫°y b√π
      maxlength: 200,
      required: false
    },
    originalPeriodNumber: {
      type: Number, // Ti·∫øt g·ªëc b·ªã v·∫Øng
      min: 1,
      max: 10
    },
    originalWeekNumber: {
      type: Number, // Tu·∫ßn g·ªëc b·ªã v·∫Øng
      min: 1,
      max: 38
    },
    originalDayOfWeek: {
      type: Number, // Ng√†y g·ªëc b·ªã v·∫Øng
      min: 2,
      max: 7
    }
  },
  // Th√¥ng tin b·ªï sung cho ho·∫°t ƒë·ªông ngo·∫°i kh√≥a
  extracurricularInfo: {
    activityName: {
      type: String,
      required: false
    },
    activityType: {
      type: String,
      enum: ['club', 'sport', 'art', 'science', 'community_service', 'competition', 'other'],
      required: false
    },
    location: {
      type: String,
      maxlength: 100
    },
    maxParticipants: {
      type: Number,
      min: 1
    }
  },
  
  // ƒê√°nh gi√° ti·∫øt h·ªçc
  evaluation: {
    // ƒê√°nh gi√° chung
    overallRating: { 
      type: Number, 
      min: 1, 
      max: 5, 
      default: null 
    },
    
    // ƒê√°nh gi√° chi ti·∫øt
    criteria: {
      content: { type: Number, min: 1, max: 5, default: null }, // N·ªôi dung b√†i h·ªçc
      delivery: { type: Number, min: 1, max: 5, default: null }, // C√°ch truy·ªÅn ƒë·∫°t
      interaction: { type: Number, min: 1, max: 5, default: null }, // T∆∞∆°ng t√°c v·ªõi h·ªçc sinh
      preparation: { type: Number, min: 1, max: 5, default: null }, // Chu·∫©n b·ªã b√†i gi·∫£ng
      timeManagement: { type: Number, min: 1, max: 5, default: null } // Qu·∫£n l√Ω th·ªùi gian
    },
    
    // Nh·∫≠n x√©t
    feedback: {
      strengths: { type: String, default: '' }, // ƒêi·ªÉm m·∫°nh
      improvements: { type: String, default: '' }, // C·∫ßn c·∫£i thi·ªán
      suggestions: { type: String, default: '' }, // ƒê·ªÅ xu·∫•t
      generalComment: { type: String, default: '' } // Nh·∫≠n x√©t chung
    },
    
    // Th√¥ng tin ƒë√°nh gi√°
    evaluatedBy: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: 'User',
      default: null 
    },
    evaluatedAt: { type: Date, default: null },
    evaluatorRole: { 
      type: String, 
      enum: ['admin', 'manager', 'principal', 'head_teacher', 'peer_teacher'],
      default: null 
    }
  }
});

// Pre-validate hook ƒë·ªÉ x·ª≠ l√Ω cleanup tr∆∞·ªõc validation
periodSchema.pre('validate', function(next) {
  // ƒê·ªëi v·ªõi empty periods, x√≥a c√°c fields kh√¥ng c·∫ßn thi·∫øt
  if (this.periodType === 'empty') {
    this.subject = undefined;
    this.teacher = undefined;
    this.session = undefined;
  }
  
  // ƒê·ªëi v·ªõi regular periods, ƒë·∫£m b·∫£o session ƒë∆∞·ª£c set
  if (this.periodType === 'regular' && !this.session) {
    this.session = this.periodNumber <= 5 ? 'morning' : 'afternoon';
  }
  
  next();
});

// Schema cho l·ªãch h·ªçc theo ng√†y
const dayScheduleSchema = new mongoose.Schema({
  dayOfWeek: {
    type: Number,
    required: true,
    min: 2, // Th·ª© 2
    max: 7  // Th·ª© 7 (Ch·ªß nh·∫≠t = 1, nh∆∞ng kh√¥ng d√πng)
  },
  dayName: {
    type: String,
    enum: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    required: true
  },
  date: {
    type: Date,
    required: true // Ng√†y c·ª• th·ªÉ trong tu·∫ßn
  },
  periods: [periodSchema]
}, { _id: false });

// Schema cho tu·∫ßn h·ªçc
const weekScheduleSchema = new mongoose.Schema({
  weekNumber: {
    type: Number,
    required: true,
    min: 1,
    max: 38
  },
  startDate: {
    type: Date,
    required: true // Ng√†y b·∫Øt ƒë·∫ßu tu·∫ßn
  },
  endDate: {
    type: Date,
    required: true // Ng√†y k·∫øt th√∫c tu·∫ßn  
  },
  days: [dayScheduleSchema]
}, { _id: false });

// Schema ch√≠nh cho th·ªùi kh√≥a bi·ªÉu
const scheduleSchema = new mongoose.Schema({
  class: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Class',
    required: true
  },
  academicYear: {
    type: String,
    required: true,
    validate: {
      validator: function(v) {
        return /^\d{4}-\d{4}$/.test(v);
      },
      message: 'Academic year must be in format YYYY-YYYY (e.g., 2023-2024)'
    }
  },
  semester: {
    type: Number,
    enum: [1, 2], // H·ªçc k·ª≥ 1 ho·∫∑c 2
    required: true,
    default: 1
  },
  // Th√¥ng tin v·ªÅ 38 tu·∫ßn h·ªçc
  academicStartDate: {
    type: Date,
    required: true,
    default: new Date('2024-08-12') // B·∫Øt ƒë·∫ßu t·ª´ 12/8/2024
  },
  totalWeeks: {
    type: Number,
    required: true,
    default: 38
  },
  totalPeriodsPerWeek: {
    type: Number,
    default: 33,
    min: 30,
    max: 35
  },
  // M·∫£ng ch·ª©a 38 tu·∫ßn
  weeks: [weekScheduleSchema],
  status: {
    type: String,
    enum: ['draft', 'active', 'archived'],
    default: 'draft'
  },
  notes: {
    type: String,
    maxlength: 500
  },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  lastModifiedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }
}, { 
  timestamps: true,
  validateBeforeSave: false // T·∫Øt validation t·ª± ƒë·ªông
});

// Pre-save hook ƒë·ªÉ x·ª≠ l√Ω validation v√† cleanup d·ªØ li·ªáu
scheduleSchema.pre('save', function(next) {
  console.log('üîß Pre-save hook: Cleaning up schedule data and generating periodIds...');
  
  let cleanupCount = 0;
  let periodIdCount = 0;
  
  // Duy·ªát qua t·∫•t c·∫£ weeks v√† days ƒë·ªÉ cleanup periods v√† t·∫°o periodId
  this.weeks.forEach((week) => {
    week.days.forEach((day) => {
      day.periods.forEach((period) => {
        // T·∫°o periodId n·∫øu ch∆∞a c√≥
        if (!period.periodId && day.date && period.periodNumber && day.dayOfWeek) {
          const date = new Date(day.date);
          const dayNum = String(date.getDate()).padStart(2, '0');
          const month = String(date.getMonth() + 1).padStart(2, '0');
          const year = date.getFullYear();
          const periodNum = String(period.periodNumber).padStart(2, '0');
          const dayOfWeek = day.dayOfWeek;
          
          // Format: period + s·ªë ti·∫øt + th·ª© + ng√†y th√°ng nƒÉm
          period.periodId = `period${periodNum}_${dayOfWeek}_${dayNum}${month}${year}`;
          periodIdCount++;
        }
        
        // Cleanup empty periods
        if (period.periodType === 'empty') {
          // X√≥a c√°c fields kh√¥ng c·∫ßn thi·∫øt cho empty periods
          if (period.subject !== undefined) {
            period.subject = undefined;
            cleanupCount++;
          }
          if (period.teacher !== undefined) {
            period.teacher = undefined;
            cleanupCount++;
          }
          if (period.session !== undefined) {
            period.session = undefined;
            cleanupCount++;
          }
          if (period.timeStart !== undefined) {
            period.timeStart = undefined;
            cleanupCount++;
          }
          if (period.timeEnd !== undefined) {
            period.timeEnd = undefined;
            cleanupCount++;
          }
        }
        
        // Ensure regular periods have required fields
        if (period.periodType === 'regular') {
          // ƒê·∫£m b·∫£o session ƒë∆∞·ª£c set ƒë√∫ng
          if (!period.session) {
            period.session = period.periodNumber <= 5 ? 'morning' : 'afternoon';
          }
          // ƒê·∫£m b·∫£o timeStart v√† timeEnd ƒë∆∞·ª£c set cho regular periods
          if (!period.timeStart || !period.timeEnd) {
            const timeSlots = [
              { start: '07:00', end: '07:45' }, // Ti·∫øt 1
              { start: '07:50', end: '08:35' }, // Ti·∫øt 2
              { start: '08:40', end: '09:25' }, // Ti·∫øt 3
              { start: '09:45', end: '10:30' }, // Ti·∫øt 4
              { start: '10:35', end: '11:20' }, // Ti·∫øt 5
              { start: '13:30', end: '14:15' }, // Ti·∫øt 6
              { start: '14:20', end: '15:05' }, // Ti·∫øt 7
              { start: '15:10', end: '15:55' }, // Ti·∫øt 8
              { start: '16:00', end: '16:45' }, // Ti·∫øt 9
              { start: '16:50', end: '17:35' }  // Ti·∫øt 10
            ];
            const timeSlot = timeSlots[period.periodNumber - 1];
            if (timeSlot) {
              period.timeStart = timeSlot.start;
              period.timeEnd = timeSlot.end;
            }
          }
        }
        
        // Ensure fixed periods have required fields
        if (period.periodType === 'fixed') {
          if (!period.session) {
            period.session = period.periodNumber <= 5 ? 'morning' : 'afternoon';
          }
          if (!period.timeStart || !period.timeEnd) {
            const timeSlots = [
              { start: '07:00', end: '07:45' }, // Ti·∫øt 1
              { start: '07:50', end: '08:35' }, // Ti·∫øt 2
              { start: '08:40', end: '09:25' }, // Ti·∫øt 3
              { start: '09:45', end: '10:30' }, // Ti·∫øt 4
              { start: '10:35', end: '11:20' }, // Ti·∫øt 5
              { start: '13:30', end: '14:15' }, // Ti·∫øt 6
              { start: '14:20', end: '15:05' }  // Ti·∫øt 7
            ];
            const timeSlot = timeSlots[period.periodNumber - 1];
            if (timeSlot) {
              period.timeStart = timeSlot.start;
              period.timeEnd = timeSlot.end;
            }
          }
        }
      });
    });
  });
  
  if (cleanupCount > 0 || periodIdCount > 0) {
    console.log(`‚úÖ Pre-save completed: ${cleanupCount} fields cleaned, ${periodIdCount} periodIds generated`);
  }
  next();
});

// Compound index ƒë·ªÉ ƒë·∫£m b·∫£o m·ªói l·ªõp ch·ªâ c√≥ 1 th·ªùi kh√≥a bi·ªÉu active trong 1 nƒÉm h·ªçc
scheduleSchema.index({ 
  class: 1, 
  academicYear: 1, 
  status: 1 
}, { 
  unique: true,
  partialFilterExpression: { status: 'active' }
});

// Indexes kh√°c
scheduleSchema.index({ academicYear: 1 });
scheduleSchema.index({ status: 1 });
scheduleSchema.index({ semester: 1 });
scheduleSchema.index({ 'weeks.weekNumber': 1 });
scheduleSchema.index({ 'weeks.days.date': 1 });

// Virtual ƒë·ªÉ l·∫•y t√™n l·ªõp
scheduleSchema.virtual('className', {
  ref: 'Class',
  localField: 'class',
  foreignField: '_id',
  justOne: true,
  get: function(cls) {
    return cls ? cls.className : null;
  }
});

// Method ƒë·ªÉ t√≠nh t·ªïng s·ªë ti·∫øt ƒë√£ l√™n l·ªãch
scheduleSchema.methods.getTotalScheduledPeriods = function() {
  let total = 0;
  this.weeks.forEach(week => {
    week.days.forEach(day => {
      // Ch·ªâ ƒë·∫øm c√°c ti·∫øt kh√¥ng ph·∫£i l√† ti·∫øt r·ªóng
      total += day.periods.filter(period => period.periodType !== 'empty').length;
    });
  });
  return total;
};

// Method ƒë·ªÉ l·∫•y l·ªãch theo tu·∫ßn c·ª• th·ªÉ
scheduleSchema.methods.getScheduleByWeek = function(weekNumber) {
  return this.weeks.find(week => week.weekNumber === weekNumber);
};

// Method ƒë·ªÉ l·∫•y l·ªãch theo ng√†y c·ª• th·ªÉ
scheduleSchema.methods.getScheduleByDate = function(date) {
  const targetDate = new Date(date);
  targetDate.setHours(0, 0, 0, 0);
  
  for (const week of this.weeks) {
    for (const day of week.days) {
      const dayDate = new Date(day.date);
      dayDate.setHours(0, 0, 0, 0);
      if (dayDate.getTime() === targetDate.getTime()) {
        return { 
          week: week, 
          day: day,
          weekNumber: week.weekNumber,
          dayOfWeek: day.dayOfWeek 
        };
      }
    }
  }
  return null;
};

// Method ƒë·ªÉ l·∫•y ti·∫øt h·ªçc theo ID
scheduleSchema.methods.getPeriodById = function(periodId) {
  for (const week of this.weeks) {
    for (const day of week.days) {
      for (const period of day.periods) {
        if (period._id.toString() === periodId.toString()) {
          return {
            period: period,
            day: day,
            week: week,
            weekNumber: week.weekNumber,
            dayOfWeek: day.dayOfWeek,
            date: day.date
          };
        }
      }
    }
  }
  return null;
};

// Method ƒë·ªÉ ki·ªÉm tra xung ƒë·ªôt gi√°o vi√™n
scheduleSchema.methods.checkTeacherConflict = function(teacherId, weekNumber, dayOfWeek, periodNumber) {
  const week = this.getScheduleByWeek(weekNumber);
  if (!week) return false;
  
  const day = week.days.find(d => d.dayOfWeek === dayOfWeek);
  if (!day) return false;
  
  return day.periods.some(period => 
    period.teacher && period.teacher.toString() === teacherId.toString() && 
    period.periodNumber === periodNumber
  );
};

// Method ƒë·ªÉ l·∫•y th·ªëng k√™ ti·∫øn ƒë·ªô h·ªçc t·∫≠p
scheduleSchema.methods.getLearningProgress = function() {
  let totalPeriods = 0;
  let completedPeriods = 0;
  let absentPeriods = 0;
  let makeupPeriods = 0;
  let notStartedPeriods = 0;

  this.weeks.forEach(week => {
    week.days.forEach(day => {
      day.periods.forEach(period => {
        // Ch·ªâ t√≠nh c√°c ti·∫øt kh√¥ng ph·∫£i l√† ti·∫øt r·ªóng
        if (period.periodType !== 'empty') {
          totalPeriods++;
          switch(period.status) {
            case 'completed':
              completedPeriods++;
              break;
            case 'absent':
              absentPeriods++;
              break;
            case 'makeup':
              makeupPeriods++;
              break;
            case 'not_started':
            default:
              notStartedPeriods++;
              break;
          }
        }
      });
    });
  });

  return {
    totalPeriods,
    completedPeriods,
    absentPeriods,
    makeupPeriods,
    notStartedPeriods,
    completionRate: totalPeriods > 0 ? (completedPeriods / totalPeriods * 100).toFixed(2) : 0,
    attendanceRate: totalPeriods > 0 ? ((completedPeriods + makeupPeriods) / totalPeriods * 100).toFixed(2) : 0
  };
};

// Method ƒë·ªÉ l·∫•y ti·∫øn ƒë·ªô theo m√¥n h·ªçc
scheduleSchema.methods.getProgressBySubject = function() {
  const subjectProgress = {};
  
  this.weeks.forEach(week => {
    week.days.forEach(day => {
      day.periods.forEach(period => {
        if (period.subject && period.periodType !== 'empty') {
          const subjectId = period.subject.toString();
          if (!subjectProgress[subjectId]) {
            subjectProgress[subjectId] = {
              total: 0,
              completed: 0,
              absent: 0,
              makeup: 0,
              not_started: 0
            };
          }
          
          subjectProgress[subjectId].total++;
          subjectProgress[subjectId][period.status]++;
        }
      });
    });
  });

  // T√≠nh ph·∫ßn trƒÉm cho m·ªói m√¥n
  Object.keys(subjectProgress).forEach(subjectId => {
    const progress = subjectProgress[subjectId];
    progress.completionRate = progress.total > 0 ? (progress.completed / progress.total * 100).toFixed(2) : 0;
    progress.attendanceRate = progress.total > 0 ? ((progress.completed + progress.makeup) / progress.total * 100).toFixed(2) : 0;
  });

  return subjectProgress;
};

// Method ƒë·ªÉ update tr·∫°ng th√°i m·ªôt ti·∫øt h·ªçc b·∫±ng ID
scheduleSchema.methods.updatePeriodStatusById = function(periodId, status, options = {}) {
  const periodInfo = this.getPeriodById(periodId);
  if (!periodInfo) return false;
  
  const period = periodInfo.period;
  period.status = status;
  
  // C·∫≠p nh·∫≠t th·ªùi gian ho√†n th√†nh
  if (status === 'completed') {
    period.completedAt = new Date();
    period.actualDate = options.actualDate || new Date();
  }
  
  // C·∫≠p nh·∫≠t attendance n·∫øu c√≥
  if (options.attendance) {
    period.attendance = {
      presentStudents: options.attendance.presentStudents || 0,
      absentStudents: options.attendance.absentStudents || 0,
      totalStudents: options.attendance.totalStudents || 0
    };
  }
  
  // C·∫≠p nh·∫≠t notes n·∫øu c√≥
  if (options.notes) {
    period.notes = options.notes;
  }
  
  return true;
};

// Method ƒë·ªÉ update tr·∫°ng th√°i m·ªôt ti·∫øt h·ªçc (compatibility v·ªõi code c≈©)
scheduleSchema.methods.updatePeriodStatus = function(dayOfWeek, periodNumber, status, options = {}) {
  // T√¨m trong tu·∫ßn hi·ªán t·∫°i (tu·∫ßn ƒë·∫ßu ti√™n c√≥ ng√†y n√†y)
  for (const week of this.weeks) {
    const day = week.days.find(d => d.dayOfWeek === dayOfWeek);
    if (day) {
      const period = day.periods.find(p => p.periodNumber === periodNumber);
      if (period) {
        return this.updatePeriodStatusById(period._id, status, options);
      }
    }
  }
  return false;
};

// Method ƒë·ªÉ l·∫•y th·ªëng k√™ theo lo·∫°i ti·∫øt h·ªçc
scheduleSchema.methods.getPeriodTypeStatistics = function() {
  const stats = {
    regular: { total: 0, completed: 0, absent: 0, pending: 0 },
    makeup: { total: 0, completed: 0, absent: 0, pending: 0 },
    extracurricular: { total: 0, completed: 0, absent: 0, pending: 0 },
    fixed: { total: 0, completed: 0, absent: 0, pending: 0 },
    empty: { total: 0, completed: 0, absent: 0, pending: 0 }
  };

  this.weeks.forEach(week => {
    week.days.forEach(day => {
      day.periods.forEach(period => {
        const periodType = period.periodType || 'regular';
        if (stats[periodType]) {
          stats[periodType].total++;
          
          switch(period.status) {
            case 'completed':
              stats[periodType].completed++;
              break;
            case 'absent':
              stats[periodType].absent++;
              break;
            case 'not_started':
            default:
              stats[periodType].pending++;
              break;
          }
        }
      });
    });
  });

  // T√≠nh ph·∫ßn trƒÉm
  Object.keys(stats).forEach(type => {
    const stat = stats[type];
    stat.completionRate = stat.total > 0 ? (stat.completed / stat.total * 100).toFixed(2) : 0;
  });

  return stats;
};

// Method ƒë·ªÉ t√¨m ti·∫øt h·ªçc theo lo·∫°i
scheduleSchema.methods.getPeriodsByType = function(periodType) {
  const periods = [];
  
  this.weeks.forEach(week => {
    week.days.forEach(day => {
      day.periods.forEach(period => {
        if (period.periodType === periodType) {
          periods.push({
            weekNumber: week.weekNumber,
            dayOfWeek: day.dayOfWeek,
            dayName: day.dayName,
            date: day.date,
            periodNumber: period.periodNumber,
            periodId: period._id,
            subject: period.subject,
            teacher: period.teacher,
            status: period.status,
            timeStart: period.timeStart,
            timeEnd: period.timeEnd,
            notes: period.notes,
            makeupInfo: period.makeupInfo,
            extracurricularInfo: period.extracurricularInfo
          });
        }
      });
    });
  });
  
  return periods;
};

// Method ƒë·ªÉ t√¨m ti·∫øt r·ªóng c√≥ th·ªÉ s·ª≠ d·ª•ng
scheduleSchema.methods.getAvailableEmptySlots = function(weekNumber = null) {
  const emptySlots = [];
  
  const weeksToCheck = weekNumber ? [this.getScheduleByWeek(weekNumber)] : this.weeks;
  
  weeksToCheck.forEach(week => {
    if (week) {
      week.days.forEach(day => {
        day.periods.forEach(period => {
          if (period.periodType === 'empty') {
            emptySlots.push({
              weekNumber: week.weekNumber,
              dayOfWeek: day.dayOfWeek,
              dayName: day.dayName,
              date: day.date,
              periodNumber: period.periodNumber,
              periodId: period._id,
              timeStart: period.timeStart,
              timeEnd: period.timeEnd,
              session: period.session
            });
          }
        });
      });
    }
  });
  
  return emptySlots;
};

// Method ƒë·ªÉ th√™m ti·∫øt d·∫°y b√π v√†o slot r·ªóng
scheduleSchema.methods.addMakeupPeriodToEmptySlot = function(periodId, teacherId, subjectId, makeupInfo) {
  const periodInfo = this.getPeriodById(periodId);
  if (!periodInfo || periodInfo.period.periodType !== 'empty') {
    return false;
  }
  
  const period = periodInfo.period;
  
  // Chuy·ªÉn t·ª´ ti·∫øt r·ªóng sang ti·∫øt d·∫°y b√π
  period.periodType = 'makeup';
  period.subject = subjectId;
  period.teacher = teacherId;
  period.status = 'not_started';
  period.makeupInfo = {
    originalDate: makeupInfo.originalDate,
    reason: makeupInfo.reason,
    originalPeriodNumber: makeupInfo.originalPeriodNumber,
    originalWeekNumber: makeupInfo.originalWeekNumber,
    originalDayOfWeek: makeupInfo.originalDayOfWeek
  };
  
  return true;
};

// Method ƒë·ªÉ th√™m ho·∫°t ƒë·ªông ngo·∫°i kh√≥a v√†o slot r·ªóng
scheduleSchema.methods.addExtracurricularToEmptySlot = function(periodId, teacherId, extracurricularInfo) {
  const periodInfo = this.getPeriodById(periodId);
  if (!periodInfo || periodInfo.period.periodType !== 'empty') {
    return false;
  }
  
  const period = periodInfo.period;
  
  // Chuy·ªÉn t·ª´ ti·∫øt r·ªóng sang ho·∫°t ƒë·ªông ngo·∫°i kh√≥a
  period.periodType = 'extracurricular';
  period.subject = null;
  period.teacher = teacherId;
  period.status = 'not_started';
  period.extracurricularInfo = {
    activityName: extracurricularInfo.activityName,
    activityType: extracurricularInfo.activityType,
    location: extracurricularInfo.location,
    maxParticipants: extracurricularInfo.maxParticipants
  };
  
  return true;
};

// Method ƒë·ªÉ l·∫•y chi ti·∫øt ƒë·∫ßy ƒë·ªß c·ªßa m·ªôt ti·∫øt h·ªçc theo ID
scheduleSchema.methods.getPeriodDetailsById = function(periodId) {
  const periodInfo = this.getPeriodById(periodId);
  if (!periodInfo) return null;
  
  const { period, day, week } = periodInfo;
  
  // T√≠nh to√°n th·ªùi l∆∞·ª£ng ti·∫øt h·ªçc
  const startTime = new Date(`2000-01-01T${period.timeStart || '00:00'}:00`);
  const endTime = new Date(`2000-01-01T${period.timeEnd || '00:00'}:00`);
  const durationMinutes = (endTime - startTime) / (1000 * 60);
  
  // X√°c ƒë·ªãnh bu·ªïi h·ªçc b·∫±ng ti·∫øng Vi·ªát
  const sessionVN = period.session === 'morning' ? 'S√°ng' : 'Chi·ªÅu';
  
  // X√°c ƒë·ªãnh tr·∫°ng th√°i b·∫±ng ti·∫øng Vi·ªát
  const statusVN = {
    'not_started': 'Ch∆∞a h·ªçc',
    'completed': 'ƒê√£ ho√†n th√†nh',
    'absent': 'V·∫Øng ti·∫øt',
    'makeup': 'Ti·∫øt b√π'
  };
  
  // X√°c ƒë·ªãnh lo·∫°i ti·∫øt h·ªçc b·∫±ng ti·∫øng Vi·ªát
  const periodTypeVN = {
    'regular': 'Ch√≠nh quy',
    'makeup': 'D·∫°y b√π',
    'extracurricular': 'Ngo·∫°i kh√≥a',
    'fixed': 'C·ªë ƒë·ªãnh',
    'empty': 'Ti·∫øt r·ªóng'
  };
  
  return {
    // Th√¥ng tin ID
    id: period._id,
    
    // Th√¥ng tin v·ªã tr√≠
    location: {
      weekNumber: week.weekNumber,
      dayOfWeek: day.dayOfWeek,
      dayName: day.dayName,
      dayNameVN: ['', 'Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'][day.dayOfWeek],
      date: day.date,
      periodNumber: period.periodNumber
    },
    
    // Th√¥ng tin c∆° b·∫£n
    basic: {
      session: period.session,
      sessionVN: sessionVN,
      timeStart: period.timeStart,
      timeEnd: period.timeEnd,
      duration: `${durationMinutes} ph√∫t`
    },
    
    // Th√¥ng tin m√¥n h·ªçc v√† gi√°o vi√™n
    academic: {
      subject: period.subject,
      teacher: period.teacher,
      isFixed: period.fixed || period.periodType === 'fixed',
      specialType: period.specialType
    },
    
    // Th√¥ng tin tr·∫°ng th√°i
    status: {
      current: period.status,
      currentVN: statusVN[period.status] || 'Kh√¥ng x√°c ƒë·ªãnh',
      actualDate: period.actualDate,
      completedAt: period.completedAt,
      notes: period.notes || ''
    },
    
    // Th√¥ng tin lo·∫°i ti·∫øt h·ªçc
    type: {
      periodType: period.periodType || 'regular',
      periodTypeVN: periodTypeVN[period.periodType || 'regular'],
      isRegular: period.periodType === 'regular' || !period.periodType,
      isMakeup: period.periodType === 'makeup',
      isExtracurricular: period.periodType === 'extracurricular',
      isFixed: period.periodType === 'fixed' || period.fixed,
      isEmpty: period.periodType === 'empty'
    },
    
    // Th√¥ng tin ƒëi·ªÉm danh
    attendance: {
      presentStudents: period.attendance?.presentStudents || 0,
      absentStudents: period.attendance?.absentStudents || 0,
      totalStudents: period.attendance?.totalStudents || 0,
      attendanceRate: period.attendance?.totalStudents > 0 
        ? ((period.attendance.presentStudents / period.attendance.totalStudents) * 100).toFixed(1) + '%'
        : 'Ch∆∞a c√≥ d·ªØ li·ªáu'
    },
    
    // Th√¥ng tin d·∫°y b√π (n·∫øu c√≥)
    makeupInfo: period.periodType === 'makeup' ? {
      originalDate: period.makeupInfo?.originalDate,
      reason: period.makeupInfo?.reason,
      originalPeriodNumber: period.makeupInfo?.originalPeriodNumber,
      originalWeekNumber: period.makeupInfo?.originalWeekNumber,
      originalDayOfWeek: period.makeupInfo?.originalDayOfWeek,
      originalLocation: period.makeupInfo?.originalWeekNumber && period.makeupInfo?.originalDayOfWeek
        ? `Tu·∫ßn ${period.makeupInfo.originalWeekNumber}, ${['', 'CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'][period.makeupInfo.originalDayOfWeek]}, Ti·∫øt ${period.makeupInfo.originalPeriodNumber}`
        : null
    } : null,
    
    // Th√¥ng tin ngo·∫°i kh√≥a (n·∫øu c√≥)
    extracurricularInfo: period.periodType === 'extracurricular' ? {
      activityName: period.extracurricularInfo?.activityName,
      activityType: period.extracurricularInfo?.activityType,
      activityTypeVN: {
        'club': 'C√¢u l·∫°c b·ªô',
        'sport': 'Th·ªÉ thao', 
        'art': 'Ngh·ªá thu·∫≠t',
        'science': 'Khoa h·ªçc',
        'community_service': 'Ph·ª•c v·ª• c·ªông ƒë·ªìng',
        'competition': 'Thi ƒë·∫•u',
        'other': 'Kh√°c'
      }[period.extracurricularInfo?.activityType] || 'Kh√¥ng x√°c ƒë·ªãnh',
      location: period.extracurricularInfo?.location,
      maxParticipants: period.extracurricularInfo?.maxParticipants
    } : null,
    
    // Th√¥ng tin ƒë√°nh gi√° (n·∫øu c√≥)
    evaluation: period.evaluation ? {
      overallRating: period.evaluation.overallRating,
      overallRatingText: ['', 'K√©m', 'Trung b√¨nh', 'Kh√°', 'T·ªët', 'Xu·∫•t s·∫Øc'][period.evaluation.overallRating] || 'Ch∆∞a ƒë√°nh gi√°',
      criteria: {
        content: period.evaluation.criteria?.content,
        delivery: period.evaluation.criteria?.delivery, 
        interaction: period.evaluation.criteria?.interaction,
        preparation: period.evaluation.criteria?.preparation,
        timeManagement: period.evaluation.criteria?.timeManagement,
        averageScore: period.evaluation.criteria ? (
          (period.evaluation.criteria.content || 0) + 
          (period.evaluation.criteria.delivery || 0) + 
          (period.evaluation.criteria.interaction || 0) + 
          (period.evaluation.criteria.preparation || 0) + 
          (period.evaluation.criteria.timeManagement || 0)
        ) / 5 : null
      },
      feedback: period.evaluation.feedback,
      evaluatedBy: period.evaluation.evaluatedBy,
      evaluatedAt: period.evaluation.evaluatedAt,
      evaluatorRole: period.evaluation.evaluatorRole,
      evaluatorRoleVN: {
        'admin': 'Qu·∫£n tr·ªã vi√™n',
        'manager': 'Qu·∫£n l√Ω',
        'principal': 'Hi·ªáu tr∆∞·ªüng',
        'head_teacher': 'T·ªï tr∆∞·ªüng',
        'peer_teacher': 'Gi√°o vi√™n ƒë·ªìng nghi·ªáp'
      }[period.evaluation.evaluatorRole] || 'Kh√¥ng x√°c ƒë·ªãnh'
    } : null,
    
    // Metadata
    metadata: {
      canEdit: period.status === 'not_started' || period.status === 'absent',
      canMarkCompleted: period.status === 'not_started',
      canMarkAbsent: period.status === 'not_started' || period.status === 'completed',
      requiresAttendance: period.periodType === 'regular' || period.periodType === 'makeup',
      allowsNotes: true,
      canEvaluate: period.status === 'completed',
      hasEvaluation: !!period.evaluation?.evaluatedBy,
      canConvertToActivity: period.periodType === 'empty',
      canRestore: period.periodType !== 'regular' && period.periodType !== 'fixed'
    }
  };
};

// Method ƒë·ªÉ ƒë√°nh gi√° ti·∫øt h·ªçc b·∫±ng ID
scheduleSchema.methods.evaluatePeriodById = function(periodId, evaluationData, evaluatorId, evaluatorRole) {
  const periodInfo = this.getPeriodById(periodId);
  if (!periodInfo) return null;
  
  const period = periodInfo.period;
  
  // C·∫≠p nh·∫≠t th√¥ng tin ƒë√°nh gi√°
  period.evaluation = {
    overallRating: evaluationData.overallRating,
    criteria: {
      content: evaluationData.criteria?.content || null,
      delivery: evaluationData.criteria?.delivery || null,
      interaction: evaluationData.criteria?.interaction || null,
      preparation: evaluationData.criteria?.preparation || null,
      timeManagement: evaluationData.criteria?.timeManagement || null
    },
    feedback: {
      strengths: evaluationData.feedback?.strengths || '',
      improvements: evaluationData.feedback?.improvements || '',
      suggestions: evaluationData.feedback?.suggestions || '',
      generalComment: evaluationData.feedback?.generalComment || ''
    },
    evaluatedBy: evaluatorId,
    evaluatedAt: new Date(),
    evaluatorRole: evaluatorRole
  };
  
  return period.evaluation;
};

// Method ƒë·ªÉ ƒë√°nh gi√° ti·∫øt h·ªçc (compatibility v·ªõi code c≈©)
scheduleSchema.methods.evaluatePeriod = function(dayOfWeek, periodNumber, evaluationData, evaluatorId, evaluatorRole) {
  // T√¨m trong tu·∫ßn hi·ªán t·∫°i (tu·∫ßn ƒë·∫ßu ti√™n c√≥ ng√†y n√†y)
  for (const week of this.weeks) {
    const day = week.days.find(d => d.dayOfWeek === dayOfWeek);
    if (day) {
      const period = day.periods.find(p => p.periodNumber === periodNumber);
      if (period) {
        return this.evaluatePeriodById(period._id, evaluationData, evaluatorId, evaluatorRole);
      }
    }
  }
  return null;
};

// Static method ƒë·ªÉ t·∫°o th·ªùi kh√≥a bi·ªÉu template v·ªõi 38 tu·∫ßn
scheduleSchema.statics.createTemplate = function(classId, academicYear, createdBy, homeroomTeacherId = null) {
  const startDate = new Date('2024-08-12'); // Ng√†y b·∫Øt ƒë·∫ßu
  const totalWeeks = 38;
  
  // Subject ID for empty periods as requested
  const emptyPeriodSubjectId = '6856dabbb11173a0c87c0cba';
  
  const defaultTimeSlots = {
    morning: [
      { period: 1, start: '07:00', end: '07:45' },
      { period: 2, start: '07:50', end: '08:35' },
      { period: 3, start: '08:40', end: '09:25' },
      { period: 4, start: '09:45', end: '10:30' },
      { period: 5, start: '10:35', end: '11:20' }
    ],
    afternoon: [
      { period: 6, start: '13:30', end: '14:15' },
      { period: 7, start: '14:20', end: '15:05' },
      { period: 8, start: '15:10', end: '15:55' }, // Ti·∫øt r·ªóng b·ªï sung
      { period: 9, start: '16:00', end: '16:45' }, // Ti·∫øt r·ªóng b·ªï sung
      { period: 10, start: '16:50', end: '17:35' } // Ti·∫øt r·ªóng b·ªï sung
    ]
  };

  const dayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  
  const weeks = [];
  
  // T·∫°o 38 tu·∫ßn
  for (let weekNum = 1; weekNum <= totalWeeks; weekNum++) {
    const weekStartDate = new Date(startDate);
    weekStartDate.setDate(startDate.getDate() + (weekNum - 1) * 7);
    
    const weekEndDate = new Date(weekStartDate);
    weekEndDate.setDate(weekStartDate.getDate() + 5); // K·∫øt th√∫c v√†o th·ª© 7
    
    const days = [];
    
    // T·∫°o 6 ng√†y trong tu·∫ßn (th·ª© 2 ƒë·∫øn th·ª© 7)
    for (let dayIndex = 0; dayIndex < 6; dayIndex++) {
      const dayDate = new Date(weekStartDate);
      dayDate.setDate(weekStartDate.getDate() + dayIndex);
      
      const periods = [];
      
      // T·∫°o c√°c ti·∫øt trong ng√†y
      [...defaultTimeSlots.morning, ...defaultTimeSlots.afternoon].forEach(timeSlot => {
        // X√°c ƒë·ªãnh periodType d·ª±a tr√™n ng√†y v√† period
        let periodType;
        
        if (dayIndex === 5) { // Saturday (Th·ª© 7)
          // Saturday: ch·ªâ c√≥ 3 ti·∫øt h·ªçc ch√≠nh quy (1, 6, 7), c√°c ti·∫øt c√≤n l·∫°i l√† d·ª± ph√≤ng
          if ([1, 6, 7].includes(timeSlot.period)) {
            periodType = 'regular';
          } else {
            periodType = 'empty';
          }
        } else {
          // C√°c ng√†y kh√°c (Th·ª© 2-6): c√≥ 8 ti·∫øt h·ªçc ch√≠nh quy (1,2,3,4,5,6,7,8), c√≤n l·∫°i l√† d·ª± ph√≤ng
          periodType = timeSlot.period <= 8 ? 'regular' : 'empty';
        }
        
        const periodData = {
          _id: new mongoose.Types.ObjectId(),
          periodNumber: timeSlot.period,
          periodType: periodType,
          status: 'not_started'
        };
        
        // Add appropriate fields based on period type
        if (periodType === 'empty') {
          // For empty periods, assign the specific subject and homeroom teacher
          if (homeroomTeacherId) {
            periodData.subject = emptyPeriodSubjectId;
            periodData.teacher = homeroomTeacherId;
            periodData.session = timeSlot.period <= 5 ? 'morning' : 'afternoon';
            periodData.timeStart = timeSlot.start;
            periodData.timeEnd = timeSlot.end;
          }
        } else {
          // For regular periods
          periodData.session = timeSlot.period <= 5 ? 'morning' : 'afternoon';
          periodData.timeStart = timeSlot.start;
          periodData.timeEnd = timeSlot.end;
          // Don't explicitly set subject and teacher to null - let schema defaults handle it
        }
        
        periods.push(periodData);
      });
      
      days.push({
        dayOfWeek: dayIndex + 2, // Th·ª© 2 = 2, ..., Th·ª© 7 = 7
        dayName: dayNames[dayIndex],
        date: new Date(dayDate),
        periods: periods
      });
    }
    
    weeks.push({
      weekNumber: weekNum,
      startDate: new Date(weekStartDate),
      endDate: new Date(weekEndDate),
      days: days
    });
  }

  return new this({
    class: classId,
    academicYear,
    academicStartDate: new Date(startDate),
    totalWeeks: totalWeeks,
    weeks: weeks,
    createdBy,
    status: 'draft' // B·∫Øt ƒë·∫ßu v·ªõi draft, s·∫Ω active sau khi ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin
  });
};

// Compatibility methods ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn code c≈©
scheduleSchema.methods.getScheduleByDay = function(dayOfWeek) {
  // Tr·∫£ v·ªÅ ng√†y ƒë·∫ßu ti√™n trong tu·∫ßn ƒë·∫ßu ti√™n c√≥ dayOfWeek n√†y
  for (const week of this.weeks) {
    for (const day of week.days) {
      if (day.dayOfWeek === dayOfWeek) {
        return day;
      }
    }
  }
  return null;
};

scheduleSchema.methods.canAddPeriod = function(dayOfWeek, periodNumber) {
  // Ki·ªÉm tra trong tu·∫ßn ƒë·∫ßu ti√™n
  const week = this.weeks[0];
  if (!week) return false;
  
  const day = week.days.find(d => d.dayOfWeek === dayOfWeek);
  if (!day) return false;
  
  // Ki·ªÉm tra xem c√≥ ti·∫øt r·ªóng ·ªü v·ªã tr√≠ n√†y kh√¥ng
  const period = day.periods.find(p => p.periodNumber === periodNumber);
  return period && period.periodType === 'empty';
};

// Deprecated methods - gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch
scheduleSchema.methods.addMakeupPeriod = function(dayOfWeek, periodNumber, teacherId, subjectId, makeupInfo, timeSlot) {
  console.warn('addMakeupPeriod is deprecated. Use addMakeupPeriodToEmptySlot with periodId instead.');
  
  // T√¨m ti·∫øt r·ªóng ph√π h·ª£p
  const week = this.weeks[0];
  if (!week) return false;
  
  const day = week.days.find(d => d.dayOfWeek === dayOfWeek);
  if (!day) return false;
  
  const period = day.periods.find(p => p.periodNumber === periodNumber && p.periodType === 'empty');
  if (!period) return false;
  
  return this.addMakeupPeriodToEmptySlot(period._id, teacherId, subjectId, makeupInfo);
};

scheduleSchema.methods.addExtracurricularPeriod = function(dayOfWeek, periodNumber, teacherId, extracurricularInfo, timeSlot) {
  console.warn('addExtracurricularPeriod is deprecated. Use addExtracurricularToEmptySlot with periodId instead.');
  
  // T√¨m ti·∫øt r·ªóng ph√π h·ª£p
  const week = this.weeks[0];
  if (!week) return false;
  
  const day = week.days.find(d => d.dayOfWeek === dayOfWeek);
  if (!day) return false;
  
  const period = day.periods.find(p => p.periodNumber === periodNumber && p.periodType === 'empty');
  if (!period) return false;
  
  return this.addExtracurricularToEmptySlot(period._id, teacherId, extracurricularInfo);
};

const Schedule = mongoose.model('Schedule', scheduleSchema);

module.exports = Schedule; 