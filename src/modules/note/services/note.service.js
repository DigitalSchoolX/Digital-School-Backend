const Note = require("../models/note.model");

class NoteService {
  async createNote({ title, content, user, lesson, remindAt, time }) {
    try {
      console.log(
        "üìù Creating new note:",
        JSON.stringify(
          { title, content, user, lesson, remindAt, time },
          null,
          2
        )
      );

      const noteData = {
        title,
        content,
        user,
        lesson,
      };
      if (remindAt !== undefined) noteData.remindAt = remindAt;
      if (time !== undefined) noteData.time = time;

      const note = await Note.create(noteData);

      console.log("‚úÖ Note created successfully:", note._id);

      return note;
    } catch (error) {
      console.error("‚ùå Error creating note:", error.message);
      throw error;
    }
  }

  async getNotesByUserAndLesson(user, lesson) {
    try {
      console.log("üìã Getting notes for user:", user, "lesson:", lesson);

      const notes = await Note.find({ user, lesson })
        .sort({ createdAt: -1 })
        .select("+time"); // ƒë·∫£m b·∫£o lu√¥n tr·∫£ v·ªÅ tr∆∞·ªùng time

      console.log(
        `‚úÖ Found ${notes.length} notes for user ${user} and lesson ${lesson}`
      );

      return notes;
    } catch (error) {
      console.error(
        "‚ùå Error getting notes by user and lesson:",
        error.message
      );
      throw error;
    }
  }

  async updateNote(noteId, user, updateData) {
    try {
      console.log("‚úèÔ∏è Updating note:", noteId, "for user:", user);
      console.log("üìù Update data:", JSON.stringify(updateData, null, 2));

      // Ch·ªâ cho ph√©p c·∫≠p nh·∫≠t n·∫øu ghi ch√∫ thu·ªôc v·ªÅ ng∆∞·ªùi d√πng
      const updatedNote = await Note.findOneAndUpdate(
        { _id: noteId, user },
        updateData,
        { new: true, strict: false }
      );

      if (updatedNote) {
        console.log("‚úÖ Note updated successfully");
      } else {
        console.log("‚ùå Note not found or access denied");
      }

      return updatedNote;
    } catch (error) {
      console.error("‚ùå Error updating note:", error.message);
      throw error;
    }
  }

  async deleteNote(noteId, user) {
    try {
      console.log("üóëÔ∏è Deleting note:", noteId, "for user:", user);

      // Ch·ªâ cho ph√©p x√≥a n·∫øu ghi ch√∫ thu·ªôc v·ªÅ ng∆∞·ªùi d√πng
      const deletedNote = await Note.findOneAndDelete({ _id: noteId, user });

      if (deletedNote) {
        console.log("‚úÖ Note deleted successfully");
      } else {
        console.log("‚ùå Note not found or access denied");
      }

      return deletedNote;
    } catch (error) {
      console.error("‚ùå Error deleting note:", error.message);
      throw error;
    }
  }
}

module.exports = new NoteService();
