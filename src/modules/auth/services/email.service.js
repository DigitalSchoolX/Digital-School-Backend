const nodemailer = require('nodemailer');

class EmailService {
  constructor() {
    // Ki·ªÉm tra c·∫•u h√¨nh email (s·ª≠ d·ª•ng c√πng config v·ªõi user service)
    this.emailConfigured = !!(process.env.EMAIL_USER && process.env.EMAIL_PASS);
    
    if (this.emailConfigured) {
      // S·ª≠ d·ª•ng c·∫•u h√¨nh gi·ªëng user service
      if (process.env.EMAIL_HOST) {
        // C·∫•u h√¨nh SMTP t√πy ch·ªânh
        this.transporter = nodemailer.createTransport({
          host: process.env.EMAIL_HOST,
          port: process.env.EMAIL_PORT || 587,
          secure: process.env.EMAIL_PORT == 465, // true for 465, false for other ports
          auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS
          }
        });
      } else {
        // C·∫•u h√¨nh Gmail service (m·∫∑c ƒë·ªãnh)
        this.transporter = nodemailer.createTransport({
          service: 'gmail',
          auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS
          }
        });
      }
    } else {
      console.log('‚ö†Ô∏è  Email not configured. Reset tokens will be logged to console.');
      console.log('‚ö†Ô∏è  Please configure EMAIL_USER and EMAIL_PASS in .env file');
      this.transporter = null;
    }
  }

  // G·ª≠i email reset password
  async sendResetPasswordEmail(email, resetToken) {
    try {
      // N·∫øu email kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh, ch·ªâ log token
      if (!this.emailConfigured || !this.transporter) {
        console.log('üìß [NO EMAIL CONFIG] One-time password sent to console:');
        console.log(`üìß Email: ${email}`);
        console.log(`üìß One-Time Password: ${resetToken}`);
        console.log('üìß Password expires in 15 minutes');
        console.log('‚ö†Ô∏è  Configure EMAIL_USER and EMAIL_PASS in .env to send real emails');
        
        return {
          success: true,
          messageId: 'console-log',
          message: 'One-time password logged to console (email not configured)'
        };
      }

      const mailOptions = {
        from: process.env.EMAIL_FROM || process.env.EMAIL_USER,
        to: email,
        subject: 'Your One-Time Password for Password Reset - EcoSchool',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h1 style="color: #2c3e50;">EcoSchool - Password Reset</h1>
            <p>Xin ch√†o,</p>
            <p>B·∫°n ƒë√£ y√™u c·∫ßu reset m·∫≠t kh·∫©u cho t√†i kho·∫£n EcoSchool c·ªßa m√¨nh. Vui l√≤ng s·ª≠ d·ª•ng m·∫≠t kh·∫©u t·∫°m th·ªùi sau ƒë·ªÉ ƒëƒÉng nh·∫≠p:</p>
            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px; text-align: center; margin: 20px 0;">
              <h2 style="color: #e74c3c; font-size: 24px; letter-spacing: 2px; font-family: monospace; word-break: break-all;">${resetToken}</h2>
            </div>
            <p><strong>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</strong></p>
            <ol style="color: #666;">
              <li>Truy c·∫≠p trang ƒëƒÉng nh·∫≠p h·ªá th·ªëng</li>
              <li>S·ª≠ d·ª•ng email v√† m·∫≠t kh·∫©u t·∫°m th·ªùi ·ªü tr√™n</li>
              <li>H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông chuy·ªÉn ƒë·∫øn trang thi·∫øt l·∫≠p m·∫≠t kh·∫©u m·ªõi</li>
              <li>Nh·∫≠p m·∫≠t kh·∫©u m·ªõi theo y√™u c·∫ßu</li>
              <li>Ho√†n t·∫•t v√† ti·∫øp t·ª•c s·ª≠ d·ª•ng h·ªá th·ªëng</li>
            </ol>
            <p><strong>L∆∞u √Ω quan tr·ªçng:</strong></p>
            <ul style="color: #666;">
              <li>M·∫≠t kh·∫©u n√†y c√≥ hi·ªáu l·ª±c trong <strong>15 ph√∫t</strong></li>
              <li>Ch·ªâ s·ª≠ d·ª•ng m·ªôt l·∫ßn ƒë·ªÉ ƒëƒÉng nh·∫≠p v√† ƒë·∫∑t m·∫≠t kh·∫©u m·ªõi</li>
              <li>Kh√¥ng chia s·∫ª m·∫≠t kh·∫©u n√†y v·ªõi b·∫•t k·ª≥ ai</li>
              <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu reset password, vui l√≤ng b·ªè qua email n√†y</li>
            </ul>
            <hr style="margin: 30px 0;">
            <p style="color: #7f8c8d; font-size: 12px;">Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng EcoSchool. Vui l√≤ng kh√¥ng ph·∫£n h·ªìi email n√†y.</p>
          </div>
        `
      };

      const info = await this.transporter.sendMail(mailOptions);
      console.log('üìß Reset password email sent:', info.messageId);
      
      return {
        success: true,
        messageId: info.messageId
      };
      
    } catch (error) {
      console.error('‚ùå Error sending reset password email:', error);
      
      // Fallback: log token to console if email fails
      console.log('üìß [EMAIL FAILED - FALLBACK] One-time password:');
      console.log(`üìß Email: ${email}`);
      console.log(`üìß One-Time Password: ${resetToken}`);
      console.log('üìß Password expires in 15 minutes');
      
      // Kh√¥ng throw error ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n flow
      return {
        success: true,
        messageId: 'console-fallback',
        message: 'Email failed, one-time password logged to console'
      };
    }
  }

  // G·ª≠i email chung (method m·ªõi)
  async sendEmail(to, subject, html) {
    try {
      // N·∫øu email kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh, ch·ªâ log
      if (!this.emailConfigured || !this.transporter) {
        console.log('üìß [NO EMAIL CONFIG] Email would be sent:');
        console.log(`üìß To: ${to}`);
        console.log(`üìß Subject: ${subject}`);
        console.log('‚ö†Ô∏è  Configure EMAIL_USER and EMAIL_PASS in .env to send real emails');
        
        return {
          success: true,
          messageId: 'console-log',
          message: 'Email logged to console (email not configured)'
        };
      }

      const mailOptions = {
        from: process.env.EMAIL_FROM || process.env.EMAIL_USER,
        to: to,
        subject: subject,
        html: html
      };

      const info = await this.transporter.sendMail(mailOptions);
      console.log('üìß Email sent successfully:', info.messageId);
      
      return {
        success: true,
        messageId: info.messageId
      };
      
    } catch (error) {
      console.error('‚ùå Error sending email:', error);
      
      // Fallback: log email details to console if email fails
      console.log('üìß [EMAIL FAILED - FALLBACK] Email details:');
      console.log(`üìß To: ${to}`);
      console.log(`üìß Subject: ${subject}`);
      
      // Kh√¥ng throw error ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n flow
      return {
        success: true,
        messageId: 'console-fallback',
        message: 'Email failed, details logged to console'
      };
    }
  }

  // Test email connection
  async testConnection() {
    try {
      if (!this.emailConfigured || !this.transporter) {
        console.log('‚ö†Ô∏è  Email not configured - skipping connection test');
        return false;
      }
      
      await this.transporter.verify();
      console.log('‚úÖ Email service connection verified');
      return true;
    } catch (error) {
      console.error('‚ùå Email service connection failed:', error);
      return false;
    }
  }
}

module.exports = new EmailService(); 