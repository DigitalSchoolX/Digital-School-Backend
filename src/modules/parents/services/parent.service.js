const User = require('../../auth/models/user.model');
const Feedback = require('../models/feedback.model');
const scheduleService = require('../../schedules/services/schedule.service');
const NotificationService = require('../../notification/services/notification.service');

class ParentService {
  // L·∫•y danh s√°ch con c·ªßa ph·ª• huynh
  async getChildren(parentId) {
    try {
      const parent = await User.findById(parentId)
        .populate({
          path: 'children',
          select: 'name studentId email class_id dateOfBirth gender',
          populate: {
            path: 'class_id',
            select: 'className gradeLevel academicYear',
            populate: {
              path: 'homeroomTeacher',
              select: 'name email'
            }
          }
        });

      if (!parent) {
        throw new Error('Ph·ª• huynh kh√¥ng t·ªìn t·∫°i');
      }

      if (!parent.role.includes('parent')) {
        throw new Error('Ng∆∞·ªùi d√πng kh√¥ng ph·∫£i l√† ph·ª• huynh');
      }

      return {
        success: true,
        data: parent.children || []
      };
    } catch (error) {
      throw new Error(`L·ªói khi l·∫•y danh s√°ch con: ${error.message}`);
    }
  }

  // Xem th·ªùi kh√≥a bi·ªÉu c·ªßa con
  async getChildSchedule(parentId, childId, academicYear, startOfWeek, endOfWeek, token) {
    try {
      // Ki·ªÉm tra ph·ª• huynh c√≥ quy·ªÅn xem th·ªùi kh√≥a bi·ªÉu c·ªßa con n√†y kh√¥ng
      const parent = await User.findById(parentId);
      if (!parent) {
        throw new Error('Ph·ª• huynh kh√¥ng t·ªìn t·∫°i');
      }

      if (!parent.role.includes('parent')) {
        throw new Error('Ng∆∞·ªùi d√πng kh√¥ng ph·∫£i l√† ph·ª• huynh');
      }

      // Ki·ªÉm tra con c√≥ thu·ªôc v·ªÅ ph·ª• huynh n√†y kh√¥ng
      if (!parent.children.includes(childId)) {
        throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn xem th·ªùi kh√≥a bi·ªÉu c·ªßa h·ªçc sinh n√†y');
      }

      // L·∫•y th√¥ng tin con
      const child = await User.findById(childId)
        .populate('class_id', 'className gradeLevel academicYear');

      if (!child) {
        throw new Error('H·ªçc sinh kh√¥ng t·ªìn t·∫°i');
      }

      if (!child.class_id) {
        throw new Error('H·ªçc sinh ch∆∞a ƒë∆∞·ª£c ph√¢n l·ªõp');
      }

      // T√≠nh to√°n weekNumber t·ª´ startOfWeek v√† endOfWeek
      const startDate = new Date(startOfWeek);
      const endDate = new Date(endOfWeek);
      
      // Validate dates
      if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
        throw new Error('Ng√†y b·∫Øt ƒë·∫ßu ho·∫∑c k·∫øt th√∫c tu·∫ßn kh√¥ng h·ª£p l·ªá');
      }
      
      if (endDate < startDate) {
        throw new Error('Ng√†y k·∫øt th√∫c tu·∫ßn ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu tu·∫ßn');
      }
      
      // T√≠nh weekNumber d·ª±a tr√™n ng√†y b·∫Øt ƒë·∫ßu tu·∫ßn
      // S·ª≠ d·ª•ng logic t∆∞∆°ng t·ª± nh∆∞ trong schedule service
      let academicYearName = academicYear;
      if (typeof academicYear === 'object' && academicYear.name) {
        academicYearName = academicYear.name;
      }
      const academicYearStart = new Date(academicYearName.split('-')[0] + '-09-01'); // Gi·∫£ s·ª≠ nƒÉm h·ªçc b·∫Øt ƒë·∫ßu t·ª´ th√°ng 9
      const weekNumber = Math.ceil((startDate - academicYearStart) / (7 * 24 * 60 * 60 * 1000)) + 1;
      
      // ƒê·∫£m b·∫£o weekNumber kh√¥ng √¢m v√† h·ª£p l√Ω
      const validatedWeekNumber = Math.max(1, Math.min(52, weekNumber));

      // S·ª≠ d·ª•ng service schedule ƒë·ªÉ l·∫•y th·ªùi kh√≥a bi·ªÉu v·ªõi c·∫•u tr√∫c m·ªõi (kh√¥ng bao g·ªìm personal activities)
      console.log(`üìÖ Parent requesting schedule for child ${child.name} (${child.studentId})`);
      console.log(`üìö Class: ${child.class_id.className}, Academic Year: ${academicYearName}, Week: ${validatedWeekNumber}`);
      
      const scheduleResult = await scheduleService.getWeeklyScheduleByClassAndWeek(
        child.class_id.className,
        academicYear,
        validatedWeekNumber,
        token,
        null // Kh√¥ng truy·ªÅn th√¥ng tin h·ªçc sinh ƒë·ªÉ kh√¥ng l·∫•y personal activities (b·∫£o v·ªá quy·ªÅn ri√™ng t∆∞)
      );
      
      console.log(`‚úÖ Successfully retrieved schedule with ${scheduleResult.weeklySchedule?.lessons?.length || 0} lessons`);

      // Lo·∫°i b·ªè studentPersonalActivities kh·ªèi response ƒë·ªÉ b·∫£o v·ªá quy·ªÅn ri√™ng t∆∞
      const { studentPersonalActivities, ...scheduleDataWithoutPersonalActivities } = scheduleResult;
      
      return {
        success: true,
        data: {
          child: {
            _id: child._id,
            name: child.name,
            studentId: child.studentId,
            class: child.class_id
          },
          schedule: scheduleDataWithoutPersonalActivities,
          dateRange: {
            startOfWeek: startOfWeek,
            endOfWeek: endOfWeek,
            weekNumber: validatedWeekNumber
          }
        }
      };
    } catch (error) {
      throw new Error(`L·ªói khi l·∫•y th·ªùi kh√≥a bi·ªÉu: ${error.message}`);
    }
  }

  // G·ª≠i feedback
  async sendFeedback(parentId, feedbackData) {
    try {
      const { rating, type, targetTeacher, description } = feedbackData;

      // Ki·ªÉm tra ph·ª• huynh
      const parent = await User.findById(parentId);
      if (!parent) {
        throw new Error('Ph·ª• huynh kh√¥ng t·ªìn t·∫°i');
      }

      if (!parent.role.includes('parent')) {
        throw new Error('Ng∆∞·ªùi d√πng kh√¥ng ph·∫£i l√† ph·ª• huynh');
      }

      // Ki·ªÉm tra targetTeacher n·∫øu type l√† giao_vien
      if (type === 'giao_vien' && targetTeacher) {
        const teacher = await User.findById(targetTeacher);
        if (!teacher || !teacher.role.includes('teacher')) {
          throw new Error('Gi√°o vi√™n kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng h·ª£p l·ªá');
        }
      }

      // T·∫°o feedback m·ªõi
      const feedback = new Feedback({
        user: parentId,
        rating,
        type,
        targetTeacher: type === 'giao_vien' ? targetTeacher : undefined,
        description
      });

      await feedback.save();

      return {
        success: true,
        message: 'G√≥p √Ω ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng',
        data: feedback
      };
    } catch (error) {
      throw new Error(`L·ªói khi g·ª≠i g√≥p √Ω: ${error.message}`);
    }
  }

  // L·∫•y danh s√°ch feedback c·ªßa ph·ª• huynh
  async getMyFeedbacks(parentId, page = 1, limit = 10) {
    try {
      const parent = await User.findById(parentId);
      if (!parent) {
        throw new Error('Ph·ª• huynh kh√¥ng t·ªìn t·∫°i');
      }

      if (!parent.role.includes('parent')) {
        throw new Error('Ng∆∞·ªùi d√πng kh√¥ng ph·∫£i l√† ph·ª• huynh');
      }

      const skip = (page - 1) * limit;

      const feedbacks = await Feedback.find({ user: parentId })
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit)
        .populate('respondedBy', 'name email');

      const total = await Feedback.countDocuments({ user: parentId });

      return {
        success: true,
        data: {
          feedbacks,
          pagination: {
            page,
            limit,
            total,
            pages: Math.ceil(total / limit)
          }
        }
      };
    } catch (error) {
      throw new Error(`L·ªói khi l·∫•y danh s√°ch g√≥p √Ω: ${error.message}`);
    }
  }

  // L·∫•y t·∫•t c·∫£ feedback (cho admin/manager)
  async getAllFeedbacks(filters = {}) {
    try {
      const { status, rating, type, page = 1, limit = 10 } = filters;
      
      const query = {};
      
      // Filter theo status
      if (status && status !== 'all') {
        query.status = status;
      }
      
      // Filter theo rating
      if (rating && rating > 0) {
        query.rating = rating;
      }

      // Filter theo type
      if (type && type !== 'all') {
        query.type = type;
      }

      const skip = (page - 1) * limit;

      const feedbacks = await Feedback.find(query)
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit)
        .populate('user', 'name email')
        .populate('targetTeacher', 'name teacherId')
        .populate('respondedBy', 'name email');

      const total = await Feedback.countDocuments(query);

      return {
        success: true,
        data: {
          feedbacks,
          pagination: {
            page,
            limit,
            total,
            pages: Math.ceil(total / limit)
          }
        }
      };
    } catch (error) {
      throw new Error(`L·ªói khi l·∫•y danh s√°ch feedback: ${error.message}`);
    }
  }

  // L·∫•y th·ªëng k√™ feedback
  async getFeedbackStats() {
    try {
      const total = await Feedback.countDocuments();
      const pending = await Feedback.countDocuments({ status: 'pending' });
      const reviewed = await Feedback.countDocuments({ status: 'reviewed' });
      const resolved = await Feedback.countDocuments({ status: 'resolved' });
      
      // T√≠nh ƒëi·ªÉm trung b√¨nh
      const ratingStats = await Feedback.aggregate([
        {
          $group: {
            _id: null,
            averageRating: { $avg: '$rating' },
            totalRatings: { $sum: 1 }
          }
        }
      ]);

      const averageRating = ratingStats.length > 0 ? ratingStats[0].averageRating : 0;

      // Th·ªëng k√™ theo type
      const typeStats = await Feedback.aggregate([
        {
          $group: {
            _id: '$type',
            count: { $sum: 1 },
            averageRating: { $avg: '$rating' }
          }
        },
        {
          $sort: { count: -1 }
        }
      ]);

      return {
        success: true,
        data: {
          total,
          pending,
          reviewed,
          resolved,
          averageRating: Math.round(averageRating * 10) / 10, // L√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n
          typeStats
        }
      };
    } catch (error) {
      throw new Error(`L·ªói khi l·∫•y th·ªëng k√™ feedback: ${error.message}`);
    }
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i feedback
  async updateFeedbackStatus(feedbackId, status, adminResponse, adminId) {
    try {
      const feedback = await Feedback.findById(feedbackId)
        .populate('user', 'name email')
        .populate('respondedBy', 'name email');
      
      if (!feedback) {
        throw new Error('Feedback kh√¥ng t·ªìn t·∫°i');
      }

      const updateData = {
        status,
        respondedAt: new Date()
      };

      if (adminResponse) {
        updateData.adminResponse = adminResponse;
      }

      if (adminId) {
        updateData.respondedBy = adminId;
      }

      const updatedFeedback = await Feedback.findByIdAndUpdate(
        feedbackId,
        updateData,
        { new: true }
      ).populate('user', 'name email')
       .populate('respondedBy', 'name email');

      // G·ª≠i notification cho ph·ª• huynh khi admin ph·∫£n h·ªìi
      if (adminResponse && feedback.user) {
        const admin = await User.findById(adminId, 'name');
        const adminName = admin ? admin.name : 'Admin';
        
        let notificationTitle = '';
        let notificationContent = '';
        
        switch (status) {
          case 'reviewed':
            notificationTitle = 'Feedback ƒë√£ ƒë∆∞·ª£c xem x√©t';
            notificationContent = `Feedback c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ${adminName} xem x√©t.`;
            break;
          case 'resolved':
            notificationTitle = 'Feedback ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt';
            notificationContent = `Feedback c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ${adminName} gi·∫£i quy·∫øt v·ªõi ph·∫£n h·ªìi: "${adminResponse}"`;
            break;
          default:
            notificationTitle = 'C·∫≠p nh·∫≠t tr·∫°ng th√°i feedback';
            notificationContent = `Tr·∫°ng th√°i feedback c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh "${status}".`;
        }

        await NotificationService.createNotification({
          type: 'activity',
          title: notificationTitle,
          content: notificationContent,
          sender: adminId,
          receiverScope: { type: 'user', ids: [feedback.user._id.toString()] },
          relatedObject: { id: feedbackId, requestType: 'feedback' },
        });
      }

      return {
        success: true,
        message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i feedback th√†nh c√¥ng',
        data: updatedFeedback
      };
    } catch (error) {
      throw new Error(`L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i feedback: ${error.message}`);
    }
  }

  // L·∫•y chi ti·∫øt feedback
  async getFeedbackDetail(feedbackId) {
    try {
      const feedback = await Feedback.findById(feedbackId)
        .populate('user', 'name email')
        .populate('respondedBy', 'name email');

      if (!feedback) {
        throw new Error('Feedback kh√¥ng t·ªìn t·∫°i');
      }

      return {
        success: true,
        data: feedback
      };
    } catch (error) {
      throw new Error(`L·ªói khi l·∫•y chi ti·∫øt feedback: ${error.message}`);
    }
  }
}

module.exports = new ParentService(); 