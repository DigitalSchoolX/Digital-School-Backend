console.log('üè´ DEMO H·ªÜ TH·ªêNG TH·ªúI KH√ìA BI·ªÇU T·ªêI ∆ØU');
console.log('=====================================\n');

// Import TimetableSchedulerService
const TimetableSchedulerService = require('./src/modules/schedules/services/timetable-scheduler.service');

function demoTimetableSystem() {
  try {
    console.log('üß™ Test TimetableSchedulerService...');
    
    const scheduler = new TimetableSchedulerService();

    // Test 1: Ph√¢n lo·∫°i m√¥n h·ªçc
    console.log('\nüìö 1. Test ph√¢n lo·∫°i m√¥n h·ªçc:');
    const testSubjects = ['To√°n', 'VƒÉn', 'Ti·∫øng Anh', 'V·∫≠t l√Ω', 'Th·ªÉ d·ª•c', 'Tin h·ªçc', 'H√≥a h·ªçc', 'Sinh h·ªçc'];
    testSubjects.forEach(subject => {
      const category = scheduler.categorizeSubject(subject);
      console.log(`   ${subject}: ${category}`);
    });

    // Test 2: Ki·ªÉm tra ti·∫øt ƒë√¥i
    console.log('\n‚è∞ 2. Test ki·ªÉm tra ti·∫øt ƒë√¥i:');
    testSubjects.forEach(subject => {
      const needsDouble = scheduler.needsDoublePeriod(subject);
      console.log(`   ${subject}: ${needsDouble ? 'C·∫ßn ti·∫øt ƒë√¥i' : 'Kh√¥ng c·∫ßn'}`);
    });

    // Test 3: Ki·ªÉm tra ph√≤ng chuy√™n d·ª•ng
    console.log('\nüè¢ 3. Test ph√≤ng chuy√™n d·ª•ng:');
    testSubjects.forEach(subject => {
      const needsSpecial = scheduler.needsSpecialRoom(subject);
      console.log(`   ${subject}: ${needsSpecial ? 'Ph√≤ng chuy√™n d·ª•ng' : 'Ph√≤ng th∆∞·ªùng'}`);
    });

    // Test 4: R√†ng bu·ªôc c·ª©ng
    console.log('\nüîí 4. R√†ng bu·ªôc c·ª©ng (Hard Constraints):');
    Object.entries(scheduler.constraints.hardConstraints).forEach(([key, value]) => {
      console.log(`   ${key}: ${value ? '‚úÖ B·∫≠t' : '‚ùå T·∫Øt'}`);
    });

    // Test 5: R√†ng bu·ªôc m·ªÅm
    console.log('\nüîß 5. R√†ng bu·ªôc m·ªÅm (Soft Constraints):');
    Object.entries(scheduler.constraints.softConstraints).forEach(([key, value]) => {
      console.log(`   ${key}: ${value ? '‚úÖ B·∫≠t' : '‚ùå T·∫Øt'}`);
    });

    // Test 6: Tr·ªçng s·ªë t·ªëi ∆∞u h√≥a
    console.log('\n‚öñÔ∏è 6. Tr·ªçng s·ªë t·ªëi ∆∞u h√≥a:');
    Object.entries(scheduler.constraints.weights).forEach(([key, value]) => {
      console.log(`   ${key}: ${value}`);
    });

    // Test 7: Khung gi·ªù h·ªçc
    console.log('\nüåÖ 7. Khung gi·ªù h·ªçc:');
    console.log('   Bu·ªïi s√°ng:');
    scheduler.timeSlots.morning.forEach(slot => {
      console.log(`     Ti·∫øt ${slot.period}: ${slot.start} - ${slot.end}`);
    });
    console.log('   Bu·ªïi chi·ªÅu:');
    scheduler.timeSlots.afternoon.forEach(slot => {
      console.log(`     Ti·∫øt ${slot.period}: ${slot.start} - ${slot.end}`);
    });

    // Test 8: C·∫•u tr√∫c l·ªãch tr·ªëng
    console.log('\nüìÖ 8. C·∫•u tr√∫c l·ªãch tr·ªëng:');
    const emptySchedule = scheduler.createEmptySchedule();
    console.log(`   S·ªë ng√†y trong tu·∫ßn: ${emptySchedule.length}`);
    console.log(`   S·ªë ti·∫øt m·ªói ng√†y: ${emptySchedule[0].length}`);
    console.log(`   T·ªïng s·ªë slot: ${emptySchedule.length * emptySchedule[0].length}`);

    console.log('\nüéâ T·∫§T C·∫¢ TEST HO√ÄN TH√ÄNH TH√ÄNH C√îNG!');
    console.log('=====================================');
    
    console.log('\nüìã T√ìM T·∫ÆT T√çNH NƒÇNG:');
    console.log('‚úÖ Tu√¢n th·ªß r√†ng bu·ªôc c·ª©ng (Hard Constraints):');
    console.log('   - Gi√°o vi√™n kh√¥ng d·∫°y 2 l·ªõp c√πng l√∫c');
    console.log('   - M·ªói m√¥n c√≥ gi√°o vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng');
    console.log('   - ƒê·ªß s·ªë ti·∫øt/tu·∫ßn theo quy ƒë·ªãnh');
    console.log('   - Kh√¥ng v∆∞·ª£t qu√° s·ªë ti·∫øt t·ªëi ƒëa/ng√†y');
    console.log('   - Ph√≤ng chuy√™n d·ª•ng kh√¥ng xung ƒë·ªôt');
    console.log('   - Ch√†o c·ªù th·ª© 2 ti·∫øt 1, sinh ho·∫°t l·ªõp th·ª© 7 ti·∫øt cu·ªëi');

    console.log('\n‚úÖ T·ªëi ∆∞u r√†ng bu·ªôc m·ªÅm (Soft Constraints):');
    console.log('   - Ph√¢n b·ªë ƒë·ªÅu c√°c m√¥n trong tu·∫ßn');
    console.log('   - M√¥n kh√≥ (To√°n, L√Ω, H√≥a) x·∫øp bu·ªïi s√°ng');
    console.log('   - M√¥n th·ª±c h√†nh x·∫øp 2 ti·∫øt li·ªÅn khi c·∫ßn');
    console.log('   - Tr√°nh ti·∫øt l·∫ª cho m√¥n ch√≠nh');
    console.log('   - Th·ªÉ d·ª•c ∆∞u ti√™n bu·ªïi chi·ªÅu');
    console.log('   - M√¥n t·ª± nhi√™n ∆∞u ti√™n bu·ªïi s√°ng');

    console.log('\n‚úÖ Thu·∫≠t to√°n t·ªëi ∆∞u:');
    console.log('   - Backtracking v·ªõi heuristic');
    console.log('   - Genetic Algorithm fallback');
    console.log('   - ƒê√°nh gi√° ƒëi·ªÉm s·ªë th√¥ng minh');
    console.log('   - X·ª≠ l√Ω r√†ng bu·ªôc th·ªùi gian c·ªë ƒë·ªãnh');

    console.log('\nüöÄ H·ªÜ TH·ªêNG S·∫¥N S√ÄNG HO·∫†T ƒê·ªòNG!');

  } catch (error) {
    console.error('‚ùå L·ªói trong demo:', error.message);
    console.error(error.stack);
  }
}

// Ch·∫°y demo
demoTimetableSystem(); 