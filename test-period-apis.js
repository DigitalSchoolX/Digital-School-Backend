const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000/api';
const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NGQyOWE0OWEzMGQ4NWQ1OGNmMGNkZiIsImlhdCI6MTc1MDQ3NTYzMCwiZXhwIjoxNzUwNTYyMDMwfQ.mxMBe8OzD7XjHUBP-Oy8FQipSPcNm0CV61e-isxpLwI';
const scheduleId = '6856735f090b163ea0707518'; // ID t·ª´ d·ªØ li·ªáu user cung c·∫•p

// Test 1: Xem chi ti·∫øt ti·∫øt h·ªçc
async function testPeriodDetails() {
  try {
    console.log('üîç TEST 1: XEM CHI TI·∫æT TI·∫æT H·ªåC');
    console.log('‚ïê'.repeat(50));
    
    const response = await axios.get(`${API_BASE_URL}/schedules/period-details`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      params: {
        className: '12A4',
        academicYear: '2024-2025',
        dayOfWeek: 2, // Th·ª© 2
        periodNumber: 1 // Ti·∫øt 1 (l·ªÖ ch√†o c·ªù)
      }
    });

    console.log('‚úÖ Th√†nh c√¥ng!');
    console.log('üìä Response:');
    console.log(JSON.stringify(response.data, null, 2));
    return response.data;
    
  } catch (error) {
    console.log('‚ùå L·ªói:', error.response?.data?.message || error.message);
    return null;
  }
}

// Test 2: ƒê√°nh gi√° ti·∫øt h·ªçc
async function testEvaluatePeriod() {
  try {
    console.log('\nüéØ TEST 2: ƒê√ÅNH GI√Å TI·∫æT H·ªåC');
    console.log('‚ïê'.repeat(50));
    
    // Tr∆∞·ªõc ti√™n, c·∫ßn ƒë√°nh d·∫•u ti·∫øt h·ªçc l√† completed
    await axios.patch(`${API_BASE_URL}/schedules/${scheduleId}/mark-completed`, {
      dayOfWeek: 2,
      periodNumber: 1,
      completedAt: new Date().toISOString(),
      notes: 'L·ªÖ ch√†o c·ªù ƒë√£ ƒë∆∞·ª£c t·ªï ch·ª©c th√†nh c√¥ng'
    }, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ ƒê√£ ƒë√°nh d·∫•u ti·∫øt h·ªçc ho√†n th√†nh');
    
    // B√¢y gi·ªù ƒë√°nh gi√° ti·∫øt h·ªçc
    const evaluationData = {
      dayOfWeek: 2,
      periodNumber: 1,
      evaluation: {
        overallRating: 5,
        criteria: {
          content: 5,
          delivery: 4,
          interaction: 5,
          preparation: 5,
          timeManagement: 4
        },
        feedback: {
          strengths: 'L·ªÖ ch√†o c·ªù ƒë∆∞·ª£c t·ªï ch·ª©c trang tr·ªçng, h·ªçc sinh c√≥ √Ω th·ª©c k·ª∑ lu·∫≠t t·ªët',
          improvements: 'C√≥ th·ªÉ c·∫£i thi·ªán th·ªùi gian t·ªï ch·ª©c ƒë·ªÉ kh√¥ng b·ªã tr·ªÖ',
          suggestions: 'N√™n c√≥ th√™m ho·∫°t ƒë·ªông t∆∞∆°ng t√°c v·ªõi h·ªçc sinh',
          generalComment: 'L·ªÖ ch√†o c·ªù t·ªï ch·ª©c t·ªët, h·ªçc sinh tham gia t√≠ch c·ª±c'
        }
      }
    };
    
    const response = await axios.post(`${API_BASE_URL}/schedules/${scheduleId}/evaluate`, 
      evaluationData, 
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log('‚úÖ ƒê√°nh gi√° th√†nh c√¥ng!');
    console.log('üìä Response:');
    console.log(JSON.stringify(response.data, null, 2));
    return response.data;
    
  } catch (error) {
    console.log('‚ùå L·ªói:', error.response?.data?.message || error.message);
    if (error.response?.data) {
      console.log('üìÑ Chi ti·∫øt l·ªói:', JSON.stringify(error.response.data, null, 2));
    }
    return null;
  }
}

// Test 3: L·∫•y ƒë√°nh gi√° ti·∫øt h·ªçc
async function testGetEvaluation() {
  try {
    console.log('\nüìã TEST 3: L·∫§Y ƒê√ÅNH GI√Å TI·∫æT H·ªåC');
    console.log('‚ïê'.repeat(50));
    
    const response = await axios.get(`${API_BASE_URL}/schedules/${scheduleId}/evaluation`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      params: {
        dayOfWeek: 2,
        periodNumber: 1
      }
    });

    console.log('‚úÖ Th√†nh c√¥ng!');
    console.log('üìä Response:');
    console.log(JSON.stringify(response.data, null, 2));
    return response.data;
    
  } catch (error) {
    console.log('‚ùå L·ªói:', error.response?.data?.message || error.message);
    return null;
  }
}

// Test 4: Xem chi ti·∫øt ti·∫øt h·ªçc sau khi ƒë√°nh gi√°
async function testPeriodDetailsWithEvaluation() {
  try {
    console.log('\nüîç TEST 4: XEM CHI TI·∫æT TI·∫æT H·ªåC SAU KHI ƒê√ÅNH GI√Å');
    console.log('‚ïê'.repeat(50));
    
    const response = await axios.get(`${API_BASE_URL}/schedules/period-details`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      params: {
        className: '12A4',
        academicYear: '2024-2025',
        dayOfWeek: 2,
        periodNumber: 1
      }
    });

    console.log('‚úÖ Th√†nh c√¥ng!');
    console.log('üìä Response (with evaluation):');
    console.log(JSON.stringify(response.data, null, 2));
    return response.data;
    
  } catch (error) {
    console.log('‚ùå L·ªói:', error.response?.data?.message || error.message);
    return null;
  }
}

// Main test function
async function runAllTests() {
  console.log('üöÄ B·∫ÆT ƒê·∫¶U TEST C√ÅC API TI·∫æT H·ªåC');
  console.log('‚ïê'.repeat(60));
  
  // Test 1: Xem chi ti·∫øt ti·∫øt h·ªçc ban ƒë·∫ßu
  await testPeriodDetails();
  
  // Delay
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // Test 2: ƒê√°nh gi√° ti·∫øt h·ªçc
  await testEvaluatePeriod();
  
  // Delay
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // Test 3: L·∫•y ƒë√°nh gi√°
  await testGetEvaluation();
  
  // Delay
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // Test 4: Xem chi ti·∫øt sau ƒë√°nh gi√°
  await testPeriodDetailsWithEvaluation();
  
  console.log('\nüéâ HO√ÄN TH√ÄNH T·∫§T C·∫¢ TEST!');
  console.log('‚ïê'.repeat(60));
  
  // Hi·ªÉn th·ªã CURL examples
  console.log('\nüìñ CURL EXAMPLES:');
  console.log('‚îÄ'.repeat(30));
  
  console.log('\n1. Xem chi ti·∫øt ti·∫øt h·ªçc:');
  console.log(`curl -X GET "${API_BASE_URL}/schedules/period-details?className=12A4&academicYear=2024-2025&dayOfWeek=2&periodNumber=1" \\`);
  console.log(`     -H "Authorization: Bearer ${token}" \\`);
  console.log(`     -H "Content-Type: application/json"`);
  
  console.log('\n2. ƒê√°nh gi√° ti·∫øt h·ªçc:');
  console.log(`curl -X POST "${API_BASE_URL}/schedules/${scheduleId}/evaluate" \\`);
  console.log(`     -H "Authorization: Bearer ${token}" \\`);
  console.log(`     -H "Content-Type: application/json" \\`);
  console.log(`     -d '{
        "dayOfWeek": 2,
        "periodNumber": 1,
        "evaluation": {
          "overallRating": 5,
          "criteria": {
            "content": 5,
            "delivery": 4,
            "interaction": 5,
            "preparation": 5,
            "timeManagement": 4
          },
          "feedback": {
            "strengths": "L·ªÖ ch√†o c·ªù t·ªï ch·ª©c t·ªët",
            "improvements": "C·∫ßn c·∫£i thi·ªán th·ªùi gian",
            "suggestions": "Th√™m t∆∞∆°ng t√°c",
            "generalComment": "T·ªïng th·ªÉ t·ªët"
          }
        }
      }'`);
  
  console.log('\n3. L·∫•y ƒë√°nh gi√° ti·∫øt h·ªçc:');
  console.log(`curl -X GET "${API_BASE_URL}/schedules/${scheduleId}/evaluation?dayOfWeek=2&periodNumber=1" \\`);
  console.log(`     -H "Authorization: Bearer ${token}" \\`);
  console.log(`     -H "Content-Type: application/json"`);
}

// Run tests
if (require.main === module) {
  runAllTests()
    .catch(error => {
      console.error('‚ùå Test th·∫•t b·∫°i:', error.message);
      process.exit(1);
    });
}

module.exports = { 
  testPeriodDetails, 
  testEvaluatePeriod, 
  testGetEvaluation, 
  testPeriodDetailsWithEvaluation 
}; 