#!/usr/bin/env node

const { spawn } = require('child_process');
const http = require('http');

// üîë Thay ƒë·ªïi AUTH_TOKEN c·ªßa b·∫°n ·ªü ƒë√¢y
const AUTH_TOKEN = '312VgPv0sjaREsLlwocXberAzPu_4AHHxNDeRJ4Eb5Y9e1GNq';

console.log('üöÄ Starting ngrok tunnel for backend...');

// Ki·ªÉm tra server
function checkServer() {
  return new Promise((resolve) => {
    const req = http.get('http://localhost:8080', (res) => resolve(true));
    req.on('error', () => resolve(false));
    req.setTimeout(3000, () => { req.destroy(); resolve(false); });
  });
}

async function startNgrok() {
  // Ki·ªÉm tra server
  console.log('üîç Checking if backend server is running...');
  if (!(await checkServer())) {
    console.log('‚ùå Backend server is not running on port 8080');
    console.log('üí° Please start the server first with: npm run dev');
    process.exit(1);
  }
  
  console.log('‚úÖ Backend server is running on port 8080');
  
  // Ki·ªÉm tra AUTH_TOKEN
  if (!AUTH_TOKEN || AUTH_TOKEN === 'YOUR_NGROK_AUTH_TOKEN_HERE') {
    console.log('‚ùå Please update AUTH_TOKEN in this file');
    process.exit(1);
  }
  
  console.log('üîë Setting up ngrok authtoken...');
  
  // Set authtoken v√† ch·∫°y ngrok
  const setToken = spawn('ngrok', ['config', 'add-authtoken', AUTH_TOKEN], { stdio: 'inherit' });
  
  setToken.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ ngrok authtoken configured successfully');
      console.log('üîó Starting ngrok tunnel...');
      
      const ngrok = spawn('ngrok', ['http', '8080'], { stdio: 'inherit' });
      
      ngrok.on('error', (error) => {
        console.error('‚ùå Failed to start ngrok:', error.message);
        process.exit(1);
      });
      
      process.on('SIGINT', () => {
        console.log('\nüõë Stopping ngrok tunnel...');
        ngrok.kill('SIGINT');
        process.exit(0);
      });
    } else {
      console.log('‚ùå Failed to configure ngrok authtoken');
      process.exit(1);
    }
  });
}

startNgrok().catch(console.error);
