# Test Script cho Module Ph·ª• Huynh - API m·ªõi v·ªõi startOfWeek v√† endOfWeek
# PowerShell Script

# C·∫•u h√¨nh
$BASE_URL = "http://localhost:3000"
$TOKEN = "YOUR_JWT_TOKEN"  # Thay th·∫ø b·∫±ng token th·ª±c t·∫ø
$CHILD_ID = "CHILD_ID"     # Thay th·∫ø b·∫±ng ID con th·ª±c t·∫ø
$ACADEMIC_YEAR = "2024-2025"
$START_OF_WEEK = "2024-01-15"
$END_OF_WEEK = "2024-01-21"

Write-Host "üß™ Testing Parent API Module (New Version)..." -ForegroundColor Green

# Headers
$headers = @{
    "Authorization" = "Bearer $TOKEN"
    "Content-Type" = "application/json"
}

# Test 1: Health Check
Write-Host "`nüìã Test 1: Health Check" -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$BASE_URL/api/health" -Method GET
    $response | ConvertTo-Json -Depth 3
} catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 2: L·∫•y danh s√°ch con (c·∫ßn token h·ª£p l·ªá)
Write-Host "`nüìã Test 2: L·∫•y danh s√°ch con" -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$BASE_URL/api/parents/children" -Method GET -Headers $headers
    $response | ConvertTo-Json -Depth 3
} catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 3: Xem th·ªùi kh√≥a bi·ªÉu c·ªßa con (API m·ªõi)
Write-Host "`nüìÖ Test 3: Xem th·ªùi kh√≥a bi·ªÉu c·ªßa con (v·ªõi startOfWeek v√† endOfWeek)" -ForegroundColor Yellow
$scheduleUrl = "$BASE_URL/api/parents/children/$CHILD_ID/schedule?academicYear=$ACADEMIC_YEAR&startOfWeek=$START_OF_WEEK&endOfWeek=$END_OF_WEEK"
try {
    $response = Invoke-RestMethod -Uri $scheduleUrl -Method GET -Headers $headers
    $response | ConvertTo-Json -Depth 3
} catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 4: G·ª≠i feedback
Write-Host "`nüí¨ Test 4: G·ª≠i feedback" -ForegroundColor Yellow
$feedbackBody = @{
    rating = 5
    description = "H·ªá th·ªëng r·∫•t tuy·ªát v·ªùi! Con t√¥i r·∫•t th√≠ch s·ª≠ d·ª•ng v√† t√¥i c≈©ng th·∫•y r·∫•t ti·ªán l·ª£i. Giao di·ªán ƒë·∫πp, d·ªÖ s·ª≠ d·ª•ng v√† th√¥ng tin ƒë∆∞·ª£c c·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n."
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "$BASE_URL/api/parents/feedback" -Method POST -Headers $headers -Body $feedbackBody
    $response | ConvertTo-Json -Depth 3
} catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 5: L·∫•y danh s√°ch feedback
Write-Host "`nüìù Test 5: L·∫•y danh s√°ch feedback" -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$BASE_URL/api/parents/feedback?page=1&limit=5" -Method GET -Headers $headers
    $response | ConvertTo-Json -Depth 3
} catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 6: Validation Error - Rating kh√¥ng h·ª£p l·ªá
Write-Host "`nüîç Test 6: Validation Error - Rating kh√¥ng h·ª£p l·ªá" -ForegroundColor Yellow
$invalidFeedbackBody = @{
    rating = 6
    description = "Test description with enough characters to pass validation"
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "$BASE_URL/api/parents/feedback" -Method POST -Headers $headers -Body $invalidFeedbackBody
    $response | ConvertTo-Json -Depth 3
} catch {
    Write-Host "‚ùå Expected Error: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 7: Validation Error - Description qu√° ng·∫Øn
Write-Host "`nüîç Test 7: Validation Error - Description qu√° ng·∫Øn" -ForegroundColor Yellow
$shortFeedbackBody = @{
    rating = 4
    description = "Short"
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "$BASE_URL/api/parents/feedback" -Method POST -Headers $headers -Body $shortFeedbackBody
    $response | ConvertTo-Json -Depth 3
} catch {
    Write-Host "‚ùå Expected Error: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 8: Thi·∫øu tham s·ªë b·∫Øt bu·ªôc
Write-Host "`nüîç Test 8: Thi·∫øu tham s·ªë b·∫Øt bu·ªôc" -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$BASE_URL/api/parents/children/$CHILD_ID/schedule?academicYear=$ACADEMIC_YEAR" -Method GET -Headers $headers
    $response | ConvertTo-Json -Depth 3
} catch {
    Write-Host "‚ùå Expected Error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n‚úÖ Testing completed!" -ForegroundColor Green
Write-Host "`nüìù L∆∞u √Ω:" -ForegroundColor Cyan
Write-Host "- Thay th·∫ø YOUR_JWT_TOKEN b·∫±ng token th·ª±c t·∫ø" -ForegroundColor White
Write-Host "- Thay th·∫ø CHILD_ID b·∫±ng ID con th·ª±c t·∫ø" -ForegroundColor White
Write-Host "- API m·ªõi s·ª≠ d·ª•ng startOfWeek v√† endOfWeek thay v√¨ weekNumber" -ForegroundColor White 