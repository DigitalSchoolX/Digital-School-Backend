const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

async function assignTeacherSubjects() {
  try {
    // Login first
    console.log('üîê Logging in...');
    const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'manager@ecoschool.com',
      password: 'manager123'
    });

    if (!loginResponse.data.success) {
      console.error('‚ùå Login failed');
      return;
    }

    const token = loginResponse.data.data.token;
    console.log('‚úÖ Login successful');

    // Get subjects first
    console.log('\nüìö Getting subjects...');
    const subjectsResponse = await axios.get(`${BASE_URL}/subjects`, {
      headers: {
        'Authorization': `Bearer ${token}`
      },
      params: {
        limit: 50
      }
    });

    if (!subjectsResponse.data.success) {
      console.error('‚ùå Could not get subjects');
      return;
    }

    const subjects = subjectsResponse.data.data.subjects || [];
    console.log(`üìñ Found ${subjects.length} subjects`);

    // Get teachers
    console.log('\nüë®‚Äçüè´ Getting teachers...');
    const usersResponse = await axios.get(`${BASE_URL}/users`, {
      headers: {
        'Authorization': `Bearer ${token}`
      },
      params: {
        limit: 50
      }
    });

    if (!usersResponse.data.success) {
      console.error('‚ùå Could not get users');
      return;
    }

    const users = usersResponse.data.data.users || [];
    const teachers = users.filter(u => u.role.includes('teacher') || u.role.includes('homeroom_teacher'));
    console.log(`üë• Found ${teachers.length} teachers`);

    // Create subject-teacher mapping
    const subjectTeacherMapping = [
      { subjectName: 'Mathematics', teacherNames: ['Ph·∫°m Th·ªã L√Ω', 'Tr·∫ßn VƒÉn Nghƒ©a', 'Nguy·ªÖn Th·ªã ƒê·∫°o', 'V≈© VƒÉn ƒê·ª©c'] },
      { subjectName: 'Vietnamese Literature', teacherNames: ['L√™ Th·ªã Xu√¢n', 'Tr·∫ßn VƒÉn L·ªôc', 'Nguy·ªÖn Th·ªã B√≠ch'] },
      { subjectName: 'English', teacherNames: ['ƒê·ªó VƒÉn ƒê·ªãa', 'Ph·∫°m Th·ªã Oanh', 'L√™ VƒÉn Hi·ªáp'] },
      { subjectName: 'Physics', teacherNames: ['Tr·∫ßn Th·ªã Kim', 'Nguy·ªÖn VƒÉn S·ª≠'] },
      { subjectName: 'Chemistry', teacherNames: ['Phan VƒÉn Minh', 'L√™ Th·ªã Th·∫£o'] },
      { subjectName: 'Biology', teacherNames: ['Nguy·ªÖn VƒÉn Ph√∫c', 'V√µ Th·ªã H∆∞∆°ng'] },
      { subjectName: 'History', teacherNames: ['Tr·∫ßn VƒÉn ƒê·∫°i', 'Nguy·ªÖn Th·ªã Y·∫øn'] },
      { subjectName: 'Geography', teacherNames: ['B√πi VƒÉn S∆°n', 'ƒê·∫∑ng Th·ªã Nga'] },
      { subjectName: 'Physical Education', teacherNames: ['Ph·∫°m Th·ªã L·ª±c', 'L√™ VƒÉn Kh·ªèe', 'Tr·∫ßn Th·ªã Th·ªÉ', 'Nguy·ªÖn VƒÉn M·∫°nh'] },
      { subjectName: 'Civic Education', teacherNames: ['L√Ω VƒÉn H√πng'] },
      { subjectName: 'National Defense Education', teacherNames: ['Trung T√° L√™', 'Thi·∫øu T√° Tr·∫ßn', 'ƒê·∫°i T√° Nguy·ªÖn'] },
      { subjectName: 'Computer Science', teacherNames: ['Ph·∫°m Th·ªã App', 'L√™ VƒÉn Web', 'Tr·∫ßn Th·ªã Code', 'Nguy·ªÖn VƒÉn IT'] }
    ];

    console.log('\nüîó Assigning subjects to teachers...');
    let assignmentCount = 0;

    // Process each mapping
    for (const mapping of subjectTeacherMapping) {
      const subject = subjects.find(s => s.subjectName === mapping.subjectName);
      if (!subject) {
        console.log(`‚ö†Ô∏è Subject '${mapping.subjectName}' not found`);
        continue;
      }

      console.log(`\nüìö Assigning ${mapping.subjectName} (${subject._id}):`);

      for (const teacherName of mapping.teacherNames) {
        const teacher = teachers.find(t => t.name === teacherName);
        if (!teacher) {
          console.log(`   ‚ö†Ô∏è Teacher '${teacherName}' not found`);
          continue;
        }

        try {
          // Update teacher with subject
          const updateResponse = await axios.put(`${BASE_URL}/users/${teacher._id}`, {
            subject: subject._id
          }, {
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          });

          if (updateResponse.data.success) {
            console.log(`   ‚úÖ ${teacherName} -> ${mapping.subjectName}`);
            assignmentCount++;
          } else {
            console.log(`   ‚ùå Failed to assign ${teacherName}: ${updateResponse.data.message}`);
          }

        } catch (error) {
          console.log(`   ‚ùå Error assigning ${teacherName}: ${error.response?.data?.message || error.message}`);
        }

        // Small delay to avoid overwhelming the server
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }

    console.log(`\n‚úÖ Assignment completed! ${assignmentCount} teachers assigned subjects`);

    // Verify assignments
    console.log('\nüîç Verifying assignments...');
    const verifyResponse = await axios.get(`${BASE_URL}/users`, {
      headers: {
        'Authorization': `Bearer ${token}`
      },
      params: {
        limit: 50
      }
    });

    if (verifyResponse.data.success) {
      const updatedUsers = verifyResponse.data.data.users || [];
      const updatedTeachers = updatedUsers.filter(u => u.role.includes('teacher') || u.role.includes('homeroom_teacher'));
      const teachersWithSubjects = updatedTeachers.filter(t => t.subject);

      console.log(`üìä Verification results:`);
      console.log(`   Total teachers: ${updatedTeachers.length}`);
      console.log(`   Teachers with subjects: ${teachersWithSubjects.length}`);
      console.log(`   Teachers without subjects: ${updatedTeachers.length - teachersWithSubjects.length}`);

      if (teachersWithSubjects.length > 0) {
        console.log(`\n‚úÖ Sample assignments:`);
        teachersWithSubjects.slice(0, 5).forEach(teacher => {
          const subjectInfo = teacher.subject ? 
            (typeof teacher.subject === 'object' ? teacher.subject.subjectName : teacher.subject) :
            'Unknown';
          console.log(`   ${teacher.name} -> ${subjectInfo}`);
        });
      }
    }

  } catch (error) {
    console.error('‚ùå Error:', error.response?.data?.message || error.message);
  }
}

assignTeacherSubjects(); 