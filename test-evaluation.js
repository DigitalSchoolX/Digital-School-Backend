const mongoose = require('mongoose');
const Schedule = require('./src/modules/schedules/models/schedule.model');

async function testTemplate() {
  try {
    await mongoose.connect('mongodb://localhost:27017/ecoschool');
    console.log('üîç Testing template creation...\n');
    
    // T·∫°o template test
    const template = Schedule.createTemplate(
      new mongoose.Types.ObjectId(), 
      '2024-2025', 
      new mongoose.Types.ObjectId()
    );
    
    console.log('üìã Template created successfully');
    console.log('Total weeks:', template.weeks.length);
    
    // Ki·ªÉm tra tu·∫ßn ƒë·∫ßu ti√™n
    const firstWeek = template.weeks[0];
    console.log('\nüóìÔ∏è First week:');
    console.log('Week number:', firstWeek.weekNumber);
    console.log('Days:', firstWeek.days.length);
    
    // Ki·ªÉm tra Saturday (days[5])
    const saturday = firstWeek.days[5];
    console.log('\nüìÖ Saturday details:');
    console.log('Day name:', saturday.dayName);
    console.log('Day of week:', saturday.dayOfWeek);
    console.log('Total periods:', saturday.periods.length);
    
    console.log('\nüìù Saturday periods:');
    saturday.periods.forEach(period => {
      console.log(`Period ${period.periodNumber}: type=${period.periodType}, subject=${period.subject}, teacher=${period.teacher}`);
    });
    
    // Ki·ªÉm tra periods 2,3,4,5 c·ª• th·ªÉ
    const problematicPeriods = saturday.periods.filter(p => [2,3,4,5].includes(p.periodNumber));
    console.log('\n‚ö†Ô∏è Problematic periods (2,3,4,5):');
    problematicPeriods.forEach(period => {
      console.log(`Period ${period.periodNumber}:`, {
        type: period.periodType,
        subject: period.subject,
        teacher: period.teacher,
        session: period.session,
        timeStart: period.timeStart,
        timeEnd: period.timeEnd
      });
    });
    
    mongoose.disconnect();
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    mongoose.disconnect();
  }
}

testTemplate(); 